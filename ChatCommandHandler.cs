using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Plus.HabboHotel.GameClients;
using Plus.HabboHotel.Items;
using Plus.HabboHotel.Rooms;
using Plus.HabboHotel.Rooms.RoomInvokedItems;
using Plus.HabboHotel.Users;
using Plus.HabboHotel.PathFinding;
using Plus.HabboHotel.RoomBots;
using Plus.HabboHotel.Pets;
using Plus.Messages;
using System.Drawing;
using Plus.Util;
using System.Threading;
using Plus.HabboHotel.Groups;
using Plus.HabboHotel.Roleplay.Jobs;
using Plus.HabboHotel.Roleplay.Jobs.Space;
using Plus.HabboHotel.Roleplay.Jobs.Farming;
using Plus.HabboHotel.Roleplay.Casino.Slots;
using Plus.HabboHotel.Roleplay.Gangs;
using Plus.HabboHotel.Roleplay.Combat;
using Plus.HabboHotel.Roleplay.Apartments;
using Plus.HabboHotel.Roleplay;
using Plus.HabboHotel.Roleplay.Misc;
using Plus.HabboHotel.Roleplay.Radio;
using System.Net;
using System.Diagnostics;
using Plus.Database.Manager.Database.Session_Details.Interfaces;
using Plus.HabboHotel.Roleplay.Timers;
using Plus.HabboHotel.Roleplay.Combat.WeaponExtras;
using Plus.Configuration;
using Plus.Messages.Parsers;
using Plus.HabboHotel.Roleplay.Bots;
using Plus.HabboHotel.Roleplay.Minigames.Purge;
using System.Collections.Specialized;
using Plus.HabboHotel.Roleplay.Minigames.Colour_Wars;

//Regex for string check
using System.Text.RegularExpressions;

namespace Plus.HabboHotel.Misc
{
    class ChatCommandHandler
    {
        public static Boolean Parse(GameClient Session, string Input)
        {

            #region Checks
            if (!Input.StartsWith(":"))
            {
                return false;
            }

            if (Session == null)
            {
                return false;
            }


            if (!RoleplayData.Data["allowed_cmds"].ToString().Contains(Input.ToLower()))
            {
                if (Session.GetRoleplay().inColourWars)
                {
                    ParseColourWars(Session, Input);
                    return true;
                }

                if (Session.GetRoleplay().InMafiaWars)
                {
                    ParseMafiaWars(Session, Input);
                    return true;
                }
            }

            #endregion

            #region Set Input/Params
            Input = Input.Substring(1);
            string[] Params = Input.Split(' ');
            #endregion

            #region Main Switch Statement / Commands
            switch (Params[0].ToLower())
            {

                #region Plus Commands

                #region :makesay <user> <msg>
                case "makesay":
                    {
                        if (Session.GetHabbo().Rank == 23)
                        {
                            string text2 = Params[1];
                            GameClient TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(text2);
                            Room class2 = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);
                            if (Session == null || TargetClient == null)
                            {
                                return true;
                            }
                            RoomUser roomUser = class2.GetRoomUserManager().GetRoomUserByHabbo(TargetClient.GetHabbo().Id);
                            roomUser.Chat(TargetClient, MergeParams(Params, 2), false, 0, roomUser.LastBubble);
                            return true;
                        }
                        return true;
                    }

                #endregion

                #region :rolld <user> <number>
                case "rolld":
                    {
                        if (RoleplayManager.BypassRights(Session))
                        {
                            string Username = Params[1];
                            GameClient TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Username);
                            Room class2 = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);

                            if (Session == null || TargetClient == null)
                            {
                                return true;
                            }

                            TargetClient.GetHabbo().RollRig = Convert.ToInt32(Params[2]);
                            Session.SendWhisper("Actualizaste a " + Convert.ToInt32(Params[2]) + " correctamente!");
                            return true;
                        }
                        return true;
                    }

                #endregion
                #region :handitem <id>
                case "handitem":
                case "item":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_admin"))
                        {
                            return true;
                        }
                        if (Params.Length == 1)
                        {
                            Session.SendWhisper("Comando incorrecto. :handitem <id>");
                            return true;
                        }
                        RoomUser user = Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().UserName);
                        if (user.RidingHorse)
                        {
                            Session.SendWhisper(Plus.GetLanguage().GetVar("horse_handitem_error"));
                            return true;
                        }
                        if (user.IsLyingDown)
                        {
                            return true;
                        }
                        double ItemId;
                        string ItemId2 = Params[1];
                        if (double.TryParse(ItemId2, out ItemId))
                        {
                            user.CarryItem(int.Parse(ItemId.ToString()));
                            return true;
                        }
                        return true;
                    }
                #endregion
                #region :halink <msg>
                case "halink":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_owner"))
                        {
                            return true;
                        }
                        string str21 = Params[1];
                        string str22 = MergeParams(Params, 2);

                        ServerMessage message = new ServerMessage(LibraryParser.OutgoingRequest("SuperNotificationMessageComposer"));
                        message.AppendString("events");
                        message.AppendInteger(4);
                        message.AppendString("title");
                        message.AppendString("Alerta con Link");
                        message.AppendString("message");
                        message.AppendString(str22 + "\n\n");
                        message.AppendString("linkUrl");
                        message.AppendString(str21);
                        message.AppendString("linkTitle");
                        message.AppendString("Abrir Link");

                        Plus.GetGame().GetClientManager().QueueBroadcaseMessage(message);
                        return true;
                    }
                #endregion
                /*#region :holimpiadas <msg>
                case "holimpiadas":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Este miembro solo es para miembros del equipo staff!");
                            return true;
                        }
                        if (Params.Length == 1)
                        {
                            Session.SendWhisper("Comando invalido - :eventha <premio>");
                            return true;
                        }
                        string str19 = "";
                        str19 = MergeParams(Params, 1);

                        ServerMessage message = new ServerMessage(LibraryParser.OutgoingRequest("SuperNotificationMessageComposer"));
                        message.AppendString("events");
                        message.AppendInteger(4);
                        message.AppendString("title");
                        message.AppendString("HabboStick Olimpiadas");
                        message.AppendString("message");
                        message.AppendString("Las olimpiadas acaban de empezar!\n\nLas olimpiadas son en <b>" + Session.GetHabbo().CurrentRoom.RoomData.Name + "</b> y fue abierto por <b>" +
                            Session.GetHabbo().UserName + "</b>!\n\nSi deseas ver las olimpiadas de HabboStick, presiona 'Participar!' en el final de esta notificacion!" +
                            "\n\n" +
                            "Actuales pa√≠ses concursantes:\n<b>" + str19 + "</b>\n\n");
                        message.AppendString("linkUrl");
                        message.AppendString("event:navigator/goto/" + Session.GetHabbo().CurrentRoomId);
                        message.AppendString("linkTitle");
                        message.AppendString(Plus.GetLanguage().GetVar("alert_event_goRoom"));

                        Plus.GetGame().GetClientManager().QueueBroadcaseMessage(message);
                        return true;
                    }
                #endregion*/
                #region :eventha <msg>
                case "eventha":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Este miembro solo es para miembros del equipo staff!");
                            return true;
                        }
                        if (Params.Length == 1)
                        {
                            Session.SendWhisper("Comando invalido - :eventha <premio>");
                            return true;
                        }
                        string str19 = "";
                        str19 = MergeParams(Params, 1);

                        ServerMessage message = new ServerMessage(LibraryParser.OutgoingRequest("SuperNotificationMessageComposer"));
                        message.AppendString("events");
                        message.AppendInteger(4);
                        message.AppendString("title");
                        message.AppendString(Plus.GetLanguage().GetVar("alert_event_title"));
                        message.AppendString("message");
                        message.AppendString("Acaba de comenzar un nuevo evento!\n\nEl evento es en <b>" + Session.GetHabbo().CurrentRoom.RoomData.Name + "</b> y fue abierto por <b>" +
                            Session.GetHabbo().UserName + "</b>!\n\nSi deseas participar en este evento, presiona 'Participar!' en el final de esta notificacion!" +
                            "\n\n" +
                            "Mas detalles / Premios:\n<b>" + str19 + "</b>\n\n");
                        message.AppendString("linkUrl");
                        message.AppendString("event:navigator/goto/" + Session.GetHabbo().CurrentRoomId);
                        message.AppendString("linkTitle");
                        message.AppendString(Plus.GetLanguage().GetVar("alert_event_goRoom"));

                        Plus.GetGame().GetClientManager().QueueBroadcaseMessage(message);
                        return true;
                    }
                #endregion
                #region :disco
                case "disco":
                    {

                        Room room = Session.GetHabbo().CurrentRoom;
                        if (room == null) { Session.SendWhisper("La sala esta vacia"); return true; }

                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }

                        if (!room.DiscoMode)
                        {
                            room.DiscoMode = true;
                            Session.SendWhisper("Disco activada!");
                        }
                        else
                        {
                            room.DiscoMode = false;
                            Session.SendWhisper("Disco des-activada!");
                        }

                        return true;
                    }

                #endregion
                #region :filter <word>
                case "filter":
                case "addfilter":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_senior"))
                        {
                            #region Params / Variables

                            string word = Params[1];

                            if (Params.Length < 1)
                            {
                                Session.SendWhisper("Comando inv√°lido digite: :filter <word>");
                                return true;
                            }
                            else
                            {
                                word = MergeParams(Params, 1);
                            }

                            #endregion

                            #region Conditions

                            if (string.IsNullOrEmpty(word))
                            {
                                Session.SendWhisper("You must type in a word you want to filter.");
                                return true;
                            }

                            #endregion

                            #region Execute

                            Security.AntiPublicistas.AddBannedHotel(word);
                            Session.SendWhisper("Agregaste al filtro: " + word + "!");

                            #endregion

                        }
                        return true;
                    }

                #endregion

                #endregion

                #region Foton Commands

                #region Roleplay VIP

                #region :comandosvip
                case "comandosvip":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("Debes pertenecer al VUP para ver los comandos!");
                            return true;
                        }
                        #endregion
                        string Commandsvip = "";
                        Commandsvip += "---- Comandos VIP ----\n";
                        Commandsvip += ":push <usuario> - Empujar a un usuario\n";
                        Commandsvip += ":pull <usuario> - Atraer a un usuario\n";
                        Commandsvip += ":nimbus <2000/2001> - Usar nimbus\n";
                        Commandsvip += ":hoverboard <rosa/morado/blanca/negra> - Usar hoverboard\n";
                        Commandsvip += ":moonwalk - Caminar en reversa\n";
                        Commandsvip += ":usarropa <id> - Usar la ropa del lugar seleccionado\n";
                        Commandsvip += ":guardarropa <id> - Guardar ropa en el lugar seleccionado\n";
                        Commandsvip += ":usarropa <id> - Usar ropa del lugar seleccionado\n";
                        Commandsvip += ":jetpack - Activar cohete\n";
                        Commandsvip += ":dejarjetpack - Des activar cohete\n";
                        Commandsvip += ":dejarnimbus - Des activar nimbus\n";
                        Commandsvip += ":dejarhoverboard - Des activar hoverboard\n";
                        Commandsvip += ":flagme <Nuevo-Nombre> - Cambiar nombre de usuario\n";
                        Commandsvip += ":radiovip <mensaje> - Radio VIP\n";
                        Commandsvip += ":mradiovip - Desactivar la radio VIP\n";
                        Commandsvip += ":recompensa - Ofrecer una recompensa\n";
                        Commandsvip += "---- Novedades ----";
                        Commandsvip += ":colores - Ver la lista de colores disponibles\n";
                        Commandsvip += ":chat <color> <mensaje> - Escribe un mensaje con color\n";

                        Session.SendNotifWithScroll(Commandsvip);

                        return true;
                    }
                #endregion
                #region :bodyarmour
                case "proteccion":
                    {
                        #region Conditions
                        if (!Session.GetRoleplay().JobHasRights("police")
                            && !Session.GetRoleplay().JobHasRights("spriv")
                            && !Session.GetRoleplay().JobHasRights("ssec")
                            && !Session.GetRoleplay().JobHasRights("swat")
                            && !Session.GetRoleplay().JobHasRights("farmas")
                            && Session.GetRoleplay().Vests <= 0)
                        {
                            Session.SendWhisper("No tienes protecciones!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("bodyarmour"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("bodyarmour", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["bodyarmour"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["bodyarmour"] + "/300]");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOBA"))
                        {
                            Session.SendWhisper("No puedes activar la proteccion aqu√≠");
                            return true;
                        }
                        #endregion

                        #region Execute
                        if (Session.GetRoleplay().JobHasRights("police") && Session.GetRoleplay().Working)
                        {
                            RoleplayManager.Shout(Session, "*Se puso proteccion especial [60 Proteccion, 150 Energia]*", 6);
                            Session.GetRoleplay().Armor = 60;
                            Session.GetRoleplay().Energy += 150;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(989);
                            Session.GetRoleplay().EffectSeconds = 5;
                            Session.GetRoleplay().MultiCoolDown["bodyarmour"] = 300;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            Session.GetRoleplay().Armored = true;
                            return true;
                        }
                        else if (Session.GetRoleplay().JobHasRights("spriv") && Session.GetRoleplay().Working)
                        {
                            RoleplayManager.Shout(Session, "*Se puso proteccion especial [60 Proteccion, 150 Energia]*", 6);
                            Session.GetRoleplay().Armor = 60;
                            Session.GetRoleplay().Energy += 150;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(989);
                            Session.GetRoleplay().EffectSeconds = 5;
                            Session.GetRoleplay().MultiCoolDown["bodyarmour"] = 300;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            Session.GetRoleplay().Armored = true;
                            return true;
                        }
                        else if (Session.GetRoleplay().JobHasRights("ssec") && Session.GetRoleplay().Working)
                        {
                            RoleplayManager.Shout(Session, "*Se puso proteccion especial [60 Proteccion, 150 Energia]*", 6);
                            Session.GetRoleplay().Armor = 60;
                            Session.GetRoleplay().Energy += 150;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(989);
                            Session.GetRoleplay().EffectSeconds = 5;
                            Session.GetRoleplay().MultiCoolDown["bodyarmour"] = 300;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            Session.GetRoleplay().Armored = true;
                            return true;
                        }
                        else if (Session.GetRoleplay().JobHasRights("swat") && Session.GetRoleplay().Working)
                        {
                            RoleplayManager.Shout(Session, "*Se puso proteccion especial [100 Proteccion, 150 Energia]*", 6);
                            Session.GetRoleplay().Armor = 100;
                            Session.GetRoleplay().Energy += 150;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(989);
                            Session.GetRoleplay().EffectSeconds = 5;
                            Session.GetRoleplay().MultiCoolDown["bodyarmour"] = 300;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            Session.GetRoleplay().Armored = true;
                            return true;
                        }
                        else if (Session.GetRoleplay().JobHasRights("farmas") && Session.GetRoleplay().Working)
                        {
                            RoleplayManager.Shout(Session, "*Se puso proteccion especial [100 Proteccion, 150 Energia]*", 6);
                            Session.GetRoleplay().Armor = 100;
                            Session.GetRoleplay().Energy += 150;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(989);
                            Session.GetRoleplay().EffectSeconds = 5;
                            Session.GetRoleplay().MultiCoolDown["bodyarmour"] = 300;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            Session.GetRoleplay().Armored = true;
                            return true;
                        }
                        else if (Session.GetHabbo().HasFuse("fuse_vip") || Session.GetHabbo().Rank == 12)
                        {
                            RoleplayManager.Shout(Session, "*Se puso proteccion VIP [200 Proteccion, 340 Energia]*", 6);
                            Session.GetRoleplay().Armor = 200;
                            Session.GetRoleplay().Energy += 340;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(989);
                            Session.GetRoleplay().EffectSeconds = 5;
                            Session.GetRoleplay().MultiCoolDown["bodyarmour"] = 300;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            Session.GetRoleplay().Armored = true;
                            return true;
                        }
                        else
                        {
                            if (Session.GetRoleplay().Vests > 0)
                            {
                                Session.GetRoleplay().Vests -= 1;
                            }
                            Session.GetRoleplay().SaveQuickStat("vests", "" + Session.GetRoleplay().Vests);
                            int remainingvests = Session.GetRoleplay().Vests;
                            RoleplayManager.Shout(Session, "*Se puso proteccion [50 Proteccion, 150 Energia]*", 6);
                            Session.GetRoleplay().Armor = 50;
                            Session.GetRoleplay().Energy += 150;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(988);
                            Session.GetRoleplay().EffectSeconds = 5;
                            Session.GetRoleplay().MultiCoolDown["bodyarmour"] = 300;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            Session.GetRoleplay().Armored = true;
                            Session.SendWhisper("Te quedan '" + remainingvests + "' protecciones!");
                            return true;
                        }
                        #endregion
                    }
                #endregion
                #region :rocket

                case "jetpack":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("Debes ser VIP para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("rocket_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("rocket_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["rocket_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["rocket_cooldown"] + "/3]");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("ROCKET") && !Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("JETPACK"))
                        {
                            Session.SendWhisper("Lo sentimos, en esta sala no se permite el uso de Jet Pack!");

                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.GetHabbo().GetRoomUser().ApplyEffect(6);
                        RoleplayManager.Shout(Session, "*Activo el Jet Pack*", 6);
                        Session.GetHabbo().GetRoomUser().AllowOverride = true;
                        Session.GetRoleplay().MultiCoolDown["rocket_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        return true;
                        #endregion
                    }

                #endregion
                #region :stoprocket

                case "dejarjetpack":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("Necesitas ser VIP para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("rocket_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("rocket_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["rocket_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["rocket_cooldown"] + "/3]");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("ROCKET") && !Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("JETPACK"))
                        {
                            Session.SendWhisper("Lo sentimos en esta sala no se permite el Jet Pack!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                        RoleplayManager.Shout(Session, "*Desactivo el Jet Pack*", 3);
                        Session.GetHabbo().GetRoomUser().AllowOverride = false;
                        Session.GetRoleplay().MultiCoolDown["rocket_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        return true;
                        #endregion
                    }

                #endregion
                #region :saveslot <id>
                case "guardarropa":
                    {
                        #region Conditions

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :guardarropa <id>");
                            return true;
                        }

                        int slotid = Convert.ToInt32(Params[1]);

                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("Debes pertenecer al VIP para hacer esto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("No puedes guardar las ropas de las empresas!");
                            return true;
                        }
                        if (slotid <= 0 || slotid > 5)
                        {
                            Session.SendWhisper("Ropa ID inv√°lida: " + slotid + "!");
                            return true;
                        }

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("saveslot_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("saveslot_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["saveslot_cooldown"] > 0)
                        {
                            Session.SendWhisper("Cooldown [" + Session.GetRoleplay().MultiCoolDown["saveslot_cooldown"] + "/5]");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.saveSlotLook(Session, slotid, Session.GetHabbo().Look);
                        RoleplayManager.Shout(Session, "*Guardo un nuevo estilo de ropa en el lugar " + slotid + "*", 36);
                        Session.GetRoleplay().MultiCoolDown["saveslot_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }


                #endregion
                #region :useslot <id>
                case "usarropa":
                case "sacarropa":
                    {
                        #region Conditions

                        if (!Plus.IsNum(Params[1]))
                        {
                            Session.SendWhisperBubble("Solo numeros!", 34);
                            return true;
                        }

                        int slotid = Convert.ToInt32(Params[1]);

                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisperBubble("Necesitas ser miembro VIP!", 34);
                            return true;
                        }
                        if (slotid <= 0 || slotid > 5)
                        {
                            Session.SendWhisperBubble("Ropa ID invalida: " + slotid + "!", 34);
                            return true;
                        }
                        if (RoleplayManager.ZombieInfection)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto durante un evento de infeccion zombie!", 34);
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas en prision!", 34);
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas muerto!", 34);
                            return true;
                        }
                        if (Session.GetRoleplay().Working)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas trabajando!", 34);
                            return true;
                        }

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("useslot_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("useslot_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["useslot_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["useslot_cooldown"] + "/5]");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.useSlotLook(Session, slotid);
                        RoleplayManager.Shout(Session, "*Saco un kit de ropa nueva*", 36);
                        Session.GetRoleplay().MultiCoolDown["useslot_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }


                #endregion
                #region :nimbus

                case "nimbus":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("Debes ser VIP para hacer esto!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOBJETOS"))
                        {
                            Session.SendWhisper("En este lugar no se permiten usar estos objetos");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando invalido :nimbus <2000/2001>");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("nimbus_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("nimbus_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] > 0)
                        {
                            Session.SendWhisper("Tranquilo mago! [" + Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] + "/3]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        if (Params[1].ToLower().Equals("2000"))
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(992);
                            RoleplayManager.Shout(Session, "*Se subio a su Nimbus 2000*", 6);
                            Session.GetHabbo().GetRoomUser().AllowOverride = true;
                            Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] = 3;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            return true;
                        }
                        if (Params[1].ToLower().Equals("2001"))
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(993);
                            RoleplayManager.Shout(Session, "*Se subio a su Nimbus 2001*", 6);
                            Session.GetHabbo().GetRoomUser().AllowOverride = true;
                            Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] = 3;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            return true;
                        }
                        Session.SendWhisper("Este modelo de escoba no existe");
                        return true;
                        #endregion
                    }

                #endregion
                #region :dejarnimbus

                case "dejarnimbus":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("Necesitas ser VIP para hacer esto!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOBJETOS"))
                        {
                            Session.SendWhisper("En este lugar no se permiten usar estos objetos");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("nimbus_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("nimbus_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] > 0)
                        {
                            Session.SendWhisper("Tranquilo mago! [" + Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] + "/3]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                        RoleplayManager.Shout(Session, "*Se bajo de su nimbus*", 3);
                        Session.GetHabbo().GetRoomUser().AllowOverride = false;
                        Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        return true;
                        #endregion
                    }

                #endregion
                #region :hoverboard

                case "hoverboard":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("Debes ser VIP para hacer esto!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOBJETOS"))
                        {
                            Session.SendWhisper("En este lugar no se permiten usar estos objetos");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando invalido :hoverboard <blanco/negro>");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("hoverboard_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("hoverboard_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["hoverboard_cooldown"] > 0)
                        {
                            Session.SendWhisper("Deja que tu Hoverboard carge bateria! [" + Session.GetRoleplay().MultiCoolDown["hoverboard_cooldown"] + "/3]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        if (Params[1].ToLower().Equals("blanco"))
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(1);
                            RoleplayManager.Shout(Session, "*Se subio a su Hoverboard Blanco*", 6);
                            Session.GetRoleplay().MultiCoolDown["hoverboard_cooldown"] = 3;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            return true;
                        }
                        if (Params[1].ToLower().Equals("negro"))
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(504);
                            RoleplayManager.Shout(Session, "*Se subio a su Hoverboard Negro*", 6);
                            Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] = 3;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            return true;
                        }
                        if (Params[1].ToLower().Equals("rosa"))
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(505);
                            RoleplayManager.Shout(Session, "*Se subio a su Hoverboard Rosa*", 6); Session.GetHabbo().GetRoomUser().AllowOverride = true;
                            Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] = 3;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            return true;
                        }
                        if (Params[1].ToLower().Equals("morado"))
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(506);
                            RoleplayManager.Shout(Session, "*Se subio a su Hoverboard Morado*", 6);
                            Session.GetRoleplay().MultiCoolDown["nimbus_cooldown"] = 3;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            return true;
                        }
                        Session.SendWhisper("Este modelo de Hoverboard no existe");
                        return true;
                        #endregion
                    }

                #endregion
                #region :dejarnimbus

                case "dejarhoverboard":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("Necesitas ser VIP para hacer esto!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOBJETOS"))
                        {
                            Session.SendWhisper("En este lugar no se permiten usar estos objetos");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("hoverboard_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("hoverboard_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["hoverboard_cooldown"] > 0)
                        {
                            Session.SendWhisper("Tranquilo mago! [" + Session.GetRoleplay().MultiCoolDown["hoverboard_cooldown"] + "/3]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                        RoleplayManager.Shout(Session, "*Se bajo de su hoverboard*", 3);
                        Session.GetRoleplay().MultiCoolDown["hoverboard_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        return true;
                        #endregion
                    }

                #endregion

                #endregion

                #region General / Misc

                #region Uncategorized

                #region :ecomandos
                case "ecomandos":
                    {
                        string Commandse = "";

                        Commandse += "---- General ----\n";
                        Commandse += ":ecomandos - Ver comandos de empresas y empleos\n";
                        Commandse += ":empresas - Ver lista de empresas\n";
                        Commandse += ":empresa <id> - Ver informaci√≥n de una empresa\n";
                        Commandse += ":trabajar - Comenzar a trabajar\n";
                        Commandse += ":parartrabajo - Dejar de trabajar\n";
                        Commandse += ":renunciar - Renunciar al empleo actual\n";
                        Commandse += "\n---- Gerentes de Empresas ----\n";
                        Commandse += ":subir <usuario> - Subir empleado de rango\n";
                        Commandse += ":bajar <usuario> - Bajar empleado de rango\n";
                        Commandse += ":sancion <usuario> <tiempo> - Sancionar empleado\n";
                        Commandse += ":contratar <usuario> <rango> - Contratar nuevo ciudadano\n";
                        Commandse += ":despedir <usuario> - Despedir usuario\n";

                        Commandse += "\n---- Empresas de Seguridad ----\n";
                        Commandse += ":modoradio - Activar o desactivar la radio\n";
                        Commandse += ":advertencia <usuario> <razon> - Enviar una advertencia a un ciudadano\n";
                        Commandse += ":paralizar <usuario> - Paralizar ciudadano\n";
                        Commandse += ":desparalizar <usuario> - Desparalizar/Quitar spray a un ciudadano\n";
                        Commandse += ":spray <usuario> - Hechar spray sobre un ciudadano\n";
                        Commandse += ":esposar <usuario> - Esposar ciudadano\n";
                        Commandse += ":agregarbuscado <usuario> <tiempo> - Agregar ciudadano a la lista de buscados\n";
                        Commandse += ":quitarbuscado <usuario> - Quitar ciudadano de la lista de buscados\n";
                        Commandse += ":borrarlistabuscados - Eliminar todos los ciudadanos de la lista de buscados\n";
                        Commandse += ":arrestar <usuario> <tiempo> - Arrestar ciudadano\n";
                        Commandse += ":liberar <usuario> - Liberar ciudadano\n";
                        Commandse += ":buscar <usuario> - Buscar ciudadano\n";
                        Commandse += ":localizar <usuario> - Localizar ciudadano\n";
                        Commandse += ":apoyo - Solicitar apoyo\n";
                        Commandse += ":radio <mensaje> - Mandar mensaje por la radio\n";
                        Commandse += ":patrulla - Subirse a la patrulla\n";
                        Commandse += ":estacionarpatrulla - Dejar la patrulla\n";
                        Commandse += ":gasbomba - Lanzar bomba de gas\n";

                        Commandse += "\n---- Hospital ----\n";
                        Commandse += ":revivir <usuario> - Revivir ciudadano\n";
                        Commandse += ":vida <usuario> - Dar vida a un ciudadano\n";

                        Commandse += "\n---- Tienda de Mascotas ----\n";
                        Commandse += ":vendermascota <usuario> <tipo> <nombre> - Ofrecer mascota\n";
                        Commandse += ":mascotas - Ver lista de mascotas\n";

                        Commandse += "\n---- Cafeteria ----\n";
                        Commandse += ":ofrecer <usuario> <cafe> - Ofrecer Cafe a un usuario\n";
                        Commandse += "-- Lista de Cafes\n";
                        Commandse += " - Caf√© (cafe)\n";
                        Commandse += " - Caf√© expr√©s (expres)\n";

                        Commandse += "\n---- Tienda de Apple ----\n";
                        Commandse += ":ofrecer <usuario> movil\n";

                        Commandse += "\n---- Tienda de Armas ----\n";
                        Commandse += ":ofrecer <usuario> <arma> - Ofrecer arma\n";
                        Commandse += ":armas - Ver lista de armas\n";

                        Commandse += "\n---- Bares ----\n";
                        Commandse += ":ofrecer <usuario> <bebida>\n";
                        Commandse += "-- Lista de Bebidas\n";
                        Commandse += " - Bubble Juice Soda (bbj)\n";

                        Commandse += "\n---- Heladeria ----\n";
                        Commandse += ":ofrecer <usuario> <sabor>\n";
                        Commandse += "-- Lista de Sabores --\n";
                        Commandse += " - Vainialla (hvainilla)\n";
                        Commandse += " - Chocolate (hchocolate)\n";
                        Commandse += " - Fresa (hfresa)\n";
                        Commandse += " - Limon (hlimon)\n";
                        Commandse += " - Especial (hespecial)\n";

                        Commandse += "\n---- SPA ----\n";
                        Commandse += ":masaje <usuario> - Masajear usuario\n";

                        Commandse += "\n---- Narcotraficantes ----\n";
                        Commandse += ":ofrecer <usuario> <droga> - Ofrecer droga a un ciudadano\n";
                        Commandse += "-- Lista de Drogas --\n";
                        Commandse += " - Marihuana (marihuana)\n";
                        Commandse += " - Cocaina (cocaina)\n";

                        Commandse += "\n---- Restaurantes ----\n";
                        Commandse += ":servir <comida> - Servir comida\n";
                        Commandse += "-- Lista de Comida --\n";
                        Commandse += " - Hot Cakes (hotcakes)\n";
                        Commandse += " - Filete (filete)\n";
                        Commandse += " - Hamburgesa con Papas (hamburgesa)\n";
                        Commandse += " - Huevos con Arroz (huevos)\n";
                        Commandse += " - Espagueti a la Bolo√±esa (espagueti)\n";
                        Commandse += " - Batidos (batido)\n";
                        Commandse += " - Pollo (pollo)\n";

                        Commandse += "\n---- Agencia Espacial ----\n";
                        Commandse += ":vender uranio\n";

                        Commandse += "\n---- Farmacia ----\n";
                        Commandse += ":ofrecer <usuario> <producto>\n";
                        Commandse += "-- Lista de Productos --\n";
                        Commandse += " - Pildora - Esto da 50 de Vida";
                        Commandse += " - Pastilla - Esto da 100 de Energ√≠a";

                        Session.SendNotifWithScroll(Commandse);

                        return true;
                    }
                #endregion
                #region :mcomandos
                case "mcomandos":
                    {
                        string gcomandos = "";
                        gcomandos += "---- Comandos de las Mafias ----\n";
                        gcomandos += ":territorios - Ver todos los territorios\n";
                        gcomandos += ":mafia - Ver informacion de la mafia\n";           
                        gcomandos += ":mayuda - Ver comandos para las mafias\n";
                        gcomandos += ":minvitar <usuario> - Invitar a un ciudadano a unirse a la mafia\n";
                        gcomandos += ":mexpulsar <usuario> - Expulsar usuario de la mafia\n";
                        //gcomandos += ":grango <nombre> - Crear nuevo rango\n";
                        gcomandos += ":mbajar <usuario> - Bajar de rango a usuario de la mafia\n";
                        gcomandos += ":msubir <usuario> - Subir de rango a usuario de la mafia\n";
                        gcomandos += ":msalir - Salir de la mafia\n";
                        gcomandos += ":meliminar - Eliminar la mafia\n";
                        gcomandos += ":mradio <mensaje> - Mensaje a los miembros de la mafia\n";
                        gcomandos += ":maceptar - Aceptar unirse a una mafia\n";
                        gcomandos += ":mrechazar - Rechazar unirse a una mafia\n";
                        gcomandos += ":mterritorio - Capturar terreno\n";

                        Session.SendNotifWithScroll(gcomandos);

                        return true;
                    }
                #endregion
                #region :commands (INCOMPLETE)
                case "comandos":
                    {
                        string Commands = "";
                        Commands += "---- Listas de Comandos ----\n";
                        Commands += ":comandos - Lista de comandos\n";
                        Commands += ":comandosvip - Lista de comandos VIP\n";
                        Commands += ":ecomandos - Lista de comandos de empresas\n";
                        Commands += ":mcomandos - Lista de comandos de las Mafias\n";
                        Commands += ":scomandos - Lista de comandos STAFF\n";

                        Commands += "\n---- General ---\n";
                        Commands += ":servidor - Ver informaci√≥n del servidor\n";
                        Commands += ":refrescar - Refrescar misi√≥n y look\n";
                        Commands += ":salir - Salir del client\n";

                        Commands += "\n---- Comandos de M√≥vil ----\n";
                        Commands += ":911 - Solicitar ayuda de la policia\n";
                        Commands += ":ayuda - Solicitar ayuda de un gu√≠a\n";
                        Commands += ":taxi <calle> - Solicitar un taxi\n";
                        Commands += ":parartaxi - Cancelar el √∫ltimo taxi solicitado\n";
                        Commands += ":movil <usuario> <mensaje> - Mandar mensaje a un usuario\n";
                        Commands += ":modomovil - Activar o desactivar los mensajes de texto\n";
                        Commands += ":responder - Responder mensaje de texto\n";
                        Commands += ":bloquearmovil <usuario> - Bloquear usuario en el movil\n";
                        Commands += ":desbloquearmovil <usuario> - Desbloquear usuario en el movil\n";
                        Commands += ":listamovil - Ver lista de usuarios bloqueados en t√∫ movil\n";
                        Commands += ":recargarmovil - Recargar saldo a t√∫ telefono movil\n";

                        Commands += "\n---- Ciudad ----\n";
                        Commands += ":mapa - Ver el mapa de la ciudad\n";
                        Commands += ":salasactivas - Ver los lugares con m√°s usuarios\n";

                        Commands += "\n---- Comandos de Estadisticas ---- \n";
                        Commands += ":yo - Ver tu informaci√≥n y estadisticas\n";
                        Commands += ":comer - Comenzar a comer\n";
                        Commands += ":leer - Comenzar a leer\n";
                        Commands += ":pararlectura - Parar de leer\n";
                        Commands += ":correr - Comenzar a correr\n";
                        Commands += ":pesas - Comenzar a hacer pesas\n";
                        Commands += ":relajar - Recargar enargia\n";

                        Commands += "\n---- Comandos de Amistad ---- \n";
                        Commands += ":abrazo <usuario> - Dar un abrazo\n";                       
                        Commands += ":fianza <usuario> - Pagar la fianza de un ciudadano\n";                       

                        Commands += "\n---- Comandos de Utilidades ----\n";
                        Commands += ":volar - Comenzar a volar";
                        Commands += ":conducir - Comenzar a conducir\n";
                        Commands += ":pararconduccion - Dejar de conducir\n";
                        Commands += ":equip <arma> - Equipar arma\n";
                        Commands += ":unequip <arma> - Des equipar arma\n";
                        Commands += ":proteccion - Equipar proteccion\n";
                        Commands += ":llamarmascota - Llamar a mi mascota\n";

                        Commands += "\n---- Comandos de Informaci√≥n ----\n";
                        Commands += ":boveda - Ver la cantidad de dinero en la boveda\n";
                        Commands += ":recompensas - Ver lista de recompensas\n";

                        Commands += "\n---- Comandos de Conducta ----\n";
                        Commands += ":tirardroga - Tirar la marihuana que tienes\n";
                        Commands += ":pararataque - Ordenar que tu mascota deje de atacar\n";
                        Commands += ":entregarse - Entregarse a las autoridades\n";

                        Commands += "\n---- Comandos de Tiendas ----\n";
                        Commands += ":oferta <usuario> <producto> - Vender un producto a un ciudadano\n";
                        Commands += ":comprarbalas <cantidad> - Comprar balas\n";
                        Commands += ":comprarbombas <cantidad> - Comprar bombas\n";
                        Commands += ":comprarproteccion <cantidad> - Comprar proteccion\n";
                        Commands += ":comprarauto <modelo> - Comprar un automovil\n";
                        Commands += ":compraravion <modelo> - Comprar un avion\n";
                        Commands += ":combustible - Comprar combustible\n";

                        Commands += "\n---- Comandos de Ataques ----\n";
                        Commands += ":golpear <usuario> - Golpear a un usuario\n";
                        Commands += ":disparar <usuario> - Disparar a un usuario\n";
                        Commands += ":bomba <usuario> - Lanzar bomba a un usuario\n";
                        Commands += ":recargar - Recargar arma\n";

                        Commands += "\n---- Comandos Criminales ----\n";
                        Commands += ":rob <usuario> - Robar usuario\n";
                        Commands += ":robbanco - Robar banco\n";
                        Commands += ":robcajero - Robar cajero\n";
                        Commands += ":fumar - Fumar marihuana\n";
                        Commands += ":inhalar - Inhalar cocaina\n";
                        Commands += ":ataca <usuario> - Ordenar que tu mascota ataque\n";

                        Commands += "\n---- Comandos Financieros ----\n";
                        Commands += ":dar <usuario> <cantidad> - Dar creditos a un usuario\n";
                        Commands += ":saldobancario - Ver saldo en el banco\n";
                        Commands += ":retirar <cantidad> - Retirar dinero en el banco\n";
                        Commands += ":depositar <cantidad> - Depositar dinero en el banco\n";
                        Commands += ":cajerocantidad <cantidad> - Cambiar la cantidad de retiro del cajero automatico\n";

                        Commands += "\n---- Comandos de Agresiones ----\n";
                        Commands += ":bofetada <usuario> - Dar una bofetada\n";
                        Commands += ":escupir <usuario> - Escupirle a un usuario\n";
                        Commands += ":escupir - Escupir haci el suelo\n";
                        Commands += ":patear <usuario> - Patear un usuario en sus partes intimas\n";

                        Commands += "\n---- Comandos Sexuales y M√°s ----\n";
                        Commands += ":tocartetas <usuario> - Tocar las tetas a un usuario\n";
                        Commands += ":tocartrasero <usuario> - Tocar el trasero de un usuario\n";
                        Commands += ":violar <usuario> - Violar un usuario\n";
                        Commands += ":violargfa <usuario> - Violar a la gfa de un usuario\n";
                        Commands += ":oral <usuario> - Hacerle un oral a un usuario\n";
                        Commands += ":facial <usuario> - Hacer un facial a un usuario\n";
                        Commands += ":masturbacion <usuario> - Masturbar un usuario\n";
                        Commands += ":masturbacion - Masturbarce a si mismo\n";
                        Commands += ":anal <usuario> - Hacerle un anal a un usurio\n";
                        Commands += ":lamerpies <usuario> - Lamer los pies de un usuario\n";
                        Commands += ":acariciar <usuario> - Acariciar el cabello de un ciudadano\n";
                        Commands += ":pedo - Tirar un pedo al aire\n";
                        Commands += ":callar <ciudadano> - Mandar a callar un ciudadano\n";
                        Commands += "declararamor <ciudadano> - Declarar tu amor a un ciudadano\n";

                        Commands += "\n---- Comandos de Eventos ----\n";
                        Commands += ":1vs1 - Entrar a las peleas\n";
                        Commands += ":morder - Infectar ciudadano\n";
                        Commands += ":curar - Curar ciudadano\n";                       

                        Session.SendNotifWithScroll(Commands);

                        return true;
                    }
                #endregion
                #region :logout
                case "logout":
                case "salir":
                    {
                        Session.GetConnection().Dispose();
                    }
                    return true;
                #endregion
                #region :actualizar
                case "poof":
                    {

                        #region Conditions
                        if (Session.GetRoleplay().Working)
                        {
                            Session.GetRoleplay().StopWork(true);
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (RoleplayManager.ZombieInfection)
                        {
                            Session.SendWhisper("No puedes hacer esto durante la Infecci√≥n Zombie!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        DataRow User = null;

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("SELECT look,motto FROM users WHERE id = '" + Session.GetHabbo().Id + "'");
                            User = dbClient.GetRow();
                        }

                        Session.GetHabbo().Look = Convert.ToString(User["look"]);
                        Session.GetHabbo().Motto = Convert.ToString(User["motto"]);

                        Session.GetRoleplay().RefreshVals();
                        #endregion
                        Session.SendWhisper("Actualizaste tu keko & misi√≥n!");
                        return true;
                    }
                #endregion
               
                #region :huir
                case "huir":
                    {
                        if (Session.GetHabbo().CurrentRoom == null)
                        {
                            Session.SendNotif("Intento de escape!");
                            Session.GetMessageHandler().PrepareRoomForUser(Session.GetHabbo().CurrentRoomId, "");
                        }
                        return true;
                    }
                #endregion
                #region :roominfo
                case "roominfo":
                case "rinfo":
                    {
                        string room = "";
                        Room RoomInfo = Session.GetHabbo().CurrentRoom;

                        room += "====================\nInformacion de la sala " + RoomInfo.RoomData.Name + " (ID: " + RoomInfo.RoomData.Id + ")\n====================\n\n";
                        room += "ID: " + RoomInfo.RoomData.Id + "\n";
                        room += "Nombre de la sala: " + RoomInfo.RoomData.Name + "\n";
                        room += "Due√±o de la sala: " + RoomInfo.RoomData.Owner + " (ID: " + RoomInfo.RoomData.OwnerId + ")\n";
                        room += "Usuarios activos: " + RoomInfo.RoomData.UsersNow + "/" + RoomInfo.RoomData.UsersMax + "\n\n";
                        room += "Usuarios en la sala:\n";

                        foreach (RoomUser user in RoomInfo.GetRoomUserManager().UserList.Values)
                        {
                            if (user == null)
                                continue;
                            if (user.GetClient() == null)
                                continue;
                            if (user.GetClient().GetHabbo() == null)
                                continue;
                            if (user.GetClient().GetHabbo().SpectatorMode)
                                continue;

                            room += "- " + user.GetClient().GetHabbo().UserName + "\n";
                        }

                        Session.SendNotifWithScroll(room);

                        return true;
                    }
                #endregion
                #region :help
                case "informacion":
                    {
                        string help = "================== Ayuda ===================\n\n";
                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("SELECT * FROM `rp_roomhelp` WHERE `roomid` = '" + Session.GetHabbo().CurrentRoomId + "'");
                            DataTable Table = dbClient.GetTable();
                            foreach (DataRow Row in Table.Rows)
                            {
                                int HelpType = Convert.ToInt32(Row["type"]);
                                if (HelpType == 1)
                                {
                                    help += "" + Row["details"] + "\n";
                                }
                                else
                                {
                                    help += "" + Row["details"] + "\n\n";
                                }
                            }
                        }
                        Session.SendNotifWithScroll(help);
                        return true;
                    }
                #endregion
                #region :stats
                case "yo":
                    {
                        string Stats = "";
                        string isDead = (Session.GetRoleplay().Dead) ? "Si" : "No";
                        string isJailed = (Session.GetRoleplay().Jailed) ? "Si" : "No";
                        string GangName = (Session.GetRoleplay().GangId > 0 && GangManager.validGang(Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank)) ? GangManager.GangData[Session.GetRoleplay().GangId].Name : "None";
                        string GangRank = (Session.GetRoleplay().GangId > 0 && GangManager.validGang(Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank)) ? GangManager.GangRankData[Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank].Name : "None";

                        Stats += "============================================\nMis estadisticas \n============================================\n";
                        Stats += "Vida: " + Session.GetRoleplay().CurHealth + "/" + Session.GetRoleplay().MaxHealth + "\n";
                        if (Session.GetRoleplay().Armor >= 1)
                        {
                            Stats += "Armadura: " + Session.GetRoleplay().Armor + "\n";
                        }
                        if (Session.GetRoleplay().Armor <= 0)
                        {
                            Stats += "Armadura: 0\n";
                        }
                        Stats += "Energia: " + Session.GetRoleplay().Energy + "/100\n";
                        Stats += "Hambre: " + Session.GetRoleplay().Hunger + "/100\n";
                        Stats += "Higiene: " + Session.GetRoleplay().Hygiene + "/100\n";
                        Stats += "Alcohol: 0/100\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nCombate \n============================================\n";
                        Stats += "Muertes totales: " + Session.GetRoleplay().Deaths + "\n";
                        Stats += "Asesinatos totales: " + Session.GetRoleplay().Kills + "\n";
                        Stats += "Asesinatos por golpe: " + Session.GetRoleplay().PunchKills + "\n";
                        Stats += "Asesinatos por pelea: " + Session.GetRoleplay().MeleeKills + "\n";
                        Stats += "Asesinatos por arma: " + Session.GetRoleplay().GunKills + "\n";
                        Stats += "Asesinatos por bomba: " + Session.GetRoleplay().BombKills + "\n";
                        Stats += "Golpes totales: " + Session.GetRoleplay().Punches + "\n";
                        Stats += "Veces arrestado: " + Session.GetRoleplay().Arrested + "\n";
                        Stats += "Criminales arrestados: " + Session.GetRoleplay().Arrests + "\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nEstadisticas informativas \n============================================\n";
                        Stats += "Actualmente muerto: " + isDead + "\n";
                        Stats += "Actualmente en prision: " + isJailed + "\n";
                        if (Session.GetRoleplay().Married_To != 0)
                        {
                            Stats += "Casado/a con: " + RoleplayManager.ReturnOfflineInfo((uint)Session.GetRoleplay().Married_To, "username") + "\n";
                        }
                        if (Session.GetRoleplay().Married_To == 0)
                        {
                            Stats += "Casado/a con: Estas solo!\n";
                        }
                        Stats += "============================================\n";

                        Stats += "\n============================================\nEstadisticas de eventos \n============================================\n";
                        Stats += "Puntos de pelea: " + Session.GetRoleplay().Brawl_Pts + "\n";
                        Stats += "Puntos de infeccion: " + Session.GetRoleplay().Infection_Pts + "\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nEstadisticas de tiempo \n============================================\n";
                        Stats += "Tiempo en prision: " + Session.GetRoleplay().JailTimer + " minuto(s)\n";
                        Stats += "Tiempo muerto: " + Session.GetRoleplay().DeadTimer + " minuto(s)\n";
                        Stats += "Tiempo de correr: " + Session.GetRoleplay().WorkoutTimer_Done + "/" + Session.GetRoleplay().WorkoutTimer_ToDo + "\n";
                        Stats += "Tiempo de pesas: " + Session.GetRoleplay().WeightLiftTimer_Done + "/" + Session.GetRoleplay().WeightLiftTimer_ToDo + "\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nOtras estadisticas \n============================================\n";
                        Stats += "Empleo ID: " + Session.GetRoleplay().JobId + "\n";
                        Stats += "Puesto de empleo: " + Session.GetRoleplay().JobRank + "\n";
                        Stats += "Turnos completados: " + Session.GetRoleplay().Shifts + "\n";
                        Stats += "Grupo: " + GangName + "\n";
                        Stats += "Grupo Rango: " + GangRank + "\n";
                        Stats += "Grupo terrenos bonus: Desactivado!\n";
                        Stats += "Ultimo usuario asesinado: " + Session.GetRoleplay().LastKilled + "\n";
                        string WeedBonus = (Session.GetRoleplay().UsingWeed_Bonus > 0) ? " (Marihuana bonus: +" + Session.GetRoleplay().UsingWeed_Bonus + ")" : "";
                        Stats += "Resistencia: " + Session.GetRoleplay().Stamina + "\n";
                        Stats += "Masa muscular: " + Session.GetRoleplay().Constitution + "\n";
                        Stats += "Conocimiento: " + Session.GetRoleplay().Intelligence + "\n";
                        Stats += "Fuerza: " + Session.GetRoleplay().Strength + WeedBonus + "\n";
                        Stats += "Dinero en mano: " + Session.GetHabbo().Credits + "\n";
                        Stats += "Dinero en banco: " + Session.GetRoleplay().Bank + "\n";
                        Stats += "Nivel de astronauta: " + Session.GetRoleplay().SpaceLevel + "\n";
                        Stats += "Experiencia de astronauta: " + Session.GetRoleplay().SpaceXP + "\n";
                        Stats += "Nivel de narcotraficante: " + Session.GetRoleplay().FarmingLevel + "\n";
                        Stats += "Experiencia de narcotraficante: " + Session.GetRoleplay().FarmingXP + "\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nProductos en mano \n============================================\n";
                        Stats += "Marihuana: " + Session.GetRoleplay().Weed + " gramos\n";
                        Stats += "Cocaina: " + Session.GetRoleplay().Carrots + " gramos\n";
                        Stats += "Armas: ";
                        if (Session.GetRoleplay().Weapons.Count > 0)
                        {
                            foreach (KeyValuePair<string, Weapon> Weapon in Session.GetRoleplay().Weapons)
                            {
                                Stats += WeaponManager.GetWeaponName(Weapon.Key) + ", ";
                            }
                        }
                        else
                        {
                            Stats += "none";
                        };
                        Stats += "\n";
                        Stats += "Balas: " + Session.GetRoleplay().Bullets + "\n";
                        Stats += "Bombas: " + Session.GetRoleplay().Bombs + "\n";
                        Stats += "Chalecos: " + Session.GetRoleplay().Vests + "\n";
                        Stats += "Combustible de avion: " + Session.GetRoleplay().Fuel + "\n";
                        if (Session.GetRoleplay().Plane == 0) { Stats += "Avion: No tienes avion\n"; }
                        if (Session.GetRoleplay().Plane == 175) { Stats += "Avion: Rojo\n"; }
                        if (Session.GetRoleplay().Plane == 176) { Stats += "Avion: Az√∫l\n"; }
                        if (Session.GetRoleplay().Plane == 518) { Stats += "Avion: P√∫rpura\n"; }
                        if (Session.GetRoleplay().Plane == 519) { Stats += "Avion: Verde\n"; }
                        if (Session.GetRoleplay().Plane == 520) { Stats += "Avion: Dorado\n"; }
                        if (Session.GetRoleplay().Plane == 521) { Stats += "Avion: Staff\n"; }
                        if (Session.GetRoleplay().Car == 0) { Stats += "Auto: No\n"; }
                        if (Session.GetRoleplay().Car == 21) { Stats += "Auto: Skyblue\n"; }
                        if (Session.GetRoleplay().Car == 22) { Stats += "Auto: Fireball\n"; }
                        if (Session.GetRoleplay().Car == 48) { Stats += "Auto: Doggi\n"; }
                        if (Session.GetRoleplay().Car == 54) { Stats += "Auto: Bunni\n"; }
                        if (Session.GetRoleplay().Car == 69) { Stats += "Auto: Beetle\n"; }
                        Stats += "============================================\n";

                        Session.SendNotifWithScroll(Stats);

                        return true;
                    }
                #endregion
                #region :rpstats
                case "ciudadano":
                    {

                        string Target = "";
                        if (!Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :ciudadano <usuario>");
                            return true;
                        }
                        else
                        {
                            Target = Convert.ToString(Params[1]);
                        }

                        GameClient TargetSession = RoleplayManager.GenerateSession(Target);


                        string Stats = "";
                        string isDead = (TargetSession.GetRoleplay().Dead) ? "Si" : "No";
                        string isJailed = (TargetSession.GetRoleplay().Jailed) ? "Si" : "No";
                        string GangName = (TargetSession.GetRoleplay().GangId > 0 && GangManager.validGang(TargetSession.GetRoleplay().GangId, TargetSession.GetRoleplay().GangRank)) ? GangManager.GangData[TargetSession.GetRoleplay().GangId].Name : "None";
                        string GangRank = (TargetSession.GetRoleplay().GangId > 0 && GangManager.validGang(TargetSession.GetRoleplay().GangId, TargetSession.GetRoleplay().GangRank)) ? GangManager.GangRankData[TargetSession.GetRoleplay().GangId, TargetSession.GetRoleplay().GangRank].Name : "None";

                        Stats += "Estadisticas de: " + TargetSession.GetHabbo().UserName + "\n";
                        Stats += "============================================\nEstadisticas Generales \n============================================\n";
                        Stats += "Vida: " + TargetSession.GetRoleplay().CurHealth + "/" + TargetSession.GetRoleplay().MaxHealth + "\n";
                        if (TargetSession.GetRoleplay().Armor >= 1)
                        {
                            Stats += "Armadura: " + TargetSession.GetRoleplay().Armor + "\n";
                        }
                        if (TargetSession.GetRoleplay().Armor <= 0)
                        {
                            Stats += "Armadura: 0\n";
                        }
                        Stats += "Energia: " + TargetSession.GetRoleplay().Energy + "/100\n";
                        Stats += "Hambre: " + TargetSession.GetRoleplay().Hunger + "/100\n";
                        Stats += "Higiene: " + TargetSession.GetRoleplay().Hygiene + "/100\n";
                        Stats += "Alcohol: 0/100\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nEstadisticas \n============================================\n";
                        Stats += "Veces muerto: " + TargetSession.GetRoleplay().Deaths + "\n";
                        Stats += "Asesinatos: " + TargetSession.GetRoleplay().Kills + "\n";
                        Stats += "Asesinatos por Golpes: " + TargetSession.GetRoleplay().PunchKills + "\n";
                        Stats += "Asesinatos por Pelea: " + TargetSession.GetRoleplay().MeleeKills + "\n";
                        Stats += "Asesinatos por Arma: " + TargetSession.GetRoleplay().GunKills + "\n";
                        Stats += "Asesinatos por Bomba: " + TargetSession.GetRoleplay().BombKills + "\n";
                        Stats += "Total de Golpes: " + TargetSession.GetRoleplay().Punches + "\n";
                        Stats += "Veces Arrestado: " + TargetSession.GetRoleplay().Arrested + "\n";
                        Stats += "Usuarios Arrestados: " + TargetSession.GetRoleplay().Arrests + "\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nEstadisticas Extas \n============================================\n";
                        Stats += "Astronauta Nivel: " + TargetSession.GetRoleplay().SpaceLevel + "\n";
                        Stats += "Astronauta EXP: " + TargetSession.GetRoleplay().SpaceXP + "\n";
                        Stats += "Narcotraficante Nivel: " + Session.GetRoleplay().FarmingLevel + "\n";
                        Stats += "Narcotraficante EXP: " + Session.GetRoleplay().FarmingXP + "\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nEstadisticas Informativas \n============================================\n";
                        Stats += "Actualmente Muerto: " + isDead + "\n";
                        Stats += "Actualmente en Prision: " + isJailed + "\n";
                        if (TargetSession.GetRoleplay().Married_To != 0)
                        {
                            Stats += "Casado con: " + RoleplayManager.ReturnOfflineInfo((uint)TargetSession.GetRoleplay().Married_To, "username") + "\n";
                        }
                        if (TargetSession.GetRoleplay().Married_To == 0)
                        {
                            Stats += "Casado con: Estas solo!\n";
                        } Stats += "============================================\n";

                        Stats += "\n============================================\nEstadisticas de Eventos \n============================================\n";
                        Stats += "Puntos por Pelea: " + TargetSession.GetRoleplay().Brawl_Pts + "\n";
                        Stats += "Puntos por Infeccion: " + TargetSession.GetRoleplay().Infection_Pts + "\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nEstadisticas de Tiempo \n============================================\n";
                        Stats += "Tiempo en Prision: " + TargetSession.GetRoleplay().JailTimer + " minutos\n";
                        Stats += "Tiempo Muerto: " + TargetSession.GetRoleplay().DeadTimer + " minutos\n";
                        Stats += "Tiempo Corriendo: " + TargetSession.GetRoleplay().WorkoutTimer_Done + "/" + TargetSession.GetRoleplay().WorkoutTimer_ToDo + "\n";
                        Stats += "Tiempo Levantando Pesas: " + TargetSession.GetRoleplay().WeightLiftTimer_Done + "/" + TargetSession.GetRoleplay().WeightLiftTimer_ToDo + "\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nOtras Estadisticas \n============================================\n";
                        Stats += "Empleo ID: " + TargetSession.GetRoleplay().JobId + "\n";
                        Stats += "Rango de Empleo: " + TargetSession.GetRoleplay().JobRank + "\n";
                        Stats += "Grupo Criminal: " + GangName + "\n";
                        Stats += "Rango de Grupo Criminal: " + GangRank + "\n";
                        Stats += "Bonus por Terreno de Grupo Criminal: Desactivado!\n";
                        Stats += "Ultimo Usuario Asesinado: " + TargetSession.GetRoleplay().LastKilled + "\n";
                        string WeedBonus = (TargetSession.GetRoleplay().UsingWeed_Bonus > 0) ? " (Bonus de Marihuana: +" + TargetSession.GetRoleplay().UsingWeed_Bonus + ")" : "";
                        Stats += "Resistencia: " + TargetSession.GetRoleplay().Stamina + "\n";
                        Stats += "Masa muscular: " + TargetSession.GetRoleplay().Constitution + "\n";
                        Stats += "Conocimiento: " + TargetSession.GetRoleplay().Intelligence + "\n";
                        Stats += "Fuerza: " + TargetSession.GetRoleplay().Strength + WeedBonus + "\n";
                        Stats += "Dinero en Mano: " + TargetSession.GetHabbo().Credits + "\n";
                        Stats += "Dinero en Banco: " + TargetSession.GetRoleplay().Bank + "\n";
                        Stats += "============================================\n";

                        Stats += "\n============================================\nItems \n============================================\n";
                        Stats += "Marihuana: " + TargetSession.GetRoleplay().Weed + " gramos\n";
                        Stats += "Cocaina: " + TargetSession.GetRoleplay().Carrots + " gramos\n";
                        Stats += "Armas: ";
                        if (TargetSession.GetRoleplay().Weapons.Count > 0)
                        {
                            foreach (KeyValuePair<string, Weapon> Weapon in TargetSession.GetRoleplay().Weapons)
                            {
                                Stats += WeaponManager.GetWeaponName(Weapon.Key) + ", ";
                            }
                        }
                        else
                        {
                            Stats += "none";
                        };
                        Stats += "\n";
                        Stats += "Balas: " + TargetSession.GetRoleplay().Bullets + "\n";
                        Stats += "Bombas: " + TargetSession.GetRoleplay().Bombs + "\n";
                        Stats += "Chalecos Antibalas: " + TargetSession.GetRoleplay().Vests + "\n";
                        if (TargetSession.GetRoleplay().Plane == 0) { Stats += "Avion: No\n"; }
                        if (TargetSession.GetRoleplay().Plane == 175) { Stats += "Avion: Rojo\n"; }
                        if (TargetSession.GetRoleplay().Plane == 176) { Stats += "Avion: Az√∫l\n"; }
                        if (TargetSession.GetRoleplay().Plane == 518) { Stats += "Avion: Purpura\n"; }
                        if (TargetSession.GetRoleplay().Plane == 519) { Stats += "Avion: Verde\n"; }
                        if (TargetSession.GetRoleplay().Plane == 520) { Stats += "Avion: Dorado\n"; }
                        if (TargetSession.GetRoleplay().Plane == 521) { Stats += "Avion: Staff\n"; }
                        if (TargetSession.GetRoleplay().Car == 0) { Stats += "Auto: No\n"; }
                        if (TargetSession.GetRoleplay().Car == 21) { Stats += "Auto: Skyblue\n"; }
                        if (TargetSession.GetRoleplay().Car == 22) { Stats += "Auto: Fireball\n"; }
                        if (TargetSession.GetRoleplay().Car == 48) { Stats += "Auto: Doggi\n"; }
                        if (TargetSession.GetRoleplay().Car == 54) { Stats += "Auto: Bunni\n"; }
                        if (TargetSession.GetRoleplay().Car == 69) { Stats += "Auto: Beetle\n"; }
                        Stats += "============================================\n";

                        Session.SendNotifWithScroll(Stats);

                        return true;
                    }
                #endregion
                #region :911
                case "911":
                    {

                        #region Conditions
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("call_police"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("call_police", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["call_police"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["call_police"] + "/5]");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("TURF"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (RoleplayManager.PurgeTime)
                        {
                            Session.SendWhisper("No puedes hacer esto durante una purga.");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }

                        if (Session.GetRoleplay().IsNoob)
                        {
                            Session.SendWhisper("No puedes hacer esto por que eres nuevo!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        Session.GetRoleplay().CallPolice();
                        Session.GetRoleplay().MultiCoolDown["call_police"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :ayuda
                case "ayuda":
                    {

                        #region Conditions
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("call_gov"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("call_gov", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["call_gov"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["call_gov"] + "/5]");
                            return true;
                        }

                        #endregion

                        #region Execute

                        Session.GetRoleplay().CallGov();
                        Session.GetRoleplay().MultiCoolDown["call_gov"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :surrender
                case "entregarse":
                    {

                        #region Conditions
                        if (Session.GetRoleplay().Wanted <= 0)
                        {
                            Session.SendWhisper("No estas siendo buscado!");
                            return true;
                        }

                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }

                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }

                        int Time = Session.GetRoleplay().Wanted;
                        #endregion

                        #region Execute
                        Session.Shout("*Se rindio y ya se esta entregando a las autoridades*");
                        Session.GetRoleplay().Wanted = 0;
                        Session.GetRoleplay().SaveQuickStat("wanted", "0");

                        string wantedJunk = Session.GetHabbo().UserName.ToLower();
                        RoleplayManager.WantedListData.TryRemove(Session.GetHabbo().UserName.ToLower(), out wantedJunk);

                        RoomUser User = Session.GetHabbo().GetRoomUser();
                        User.ApplyEffect(0);
                        Session.GetRoleplay().Equiped = null;
                        User.Frozen = false;

                        Session.GetRoleplay().Cuffed = true;
                        Session.SendNotif("Haz sido arrestado por " + Time + " minuto(s)");
                        Session.GetRoleplay().JailFigSet = false;
                        Session.GetRoleplay().JailedSeconds = 60;
                        Session.GetRoleplay().JailTimer = Time;
                        Session.GetRoleplay().Jailed = true;
                        Session.GetRoleplay().Arrested++;
                        Session.GetRoleplay().UpdateStats++;

                        #endregion
                    }
                    return true;

                #endregion
                #region :changelog
                case "changelog":
                    {
                        string Changelog = "";
                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("SELECT * FROM changelog");
                            DataTable Table = dbClient.GetTable();
                            foreach (DataRow Row in Table.Rows)
                            {
                                Changelog += " - " + Row["details"] + "\n";
                            }
                        }

                        Session.SendNotifWithScroll(Changelog);

                        return true;
                    }
                #endregion
                #region :laws
                /*case "laws":
                case "lawinfo":
                    {

                        string laws = "";
                        DataRow Laws = null;

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("SELECT * FROM rp_lawinfo");
                            Laws = dbClient.GetRow();
                            laws = Laws["laws"].ToString();
                        }


                        Session.SendNotifWithScroll(laws);

                        return true;
                    }*/
                #endregion
                #region :corpinfo <corp>
                case "empresa":
                    {

                        #region Params/Vars
                        string corpinfo = "";
                        Job Job = null;
                        object Corp = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :empresa <nombre>");
                            return true;
                        }
                        else
                        {
                            bool isint = false;
                            int outt;
                           

                            if (Int32.TryParse(Params[1].ToString(), out outt))
                            {
                                Corp = Convert.ToInt32(Params[1]);
                                isint = true;
                            }
                            else
                            {
                                Corp = Convert.ToString(Params[1]);
                                isint = false;
                            }


                            foreach (Job Jobb in JobManager.JobData.Values)
                            {
                                if (!isint)
                                {
                                    if (Jobb.Name.ToLower() != Convert.ToString(Corp).ToLower())
                                        continue;
                                }
                                else
                                {
                                    if (Jobb.Id != Convert.ToInt32(Corp))
                                        continue;
                                }

                                Job = Jobb;
                            }

                            if (Job == null)
                            {
                                Session.SendWhisper("La empresa solicitada no existe!");
                                return true;
                            }
                        }
                        #endregion

                        #region Execute

                        corpinfo += "---- Informacion de '" + Job.Name + "' ----\n";
                        corpinfo += "Empresa Numero: " + Job.Id + "\n";
                        corpinfo += "Nombre de la Empresa: " + Job.Name + "\n";
                        corpinfo += "Salas de la Empresa: " + Job.Headquarters + "\n";
                        corpinfo += "Fundador de la Empresa: " + RoleplayManager.ReturnOfflineInfo((uint)Job.OwnerId, "username").ToString() + "\n";
                        corpinfo += "Fondos de la Empresa: " + Job.Balance + "\n";

                        corpinfo += "\n---- Puestos de '" + Job.Name + "' ----\n";
                        foreach (Rank Rank in JobManager.JobRankData.Values)
                        {
                            if (Rank.JobId != Job.Id)
                                continue;
                            int countmem = 0;
                            corpinfo += "Numero del Puest: " + Rank.RankId + "\n";
                            corpinfo += "Nombre del Puesto: " + Rank.Name + "\n";
                            corpinfo += "Salas del Empleo: " + Rank.WorkRooms + "\n";
                            corpinfo += "Salario del Puesto: " + Rank.Pay + "\n";
                            corpinfo += "-- Permisos del Puesto --\n";
                            corpinfo += " - Contratar:" + Rank.canHire().ToString() + "\n";
                            corpinfo += " - Despedir:" + Rank.canFire().ToString() + "\n";
                            corpinfo += " - Subir:" + Rank.canPromote().ToString() + "\n";
                            corpinfo += " - Bajar:" + Rank.canDemote().ToString() + "\n";

                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                dbClient.SetQuery("SELECT COUNT(*) FROM rp_stats WHERE job_id = " + Rank.JobId + " AND job_rank = " + Rank.RankId + "");
                                countmem = dbClient.GetInteger();
                            }

                            corpinfo += "Ciudadanos en el Puesto: " + countmem + "\n\n";
                        }


                        Session.SendNotifWithScroll(corpinfo);

                        #endregion

                        return true;
                    }
                #endregion
                #region :taxi <roomid>
                case "taxi":
                case "auto":
                    {

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :taxi <id>", false, 34);
                            return true;
                        }
                        if (!Plus.IsNum(Params[1]))
                        {
                            Session.SendWhisperBubble("Solo numeros!", 34);
                            return true;
                        }
                        if (Convert.ToUInt32(Params[1]) == Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisperBubble("Ya te encuentras en esta sala!", 34);
                            return true;
                        }
                        RoomUser User = Session.GetHabbo().GetRoomUser();
                        if (Session.GetRoleplay().inZombieInfection)
                        {
                            Session.SendWhisper("Estas participando en la infeccion zombie, no puedes irte!", false, 34);
                            return true;
                        }
                        if (User.Frozen)
                        {
                            Session.SendWhisper("Estas aturdido, no puedes escapar!", false, 34);
                            return true;
                        }
                        if (Session.GetRoleplay().RequestedTaxi)
                        {
                            Session.SendWhisper("Ya has solicitado un taxi, por favor espera a que llegue, si deseas cancelar el taxi usa el comando :stoptaxi", false, 34);
                            return true;
                        }
                        if (Session.GetRoleplay().CoolDown > 0)
                        {
                            Session.SendWhisper("Estas Relajate!! [" + Session.GetRoleplay().CoolDown + "/5]", false, 34);
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("Desgraciadamente estas muerto, no puedes irte!", false, 34);
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("¬øQuieres salir de aqui? No podras criminal!", false, 34);
                            return true;
                        }
                        #endregion

                        #region Execute

                        uint RoomId = Convert.ToUInt32(Params[1]);
                        string RoomName = "null";
                        string TaxiMsg = "Procesando solicitud.";
                        string TaxiMsg2 = "*Llamo a un taxi en direccion a ningun lado*";
                        Room Room = null;

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :taxi <id>");
                            return true;
                        }

                        Room = RoleplayManager.GenerateRoom(RoomId);


                        if (RoomId <= 0)
                        {
                            Session.SendWhisper("ID No valida: " + RoomId, false, 34);
                            return true;
                        }
                        if (Room == null)
                        {
                            Session.SendWhisper("Hay un problema con la sala a la que  deseas acceder!", false, 34);
                            return true;
                        }
                        if (Room.RoomData == null)
                        {
                            Session.SendWhisper("Hay un problema con la sala a la que  deseas acceder!", false, 34);
                            return true;
                        }
                        if (Room.RoomData.Description.Contains("NOTAXITO"))
                        {
                            Session.SendWhisper("No se puede llegar en transporte a esta sala, ¬°Camina!", false, 34);
                            return true;
                        }

                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOTAXIFROM"))
                        {
                            Session.SendWhisper("Lo sentimos, el taxi no puede ir a esta sala!", false, 34);
                            return true;
                        }

                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("TUTORIAL"))
                        {
                            Session.SendWhisper("Debes completar el tutorial para poder salir de la sala!", false, 1);
                            return true;
                        }

                        RoomName = Room.RoomData.Name;

                        if (!RoleplayManager.BypassRights(Session) || Session.GetHabbo().Rank == 12)
                        {
                            if (Session.GetRoleplay().Working && Session.GetRoleplay().JobHasRights("police"))
                            {
                                Session.GetHabbo().GetRoomUser().ApplyEffect(19);
                                TaxiMsg2 = "*Se subio al automovil de la Policia con direccion a " + RoomName + " [" + RoomId + "]*";
                                Session.GetRoleplay().RequestedTaxi_WaitTime = 3;
                            }
                            else if (Session.GetRoleplay().Working && Session.GetRoleplay().JobHasRights("swat"))
                            {
                                Session.GetHabbo().GetRoomUser().ApplyEffect(19);
                                TaxiMsg2 = "*Se subio a la camioneta blindada del equipo S.W.A.T con direccion a " + RoomName + " [" + RoomId + "]*";
                                Session.GetRoleplay().RequestedTaxi_WaitTime = 3;
                            }
                            else if (Session.GetRoleplay().Working && Session.GetRoleplay().JobHasRights("spriv"))
                            {
                                TaxiMsg2 = "*Se subio a la camioneta de la Seguridad Privada con direccion a " + RoomName + " [" + RoomId + "]*";
                                Session.GetRoleplay().RequestedTaxi_WaitTime = 3;
                            }
                            else if (Session.GetRoleplay().Working && Session.GetRoleplay().JobHasRights("ssec"))
                            {
                                TaxiMsg2 = "*Se subio al automovil del Servicio Secreto con direccion a " + RoomName + " [" + RoomId + "]*";
                                Session.GetRoleplay().RequestedTaxi_WaitTime = 3;
                            }
                            else if (Session.GetRoleplay().Working && Session.GetRoleplay().JobHasRights("farmas"))
                            {
                                TaxiMsg2 = "*Se subio al camion de las Fuerzas Armadas con direccion a " + RoomName + " [" + RoomId + "]*";
                                Session.GetRoleplay().RequestedTaxi_WaitTime = 3;
                            }
                            else if (Session.GetRoleplay().Working && Session.GetRoleplay().JobHasRights("gov"))
                            {
                                TaxiMsg2 = "*Se subio a una limusina negra con direccion a " + RoomName + " [" + RoomId + "]*";
                                Session.GetRoleplay().RequestedTaxi_WaitTime = 3;
                            }
                            else if (Session.GetHabbo().HasFuse("fuse_events") && Session.GetHabbo().Rank != 12)
                            {
                                TaxiMsg2 = "*Se subio a su Jet Privado con direccion a " + RoomName + " [" + RoomId + "]*";
                                Session.GetRoleplay().RequestedTaxi_WaitTime = 0;
                            }
                            else if (Session.GetHabbo().HasFuse("fuse_events") && Session.GetHabbo().Rank != 12)
                            {
                                TaxiMsg2 = "*Se subio a su Jet Privado con direccion a " + RoomName + " [" + RoomId + "]*";
                                Session.GetRoleplay().RequestedTaxi_WaitTime = 0;
                            }
                            else if (Session.GetRoleplay().Car == 3 && Session.GetHabbo().Rank < 4)
                            {
                                TaxiMsg2 = "*Se subio a su Twizy Azul con direcci√≥n a " + RoomName + " [" + RoomId + "]*";
                                if (Session.GetHabbo().Rank == 2)
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 2;
                                }
                                else
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 5;
                                }
                            }
                            else if (Session.GetRoleplay().Car == 48 && Session.GetHabbo().Rank < 4)
                            {
                                TaxiMsg2 = "*Se subio a su Automovil (Perro) con direcci√≥n a " + RoomName + " [" + RoomId + "]*";
                                if (Session.GetHabbo().Rank == 2)
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 2;
                                }
                                else
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 5;
                                }
                            }
                            else if (Session.GetRoleplay().Car == 17 && Session.GetHabbo().Rank < 4)
                            {
                                TaxiMsg2 = "*Se subio a su Twizy Rosa con direcci√≥n a " + RoomName + " [" + RoomId + "]*";
                                if (Session.GetHabbo().Rank == 2)
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 2;
                                }
                                else
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 5;
                                }
                            }
                            else if (Session.GetRoleplay().Car == 18 && Session.GetHabbo().Rank < 4)
                            {
                                TaxiMsg2 = "*Se subio a su Twizy Naranja con direcci√≥n a " + RoomName + " [" + RoomId + "]*";
                                if (Session.GetHabbo().Rank == 2)
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 2;
                                }
                                else
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 5;
                                }
                            }
                            else if (Session.GetRoleplay().Car == 21 && Session.GetHabbo().Rank < 4)
                            {
                                TaxiMsg2 = "*Se subio a su El Dorado con direcci√≥n a " + RoomName + " [" + RoomId + "]*";
                                if (Session.GetHabbo().Rank == 2)
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 2;
                                }
                                else
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 5;
                                }
                            }
                            else if (Session.GetRoleplay().Car == 22 && Session.GetHabbo().Rank < 4)
                            {
                                TaxiMsg2 = "*Se subio a su Fireball con direcci√≥n a " + RoomName + " [" + RoomId + "]*";
                                if (Session.GetHabbo().Rank == 2)
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 2;
                                }
                                else
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 5;
                                }
                            }
                            else if (Session.GetRoleplay().Car == 54 && Session.GetHabbo().Rank < 4)
                            {
                                TaxiMsg2 = "*Se subio a su automovil (Conejo) con direcci√≥n a " + RoomName + " [" + RoomId + "]*";
                                if (Session.GetHabbo().Rank == 2)
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 2;
                                }
                                else
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 5;
                                }
                            }
                            else if (Session.GetRoleplay().Car == 69 && Session.GetHabbo().Rank < 4)
                            {
                                TaxiMsg2 = "*Se subio a su Beetle con direcci√≥n a " + RoomName + " [" + RoomId + "]*";
                                if (Session.GetHabbo().Rank == 2)
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 2;
                                }
                                else
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 5;
                                }
                            }
                            else if (Session.GetRoleplay().Car == 510 && Session.GetHabbo().Rank < 4)
                            {
                                TaxiMsg2 = "*Se subio a su Hubber con direcci√≥n a " + RoomName + " [" + RoomId + "]*";
                                if (Session.GetHabbo().Rank == 2)
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 2;
                                }
                                else
                                {
                                    Session.GetRoleplay().RequestedTaxi_WaitTime = 5;
                                }
                            }
                            else
                            {
                                TaxiMsg = "Ah solicitado un taxi con direccion " + RoomName + " [" + RoomId + "]";
                                TaxiMsg2 = "*Llamando al sitio de taxis " + RoomName + " [" + RoomId + "]*";
                                Session.GetRoleplay().RequestedTaxi_WaitTime = 8;
                            }
                        }
                        else
                        {
                            TaxiMsg2 = "*Llamando a un Super Taxi " + RoomName + " [" + RoomId + "]*";
                            Session.GetRoleplay().RequestedTaxi_WaitTime = 0;
                        }
                        if (!TaxiMsg.ToLower().Contains("null"))
                        {
                            Session.SendWhisper(TaxiMsg);
                        }
                        if (TaxiMsg2.Length > 2)
                        {
                            RoleplayManager.Shout(Session, TaxiMsg2, 5);
                        }

                        Session.GetHabbo().GetRoomUser().ApplyEffect(596);
                        Session.GetRoleplay().EffectSeconds = 5;
                        Session.GetRoleplay().RequestedTaxi_Arrived = false;
                        Session.GetRoleplay().RecentlyCalledTaxi = true;
                        Session.GetRoleplay().RecentlyCalledTaxi_Timeout = 10;
                        Session.GetRoleplay().RequestedTaxiDestination = Room;
                        Session.GetRoleplay().RequestedTaxi = true;
                        Session.GetRoleplay().taxiTimer = new taxiTimer(Session);


                        #endregion

                        return true;
                    }
                #endregion
                #region :stoptaxi
                case "parartaxi":
                    {
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No puedes usar este comando por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Session.GetRoleplay().RequestedTaxi)
                        {
                            Session.SendWhisper("Primero debes solicitar un taxi!");
                            return true;
                        }
                        else
                        {
                            Session.GetRoleplay().RequestedTaxi = false;
                            Session.GetRoleplay().RequestedTaxi_Arrived = false;
                            Session.GetRoleplay().RequestedTaxiDestination = null;
                            Session.GetRoleplay().RecentlyCalledTaxi = false;
                            Session.Shout("*Uso su telefono para cancelar el taxi*");

                            if (Session.GetRoleplay().taxiTimer != null)
                            {
                                Session.GetRoleplay().taxiTimer.stopTimer();
                            }

                        }

                        return true;
                    }
                #endregion

                #endregion

                #region General Non Roleplay

                #region :hotrooms
                case "salasactivas":
                    {
                        string Rooms = "";

                        foreach (Room Room in Plus.GetGame().GetRoomManager().LoadedRooms.Values.ToList().OrderByDescending(key => key.UserCount))
                        {
                            if (Room.UserCount <= 0)
                                continue;

                            Rooms += "Sala ID: " + Room.RoomId + "\n";
                            Rooms += "Nombre de la Sala: " + Room.RoomData.Name + "\n";
                            Rooms += "Usuarios activos: " + Room.UserCount + "\n\n";
                        }

                        Session.SendNotifWithScroll(Rooms);

                        return true;
                    }
                #endregion

                #region :gamemap
                case "mapa":
                    {
                        #region Conditions

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("gamemap_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("gamemap_cooldown", 0);
                        }

                        if (Session.GetRoleplay().MultiCoolDown["gamemap_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["gamemap_cooldown"] + "/10]");
                            return true;
                        }

                        #endregion

                        #region Execute
                        DataTable Ruumz = null;
                        string Rooms = "";

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("SELECT `id`,`caption`,`users_now`,`description` FROM `rooms_data` ORDER BY `id` ASC");
                            Ruumz = dbClient.GetTable();
                            foreach (DataRow Room in Ruumz.Rows)
                            {
                                string TaxiRoom = (Room["description"].ToString().Contains("NOTAXITO")) ? "No" : "Si";
                                Rooms += "Sala ID: " + Room["id"] + "\n";
                                Rooms += "Nombre de la sala: " + Room["caption"] + "\n";
                                Rooms += "Accedible con taxi: " + TaxiRoom + "\n\n";
                            }
                        }

                        Session.SendNotifWithScroll(Rooms);
                        Session.GetRoleplay().MultiCoolDown["gamemap_cooldown"] = 10;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion

                #region :whosonline
                case "conectados":
                    {


                        string Online = "Usuarios conectados: \n";
                        int onli = 0;

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (client == null || client.GetHabbo() == null) { continue; }
                                Online += "" + client.GetHabbo().UserName + "\n";
                                onli++;
                            }
                        }

                        Session.SendNotifWithScroll("[" + onli + "] " + Online);

                        return true;
                    }
                #endregion

                #endregion

                #region Apartments

                #region :comprarcasa
                case "comprarcasa":
                    {
                        #region Condici√≥n
                        if (!ApartmentManager.isApartment(Session.GetHabbo().GetRoomUser().RoomId))
                        {
                            Session.SendWhisper("La sala en la que te encuentras actualmente NO es una casa!");
                            return true;
                        }
                        if (!ApartmentManager.Apartments[Session.GetHabbo().GetRoomUser().RoomId].ForSale)
                        {
                            Session.SendWhisper("Esta casa NO esta a la venta actualmente!");
                            return true;
                        }
                        if (!Session.GetHabbo().HasFuse("fuse_vip") && ApartmentManager.Apartments[Session.GetHabbo().GetRoomUser().RoomId].VIP)
                        {
                            Session.SendWhisper("Esta casa solo es para miembros VIP!");
                            return true;
                        }
                        #endregion

                        #region Ejecutamos
                        if (Params.Length == 1)
                        {
                            Session.SendNotif("Este es un <b>Contrato</b> en el cual aceptas comprar la casa [ID:" + Session.GetHabbo().CurrentRoomId + "]. \n\n" +
                                              "Esta casa cuesta actualmente unos $5000 D√≥lares\n\n" +
                                              "Si quieres aceptar el contrato solo escribe ':comprarcasa confirmar'");
                        }
                        else
                        {
                            if (Params.Length == 2)
                            {
                                if (Params[1].ToString() == "confirmar")
                                {
                                    Session.SendNotif("¬°Felicidades! Haz comprado esta casa con √©xito!");
                                    return true;
                                }
                            }
                        }
                        return true;
                        #endregion
                    }
                #endregion

                #endregion

                #region Selling / Barter

                #region :give x
                case "dar":
                    {

                        #region Generate Instances / Sessions
                        string Target = null;
                        int Amount = 0;
                        GameClient TargetSession = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :dar <usuario> <cantidad>", 34);
                            return true;
                        }
                        else
                        {

                            if (!Plus.IsNum(Params[2]))
                            {
                                Session.SendWhisperBubble("Te falto la cantidad!", 34);
                                return true;
                            }

                            Target = Convert.ToString(Params[1]);
                            Amount = Convert.ToInt32(Params[2]);
                        }


                        TargetSession = RoleplayManager.GenerateSession(Target);


                        if (!RoleplayManager.CanInteract(Session, TargetSession, true))
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 34);
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            Session.SendWhisperBubble("Los constructores no pueden dar monedas!", 34);
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_events") && !Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("EVENTS"))
                            {
                                Session.SendWhisper("En los eventos solo se daran monedas como premio!");
                                return true;
                            }
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("give_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("give_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["give_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["give_cooldown"] + "/5]");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Uso de comando invalido: :dar <usuario> <cantidad>");
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala");
                            return true;
                        }
                        if (Amount <= 0)
                        {
                            Session.SendWhisper("Cantidad invalida.");
                            return true;
                        }
                        if (Session.GetHabbo().Credits < Amount)
                        {
                            Session.SendWhisper("No tienes $" + Amount + "!");
                            return true;
                        }
                        if (TargetSession == Session)
                        {
                            Session.SendWhisper("No puedes enviarte dinero a ti mismo..");
                            return true;
                        }
                        if (Session.GetRoleplay().JobId <= 1)
                        {
                            Session.SendWhisper("Debes tener un empleo para poder enviar dinero!");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().IsNoob)
                        {
                            Session.SendWhisper("No puedes enviar dinero a un usuario nuevo!");
                            return true;
                        }

                        /*using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("SELECT ip_last FROM users WHERE id=" + TargetSession.GetHabbo().Id + " LIMIT 1");
                            string TIP = dbClient.GetString();

                            dbClient.SetQuery("SELECT ip_last FROM users WHERE id=" + Session.GetHabbo().Id + " LIMIT 1");
                            string MIP = dbClient.GetString();

                            if (TIP == MIP)
                            {
                                Session.SendWhisper("Nuestro sistema detecto un uso indevido, se ha guardado esto en nuestros logs por lo que usted podia ser baneado!");
                                return true;
                            }
                        }*/

                        #endregion

                        #region Execute

                        RoleplayManager.GiveMoney(TargetSession, +Amount);
                        RoleplayManager.GiveMoney(Session, -Amount);
                        RoleplayManager.Shout(Session, "*Le dio $" + Amount + " a " + TargetSession.GetHabbo().UserName + "*", 6);
                        Session.GetRoleplay().MultiCoolDown["give_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion

                #region :offer x <item>
                case "ofrecer":
                    {
                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :ofrecer <usuario> <item>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        string Offer = Convert.ToString(Params[2]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("offer_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("offer_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["offer_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["offer_cooldown"] + "/5]");
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :ofrecer <usuario> <item>");
                            return true;
                        }
                        #endregion

                        #region Execute

                        if (WeaponManager.isWeapon(Offer.ToLower()))
                        {

                            if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                            {
                                Session.SendWhisper("Su empleo no permite esto!", false, 34);
                                return true;
                            }

                            if (!Session.GetRoleplay().JobHasRights("ammunation"))
                            {
                                Session.SendWhisper("Su empleo no permite esto!", false, 34);
                                return true;
                            }
                            if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("AMMUNATION"))
                            {
                                Session.SendWhisper("No te encuentras en tu sala de trabajo!");
                                return true;
                            }
                            if (WeaponManager.WeaponsData[Offer].Price > TargetSession.GetHabbo().Credits)
                            {
                                Session.SendWhisperBubble("Este usuario no permite esta arma!", 1);
                                return true;
                            }

                            Session.Shout("*Oferto a " + TargetSession.GetHabbo().UserName + " 1 " + Offer.ToLower() + " por $" + WeaponManager.WeaponsData[Offer.ToLower()].Price + "*", 4, true);


                            TargetSession.SendWhisper("Recibiste una oferta de " + Offer.ToLower() + " por $" + WeaponManager.WeaponsData[Offer.ToLower()].Price + ". Escribe #aceptar para aceptar #rechazar para rechazar!", false, 1, true);

                            TargetSession.GetRoleplay().WeaponOfferedSell = Offer.ToLower();
                            TargetSession.GetRoleplay().WeaponOffered = true;
                            TargetSession.GetRoleplay().OfferData.Add(Offer.ToLower(), new Offer(Session, Offer.ToLower(), 1, WeaponManager.WeaponsData[Offer.ToLower()].Price));


                        }
                        else
                        {
                            if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                            {
                                Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                                return true;
                            }


                            switch (Offer)
                            {
                                case "bbj":
                                    {
                                        #region Bubble Juice

                                        if (!Session.GetRoleplay().JobHasRights("bbj") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisperBubble("Tu empleo no permite esto!", 1);
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("BBJ"))
                                        {
                                            Session.SendWhisperBubble("No te encuentras en tu sala de trabajo!", 1);
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["md_limukaappi"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("Este usuario no permite esto!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Oferto a " + TargetSession.GetHabbo().UserName + " una Bubble Juice Cola por $" + Substances.SubstanceData["md_limukaappi"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te hizo una oferta de una Bubble Juice Cola por $" + Substances.SubstanceData["md_limukaappi"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);
                                        TargetSession.GetRoleplay().OfferData.Add("bbj", new Offer(Session, "bbj", 1, Substances.SubstanceData["md_limukaappi"].Item_Price));
                                        #endregion
                                    }
                                    break;

                                case "pildora":
                                    {
                                        #region Pildora

                                        if (!Session.GetRoleplay().JobHasRights("farmacia") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisperBubble("Tu empleo no permite esto!", 1);
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("FARMACIA"))
                                        {
                                            Session.SendWhisperBubble("No te encuentras en tu sala de trabajo!", 1);
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["vida_item_farmacia"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("Este usuario no permite esto!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Oferto a " + TargetSession.GetHabbo().UserName + " una P√≠ldora de Vida por $" + Substances.SubstanceData["vida_item_farmacia"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te hizo una oferta de una P√≠ldora de Vida por $" + Substances.SubstanceData["vida_item_farmacia"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);
                                        TargetSession.GetRoleplay().OfferData.Add("pildora", new Offer(Session, "pildora", 1, Substances.SubstanceData["vida_item_farmacia"].Item_Price));
                                        #endregion
                                    }
                                    break;

                                case "pastilla":
                                    {
                                        #region Pildora

                                        if (!Session.GetRoleplay().JobHasRights("farmacia") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisperBubble("Tu empleo no permite esto!", 1);
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("FARMACIA"))
                                        {
                                            Session.SendWhisperBubble("No te encuentras en tu sala de trabajo!", 1);
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["energia_item_farmacia"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("Este usuario no permite esto!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Oferto a " + TargetSession.GetHabbo().UserName + " una Pastilla de Energ√≠a por $" + Substances.SubstanceData["energia_item_farmacia"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te hizo una oferta de una Pastilla de Energ√≠a por $" + Substances.SubstanceData["energia_item_farmacia"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);
                                        TargetSession.GetRoleplay().OfferData.Add("pastilla", new Offer(Session, "pastilla", 1, Substances.SubstanceData["energia_item_farmacia"].Item_Price));
                                        #endregion
                                    }
                                    break;

                                case "cafe":
                                    {
                                        #region Cafe

                                        if (!Session.GetRoleplay().JobHasRights("cafe") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisperBubble("Tu empleo no permite esto!", 1);
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("CAFE"))
                                        {
                                            Session.SendWhisperBubble("No te encuentras en tu sala de trabajo!", 1);
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["ads_mall_coffeem"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("Este usuario no permite esto!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Oferto a " + TargetSession.GetHabbo().UserName + " un Cafe por $" + Substances.SubstanceData["ads_mall_coffeem"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te hizo una oferta de un Cafe por $" + Substances.SubstanceData["ads_mall_coffeem"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);
                                        TargetSession.GetRoleplay().OfferData.Add("cafe", new Offer(Session, "cafe", 1, Substances.SubstanceData["ads_mall_coffeem"].Item_Price));
                                        #endregion
                                    }
                                    break;

                                case "express":
                                    {
                                        #region Cafe Express

                                        if (!Session.GetRoleplay().JobHasRights("cafe") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisperBubble("Tu empleo no permite esto!", 1);
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("CAFE"))
                                        {
                                            Session.SendWhisperBubble("No te encuentras en tu sala de trabajo!", 1);
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["hc2_coffee"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("Este usuario no permite esto!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Oferto a " + TargetSession.GetHabbo().UserName + " un Caf√© Express por $" + Substances.SubstanceData["hc2_coffee"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te hizo una oferta de un Caf√© Express por $" + Substances.SubstanceData["hc2_coffee"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);
                                        TargetSession.GetRoleplay().OfferData.Add("express", new Offer(Session, "express", 1, Substances.SubstanceData["hc2_coffee"].Item_Price));
                                        #endregion
                                    }
                                    break;

                                case "cerveza":
                                    {
                                        #region Cerveza

                                        if (!Session.GetRoleplay().JobHasRights("cerveza") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisperBubble("Tu empleo no permite esto!", 1);
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("CERVEZA"))
                                        {
                                            Session.SendWhisperBubble("No te encuentras en tu sala de trabajo!", 1);
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["xmas12_barrel"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("Este usuario no permite esto!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Oferto a " + TargetSession.GetHabbo().UserName + " una Cerveza por $" + Substances.SubstanceData["xmas12_barrel"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te hizo una oferta de una Cerveza por $" + Substances.SubstanceData["xmas12_barrel"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);
                                        TargetSession.GetRoleplay().OfferData.Add("cerveza", new Offer(Session, "cerveza", 1, Substances.SubstanceData["xmas12_barrel"].Item_Price));
                                        #endregion
                                    }
                                    break;

                                case "hvainilla":
                                    {
                                        #region Helado Vainilla
                                        if (!Session.GetRoleplay().JobHasRights("icecream") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisper("Tu empleo no permite esto!");
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("ICECREAM"))
                                        {
                                            Session.SendWhisper("No estas en tu sala de trabajo!");
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["rare_icecream*10"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("El usuario no cuenta con la cantidad!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Ofrecio a " + TargetSession.GetHabbo().UserName + " un Helado de Vainilla por $" + Substances.SubstanceData["rare_icecream*10"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te ofrecio un Helado de Vainilla por $" + Substances.SubstanceData["rare_icecream*10"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);

                                        if (TargetSession.GetRoleplay().OfferData.ContainsKey("hvainilla"))
                                        {
                                            TargetSession.GetRoleplay().OfferData.Remove("hvainilla");
                                        }

                                        Offer OfferIcm = new Offer(Session, "hvainilla", 1, Substances.SubstanceData["rare_icecream*10"].Item_Price);

                                        TargetSession.GetRoleplay().OfferData.Add("hvainilla", OfferIcm);


                                        #endregion
                                    }
                                    break;

                                case "hfresa":
                                    {
                                        #region Helado Fresa
                                        if (!Session.GetRoleplay().JobHasRights("icecream") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisper("Tu empleo no permite esto!");
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("ICECREAM"))
                                        {
                                            Session.SendWhisper("No estas en tu sala de trabajo!");
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["rare_icecream*0"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("El usuario no cuenta con la cantidad!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Ofrecio a " + TargetSession.GetHabbo().UserName + " un Helado de Fresa por $" + Substances.SubstanceData["rare_icecream*0"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te ofrecio un Helado de Fresa por $" + Substances.SubstanceData["rare_icecream*0"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);

                                        if (TargetSession.GetRoleplay().OfferData.ContainsKey("hfresa"))
                                        {
                                            TargetSession.GetRoleplay().OfferData.Remove("hfresa");
                                        }

                                        Offer OfferIcm = new Offer(Session, "hfresa", 1, Substances.SubstanceData["rare_icecream*0"].Item_Price);

                                        TargetSession.GetRoleplay().OfferData.Add("hfresa", OfferIcm);


                                        #endregion
                                    }
                                    break;

                                case "hchocolate":
                                    {
                                        #region Helado Chocolate
                                        if (!Session.GetRoleplay().JobHasRights("icecream") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisper("Tu empleo no permite esto!");
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("ICECREAM"))
                                        {
                                            Session.SendWhisper("No estas en tu sala de trabajo!");
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["rare_icecream*7"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("El usuario no cuenta con la cantidad!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Ofrecio a " + TargetSession.GetHabbo().UserName + " un Helado de Chocolate por $" + Substances.SubstanceData["rare_icecream*7"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te ofrecio un Helado de Chocolate por $" + Substances.SubstanceData["rare_icecream*7"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);

                                        if (TargetSession.GetRoleplay().OfferData.ContainsKey("hchocolate"))
                                        {
                                            TargetSession.GetRoleplay().OfferData.Remove("hchocolate");
                                        }

                                        Offer OfferIcm = new Offer(Session, "hchocolate", 1, Substances.SubstanceData["rare_icecream*7"].Item_Price);

                                        TargetSession.GetRoleplay().OfferData.Add("hchocolate", OfferIcm);


                                        #endregion
                                    }
                                    break;

                                case "hlimon":
                                    {
                                        #region Helado Limon
                                        if (!Session.GetRoleplay().JobHasRights("icecream") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisper("Tu empleo no permite esto!");
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("ICECREAM"))
                                        {
                                            Session.SendWhisper("No estas en tu sala de trabajo!");
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["rare_icecream_campaign"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("El usuario no cuenta con la cantidad!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Ofrecio a " + TargetSession.GetHabbo().UserName + " un Helado de Limon por $" + Substances.SubstanceData["rare_icecream_campaign"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te ofrecio un Helado de Limon por $" + Substances.SubstanceData["rare_icecream_campaign"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);

                                        if (TargetSession.GetRoleplay().OfferData.ContainsKey("hlimon"))
                                        {
                                            TargetSession.GetRoleplay().OfferData.Remove("hlimon");
                                        }

                                        Offer OfferIcm = new Offer(Session, "hlimon", 1, Substances.SubstanceData["rare_icecream_campaign"].Item_Price);

                                        TargetSession.GetRoleplay().OfferData.Add("hlimon", OfferIcm);


                                        #endregion
                                    }
                                    break;

                                case "hespecial":
                                    {
                                        #region Helado Especial
                                        if (!Session.GetRoleplay().JobHasRights("icecream") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisper("Tu empleo no permite esto!");
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("ICECREAM"))
                                        {
                                            Session.SendWhisper("No estas en tu sala de trabajo!");
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["calippo"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("El usuario no cuenta con la cantidad!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Ofrecio a " + TargetSession.GetHabbo().UserName + " un Helado Especial por $" + Substances.SubstanceData["calippo"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te ofrecio un Helado Especial por $" + Substances.SubstanceData["calippo"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);

                                        if (TargetSession.GetRoleplay().OfferData.ContainsKey("hespecial"))
                                        {
                                            TargetSession.GetRoleplay().OfferData.Remove("hespecial");
                                        }

                                        Offer OfferIcm = new Offer(Session, "hespecial", 1, Substances.SubstanceData["calippo"].Item_Price);

                                        TargetSession.GetRoleplay().OfferData.Add("hespecial", OfferIcm);


                                        #endregion
                                    }
                                    break;

                                case "palomitas":
                                    {
                                        #region Helado Especial
                                        if (!Session.GetRoleplay().JobHasRights("CINE") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisper("Tu empleo no permite esto!");
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("CINE"))
                                        {
                                            Session.SendWhisper("No estas en tu sala de trabajo!");
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < Substances.SubstanceData["cine_popcorn"].Item_Price)
                                        {
                                            Session.SendWhisperBubble("El usuario no cuenta con la cantidad!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Ofrecio a " + TargetSession.GetHabbo().UserName + " unas Palomitas por $" + Substances.SubstanceData["cine_popcorn"].Item_Price + "*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te ofrecio unas Palomitas por $" + Substances.SubstanceData["cine_popcorn"].Item_Price + ". Escribe #aceptar para aceptar o #rechazar para rechazar!", 1);

                                        if (TargetSession.GetRoleplay().OfferData.ContainsKey("palomitas"))
                                        {
                                            TargetSession.GetRoleplay().OfferData.Remove("palomitas");
                                        }

                                        Offer OfferIcm = new Offer(Session, "palomitas", 1, Substances.SubstanceData["cine_popcorn"].Item_Price);

                                        TargetSession.GetRoleplay().OfferData.Add("palomitas", OfferIcm);


                                        #endregion
                                    }
                                    break;

                                case "marihuana":
                                    {
                                        #region Weed

                                        if (Session.GetRoleplay().Weed < 5)
                                        {
                                            Session.SendWhisper("Debes tener al menos 5g de marihuana para poder venderla!");
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < 200)
                                        {
                                            Session.SendWhisperBubble("El usuario no puede aceptar esto!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Oferta " + TargetSession.GetHabbo().UserName + " 5g de marihuana por $200*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " ha ofrecido 5g de marihuana por $200. Escribe #aceptar para aceptar #rechazar para rechazar!", 1);

                                        Offer OfferWeed = new Offer(Session, "weed", 5, 200);

                                        if (TargetSession.GetRoleplay().OfferData.ContainsKey("weed"))
                                        {
                                            TargetSession.GetRoleplay().OfferData.Remove("weed");
                                        }

                                        TargetSession.GetRoleplay().OfferData.Add("weed", OfferWeed);

                                        #endregion
                                    }
                                    break;
                                    
                                case "cocaina":
                                    {
                                        #region Carrots

                                        if (Session.GetRoleplay().Carrots < 5)
                                        {
                                            Session.SendWhisper("Debes tener al menos 3g de cocaina para poder venderla!");
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < 250)
                                        {
                                            Session.SendWhisperBubble("Este usuario no puede aceptar esto!", 1);
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Ofrecio " + TargetSession.GetHabbo().UserName + " 3g de cocaina por $250*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te ofrecio 3g de cocaina por $250. Escribe #Aceptar para aceptar o #Rechazar para rechazar!", 1);

                                        Offer OfferCarrots = new Offer(Session, "carrots", 5, 250);

                                        if (TargetSession.GetRoleplay().OfferData.ContainsKey("carrots"))
                                        {
                                            TargetSession.GetRoleplay().OfferData.Remove("carrots");
                                        }

                                        TargetSession.GetRoleplay().OfferData.Add("carrots", OfferCarrots);

                                        #endregion
                                    }
                                    break;

                                case "iphone":
                                    {
                                        #region Phone
                                        if (!Session.GetRoleplay().JobHasRights("phone") && Session.GetHabbo().Rank <= 2)
                                        {
                                            Session.SendWhisper("Algo anda mal.");
                                            return true;
                                        }
                                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("PHONE"))
                                        {
                                            Session.SendWhisper("Dirigete a la Tienda Apple [Sala ID: 5] para hacer esto.");
                                            return true;
                                        }

                                        if (TargetSession.GetRoleplay().Phone == 1)
                                        {
                                            Session.SendWhisper("Este usuario ya tiene un telefono movil.");
                                            return true;
                                        }
                                        RoleplayManager.Shout(Session, "*Ofrecio a " + TargetSession.GetHabbo().UserName + " un iPhone 7 por $50*", 4);
                                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " te ofrecio un iPhone 7 por $50*. Escribe #aceptar para aceptar la oferta o #rechazar para rechazarla!", 1);

                                        Offer OfferPhone = new Offer(Session, "phone", 1, 50);

                                        TargetSession.GetRoleplay().OfferData.Add("phone", OfferPhone);

                                        #endregion
                                    }
                                    break;

                                case "masturbacion":
                                    {
                                        #region masturbacion

                                        if (!Session.GetRoleplay().JobHasRights("prostibulo"))
                                        {
                                            Session.SendWhisper("Debes trabajar en el prostibulo para ofrecer esto!");
                                            return true;
                                        }
                                        if (TargetSession.GetHabbo().Credits < 1000)
                                        {
                                            Session.SendWhisperBubble("El usuario no puede aceptar esto!", 1);
                                            return true;
                                        }

                                        #region Ejecutamos

                                        if (TargetSession.GetHabbo().Gender.ToLower().StartsWith("m"))
                                        {
                                            RoleplayManager.Shout(Session, "*Pone su mano sobre el pene de " + TargetSession.GetHabbo().UserName + " y comienza a masturbarlo rapidamente [-10 Energia]*", 11);
                                            RoleplayManager.Shout(TargetSession, "*Oh si, si, sigue asi, me encanta*", 11);
                                        }
                                        else if (TargetSession.GetHabbo().Gender.ToLower().StartsWith("f"))
                                        {
                                            RoleplayManager.Shout(Session, "*Ingresa dos dedos en el interior de su vagina " + TargetSession.GetHabbo().UserName + " y comienza a girar sus dedos al rededor [-10 Energia]*", 11);
                                            RoleplayManager.Shout(TargetSession, "*Oh si, si, sigue asi, me encanta*", 11);
                                        }
                                        else
                                        {
                                            RoleplayManager.Shout(Session, "*Comienza a tocar la entrepierna de" + TargetSession.GetHabbo().UserName + " [-10 Energia]*", 11);
                                            RoleplayManager.Shout(TargetSession, "Oh si " + Session.GetHabbo().UserName + " continua tocandome asi bebe.", 11);
                                        }
                                        Session.GetRoleplay().EffectSeconds = 7;
                                        TargetSession.GetRoleplay().EffectSeconds = 7;
                                        Session.GetRoleplay().Energy -= 10;
                                        Session.GetHabbo().GetRoomUser().ApplyEffect(4);
                                        TargetSession.GetHabbo().GetRoomUser().ApplyEffect(4);
                                        Session.GetRoleplay().MultiCoolDown["masturbate_cooldown"] = Convert.ToInt32(RoleplayData.Data["masturbate_cooldown"]);
                                        Session.GetRoleplay().CheckingMultiCooldown = true;
                                        #endregion

                                        #endregion
                                    }
                                    break;

                                default:
                                    Session.SendWhisperBubble("La oferta de este producto " + Offer + " no existe!", 1);
                                    break;
                            }
                        }

                        Session.GetRoleplay().MultiCoolDown["offer_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion

                /*#region :buyweapon <weapon>
                case "buyweapon":
                    {
                        Session.SendWhisperBubble("Este comando fue desactivado, por favor habla con un empleado!", 34);
                        return true;
                    }
                #endregion*/

                #region :mascotas
                case "mascotas":
                    {

                        #region Condiciones
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("TMASC"))
                        {
                            Session.SendWhisper("No te encuentras en la tienda de mascotas!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("mascotas_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("mascotas_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["mascotas_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["mascotas_cooldown"] + "/10]");
                            return true;
                        }
                        #endregion

                        #region Ejecutamos
                        Session.SendNotif("<b>Mascotas Disponibles Actualmente:</b><br>Perro - $20,000<br>Gato - $20,000<br>Terrier - $20,000<br>Tortuga - $20,000<br>Rana - $25,000<br>Pollo - $15,000<br>Rinoceronte - $35,000<br>Caballo - $50,000<br>Oso - $40,000<br>Mono - $40,000<br>Ara√±a - $30,000<br>Cerdo - $25,000<br>Leon - $50,000<br>Cocodrilo - $45,000<br>Conejo - $20,000<br>Gnomo - $100,000.");
                        return true;
                        #endregion
                    }
                #endregion

                #region :sell rocks (space mining)
                case "vender":
                    {
                        string item = Params[1].ToString();

                        switch (item)
                        {
                            case "uranio":
                                {
                                    #region Declares
                                    HybridDictionary rocks = Session.GetHabbo().GetInventoryComponent().getRocks();
                                    RoomUser user = Session.GetHabbo().GetRoomUser();
                                    #endregion

                                    #region Conditions
                                    if (rocks.Count <= 0)
                                    {
                                        Session.SendWhisper("No tienes uranio para vender!");
                                        break;
                                    }

                                    if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SPACE_SELL"))
                                    {
                                        Session.SendWhisper("No te encuentras en el punto de venta! Dirigete a la estacion espacial y intentalo de nuevo.");
                                        break;

                                        // Redo this when space room dun
                                        //BOOKMARK
                                    }
                                    #endregion

                                    #region Execute
                                    int totalCoins = rocks.Count * (20 + Session.GetRoleplay().SpaceLevel);

                                    Session.GetHabbo().Credits += totalCoins;
                                    Session.GetHabbo().UpdateCreditsBalance();
                                    Session.SendWhisperBubble("Acabas de vender " + rocks.Count + " rocas con uranio por: " + totalCoins.ToString() + " billetes!", 1);
                                    RoleplayManager.Shout(Session,
                                        "*Vendio " + rocks.Count + " rocas con uranio por un total de " + totalCoins.ToString() + " billetes [+$" + totalCoins.ToString() + "]*", 4);
                                    spaceManager.removeInventoryRocks(Session, rocks);
                                    #endregion
                                    break;
                                }
                        }
                        return true;
                    }
                #endregion

                #region :sellweapon x <item> (DISABLED)
                /*case "offerweapon":
                case "offerwep":
                case "sellweapon":
                    {

                        #region Generate Instances / Sessions
                        if (!Misc.ParamsMet(Params, 3))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :offerweapon x <weapon> <amount>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        string Offer = Convert.ToString(Params[2]);
                        int Amount = Convert.ToInt32(Params[3]);
                        GameClient TargetSession = null;
                        TargetSession = Misc.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("offerwep_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("offerwep_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["offerwep_cooldown"] > 0 && !Misc.BypassRights(Session))
                        {
                            Session.SendWhisper("Cooldown [" + Session.GetRoleplay().MultiCoolDown["offerwep_cooldown"] + "/30]");
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }
                        if(Amount <= 0)
                        {
                            return true;
                        }
                        Dictionary<string, Weapon> Weaponss = new Dictionary<string, Weapon>();
                        Dictionary<string, Weapon> TWeaponss = new Dictionary<string, Weapon>();
                        Weaponss.Clear();
                        TWeaponss.Clear();
                        foreach (KeyValuePair<string, Weapon> Weapon in Session.GetRoleplay().Weapons)
                        {
                            Weaponss.Add(weaponManager.GetWeaponName(Weapon.Key), Weapon.Value);

                           // Console.WriteLine(weaponManager.GetWeaponName(Weapon.Key));
                        }
                        foreach (KeyValuePair<string, Weapon> Weapon in TargetSession.GetRoleplay().Weapons)
                        {
                            TWeaponss.Add(weaponManager.GetWeaponName(Weapon.Key), Weapon.Value);
                        }
                        if (Session.GetRoleplay().Equiped.ToLower() == Offer)
                        {
                            Session.SendWhisper("You must unequip your " + Offer + " first before selling it..");
                            return true;
                        }
                        #endregion

                        #region Execute

                        if (!Weaponss.ContainsKey(Offer))
                        {
                            Session.SendWhisper("You do not have a " + Offer);
                            return true;
                        }

                        if(TWeaponss.ContainsKey(Offer))
                        {
                            Session.SendWhisper("This user already has a " + Offer);
                            return true;
                        }

                        Session.Shout("*Offers to sell " + TargetSession.GetHabbo().UserName + " their " + weaponManager.WeaponsData[Offer.ToLower()].Name + " for $" + Amount + "*");
                        TargetSession.SendWhisper(Session.GetHabbo().UserName + " has offered to sell you their " + weaponManager.WeaponsData[Offer.ToLower()].Name + " for $" + Amount + ". Type #aceptar to accept or #rechazar to deny!");
                        TargetSession.SendWhisper("!! Ensure that you have checked the price listed above carefully, and make sure that you are not being RIPPED OFF! PROCEED AT YOUR OWN RISK!");
                        TargetSession.GetRoleplay().WeaponOfferedSell = weaponManager.WeaponsData[Offer.ToLower()].Name;
                        TargetSession.GetRoleplay().WeaponOfferedSell_By = Session;
                        TargetSession.GetRoleplay().WeaponOffered = true;
                        TargetSession.GetRoleplay().WeaponOfferedPrice = Amount;

                        Session.GetRoleplay().MultiCoolDown["offerwep_cooldown"] = 30;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }*/
                #endregion

                #endregion

                #region Staff Misc / Builders

                #region :banvipa
                case "bansca":
                case "banvip":
                    {

                        #region Conditions
                        string Target;
                        GameClient TargetSession;
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("No puedes hacer esto!");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :banvipa <usuario>");
                            return true;
                        }
                        Target = Convert.ToString(Params[1]);
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (!RoleplayManager.CanInteract(Session, TargetSession, false))
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().BannedFromVIPAlert)
                        {
                            Session.SendWhisper("Este usuario ya fue expulsado del radio VIP!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        TargetSession.GetRoleplay().BannedFromVIPAlert = true;
                        RoleplayManager.sendVIPAlert(Session, "*" + Session.GetHabbo().UserName + " expulso a " + TargetSession.GetHabbo().UserName + " del radio VIP*");
                        TargetSession.SendNotif(Session.GetHabbo().UserName + " fuiste expulsado del radio VIP!");
                        string banned = TargetSession.GetRoleplay().BannedFromVIPAlert == true ? "1" : "0";
                        TargetSession.GetRoleplay().SaveQuickStat("vip_a_banned", banned);
                        #endregion

                        return true;
                    }
                #endregion

                #region :unbanvipa
                case "unbanvipa":
                case "unbanvip":
                    {

                        #region Conditions
                        string Target;
                        GameClient TargetSession;
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("No puedes hacer esto!");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :unbanvipa <usuario>");
                            return true;
                        }
                        Target = Convert.ToString(Params[1]);
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (!RoleplayManager.CanInteract(Session, TargetSession, false))
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (!TargetSession.GetRoleplay().BannedFromVIPAlert)
                        {
                            Session.SendWhisper("Este usuario no esta expulsado del radio VIP!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        TargetSession.GetRoleplay().BannedFromVIPAlert = false;
                        RoleplayManager.sendVIPAlert(Session, "*" + Session.GetHabbo().UserName + " retiro la expulsion de " + TargetSession.GetHabbo().UserName + " en el radio VIP*");
                        TargetSession.SendNotif(Session.GetHabbo().UserName + " te retiro la expulsion del radio VIP!");

                        string banned = TargetSession.GetRoleplay().BannedFromVIPAlert == true ? "1" : "0";
                        TargetSession.GetRoleplay().SaveQuickStat("vip_a_banned", banned);
                        #endregion

                        return true; ;
                    }
                #endregion

                #region :debugfurni
                case "debugfurni":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }

                        string from = "";
                        string to = "";
                        from = Session.GetRoleplay().Debug_Furni.ToString();
                        Session.GetRoleplay().Debug_Furni = !Session.GetRoleplay().Debug_Furni;
                        to = Session.GetRoleplay().Debug_Furni.ToString();
                        Session.SendWhisper(from + " -> " + to);
                        return true;
                    }
                #endregion

                #region :fixweapons <user>
                case "refreshuweapons":
                case "fixweapons":
                case "refreshweps":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :fixweapons <usuario>");
                            return true;
                        }

                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null)
                        {
                            return true;
                        }

                        Session.SendWhisperBubble("Actualizaste las armas de " + TargetSession.GetHabbo().UserName + "!", 1);
                        TargetSession.SendWhisperBubble("Un administrador actualizo tus armas!", 1);
                        TargetSession.GetRoleplay().RefreshWeapons();
                        return true;
                    }
                #endregion

                #endregion

                #region General Roleplay

                #region :buyphone
                /*case "buyphone":
                    {
                        Session.SendWhisperBubble("Command removed. Please contact an active phone store worker!", 34);
                        return true;
                    }*/
                #endregion

                #region :comer
                case "comer":
                    {


                        #region Variables

                        RoomUser User = Session.GetHabbo().GetRoomUser();

                        RoomItem Food = null;
                        #endregion

                        #region Conditions
                        foreach (RoomItem Item in Session.GetHabbo().CurrentRoom.GetRoomItemHandler().FloorItems.Values)
                        {
                            if (Substances.IsAFood(Item) && RoleplayManager.Distance(new Vector2D(Item.X, Item.Y), new Vector2D(User.X, User.Y)) <= 1)
                            {
                                Food = Item;
                            }

                        }

                        if (Food == null)
                        {
                            Session.SendWhisper("No hay comida cerca de ti!");
                            return true;
                        }

                        if (Session.GetRoleplay().Hunger <= 0)
                        {
                            Session.SendWhisper("Ya estas lleno!");
                            return true;
                        }


                        #endregion

                        #region Execute

                        Food FoodItem = Substances.GetFoodById(Food.BaseItem);

                        if (FoodItem.BaseItemId == 0)
                        {
                            Session.SendWhisper("No puedes comer esto!");
                            return true;
                        }

                        RoleplayManager.ReplaceItem(Session, Food, "diner_tray_0");

                        int newhunger = (Session.GetRoleplay().Hunger - FoodItem.Hunger <= 0) ? 0 : Session.GetRoleplay().Hunger - FoodItem.Hunger;
                        int newhealth = (Session.GetRoleplay().CurHealth + FoodItem.Health >= 100) ? 100 : Session.GetRoleplay().CurHealth + FoodItem.Hunger;
                        int newenergy = (Session.GetRoleplay().Energy + FoodItem.Energy >= 100) ? 100 : Session.GetRoleplay().Energy + FoodItem.Energy;
                        // Session.SendWhisper("" + FoodItem.Hunger + "||" + FoodItem.UniqueName);
                        Session.GetRoleplay().Hunger = newhunger;
                        Session.GetRoleplay().CurHealth = newhealth;
                        Session.GetRoleplay().Energy = newenergy;

                        Session.GetRoleplay().UpdateStats += 2;

                        Session.Shout("*Delicioso*");
                        Session.Shout(FoodItem.Speech);

                        #endregion


                        return true;
                    }
                #endregion

                #region :marry
                    
                case "matrimonio":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("CHURCH"))
                        {
                            Session.SendWhisper("Debes estar en la iglesia para casarte!");
                            return true;
                        }
                        if (Session.GetRoleplay().Married_To != 0)
                        {
                            Session.SendWhisper("Ya estas casado con alguien.");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :matrimonio <usuario>");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().Married_To != 0)
                        {
                            Session.SendWhisper("Lo sentimos, " + TargetSession.GetHabbo().UserName + " ya esta casado con alguien mas.");
                            return true;
                        }
                        if (Session.GetHabbo().UserName == TargetSession.GetHabbo().UserName)
                        {
                            Session.SendWhisper("No puede casarse con usted mismo.");
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar cerca para hacer esto!");
                            return true;
                        }

                        #endregion

                        #region Execute
                    
                        RoleplayManager.Shout(Session, "*Preguntado a " + TargetSession.GetHabbo().UserName + " si desea casarse conmigo*", 17);
                        TargetSession.GetRoleplay().marryReq = true;
                        TargetSession.GetRoleplay().marryReqer = Session.GetHabbo().Id;
                        TargetSession.SendWhisperBubble(Session.GetHabbo().UserName + " desea casarse contigo. Escripe #aceptar para aceptar #rechazar para rechazar.", 1);

                        #endregion

                    }
                    return true;

                #endregion

                #region :divorce
                    
                case "divorcio":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :divorcio <usuario>");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("COURT"))
                        {
                            Session.SendWhisper("Debes ir al ayuntamiento para hacer esto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Married_To == 0)
                        {
                            Session.SendWhisper("No estas casado con nadie!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        if (TargetSession != null)
                        {
                            if (Session.GetHabbo().Id != TargetSession.GetRoleplay().Married_To)
                            {
                                Session.SendWhisper(TargetSession.GetHabbo().UserName + " ya no esta casado contigo.");
                                return true;
                            }
                            if (Session.GetHabbo().UserName == TargetSession.GetHabbo().UserName)
                            {
                                return true;
                            }
                            Session.Shout("*Se divorcio de " + TargetSession.GetHabbo().UserName + "*");
                            TargetSession.SendWhisper(Session.GetHabbo().UserName + " se divorcio de ti.");

                            Session.GetRoleplay().Married_To = 0;
                            Session.GetRoleplay().SaveQuickStat("married_to", "" + Session.GetRoleplay().Married_To);

                            TargetSession.GetRoleplay().Married_To = 0;
                            TargetSession.GetRoleplay().SaveQuickStat("married_to", "" + TargetSession.GetRoleplay().Married_To);
                        }
                        else
                        {

                            #region Offline Divorce

                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {

                                dbClient.SetQuery("SELECT id FROM users WHERE username = '" + Target + "'");
                                int targetid = dbClient.GetInteger();

                                dbClient.SetQuery("SELECT username FROM users WHERE username = '" + Target + "'");
                                string username = dbClient.GetString();

                                dbClient.SetQuery("SELECT married_to FROM rp_stats WHERE id = '" + targetid + "'");
                                DataRow TarGetRow = dbClient.GetRow();




                                #region Conditions (Offline)

                                if (TarGetRow == null)
                                {
                                    Session.SendWhisper("El usuario no existe!");
                                    return true;
                                }
                                if (Convert.ToInt32(TarGetRow["married_to"]) != Session.GetHabbo().Id)
                                {
                                    Session.SendWhisper("No tienes un matrimonio con la persona espesificada!");
                                    return true;
                                }
                                #endregion


                                Session.SendWhisper("El ciudadano esta desconectado pero ya estan divorciados!");

                                Session.GetRoleplay().Married_To = 0;
                                Session.GetRoleplay().SaveQuickStat("married_to", "0");

                                RoleplayManager.Shout(Session, "*Se divorcio de " + username + "*", 27);
                                dbClient.RunFastQuery("UPDATE rp_stats SET married_to = 0 WHERE id = '" + targetid + "'");
                                return true;
                            }
                            #endregion
                        }

                        #endregion

                    }
                    return true;

                #endregion

                #region :timeleft
                case "timeleft":
                    {
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().DeadTimer + " minuto(s) para salir del hospital.");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().JailTimer + " minuto(s) para salir de la prision.");
                            return true;
                        }
                        if (Session.GetRoleplay().BeingHealed && Session.GetRoleplay().healTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().healTimer.getTime() + " segundo(s) para que sus heridas se curen.");
                            return true;
                        }
                        if (Session.GetRoleplay().BeingMassaged && Session.GetRoleplay().massageTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().massageTimer.getTime() + " segundo(s) para que sus dolores se curen.");
                            return true;
                        }
                        if (Session.GetRoleplay().Relaxing && Session.GetRoleplay().relaxTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().relaxTimer.getTime() + " segundo(s) para que sus dolores se curen.");
                            return true;
                        }
                        if (Session.GetRoleplay().Robbery && Session.GetRoleplay().bankRobTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().bankRobTimer.getTime() + " minuto(s) para completar tu robo.");
                            return true;
                        }
                        if (Session.GetRoleplay().NPA && Session.GetRoleplay().npaTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().npaTimer.getTime() + " minutos(s) para la arma nuclear.");
                            return true;
                        }
                        if (Session.GetRoleplay().ATMRobbery && Session.GetRoleplay().ATMRobTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().ATMRobTimer.getTime() + " minuto(s) para completar tu robo al cajero automatico.");
                            return true;
                        }
                        if (Session.GetRoleplay().Learning && Session.GetRoleplay().learningTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().learningTimer.getTime() + " minuto(s) para aprender un nuevo tema.");
                            return true;
                        }
                        if (Session.GetRoleplay().Working && Session.GetRoleplay().workingTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().workingTimer.getTime() + " minuto(s) para recibir tu siguiente pago.");
                            return true;
                        }
                        if (Session.GetRoleplay().SentHome && Session.GetRoleplay().sendHomeTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().sendHomeTimer.getTime() + " minuto(s) para volver a trabajar despues de haber sido sancionado!");
                            return true;
                        }
                        if (Session.GetRoleplay().UsingWeed && Session.GetRoleplay().weedTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().weedTimer.getTime() + " segundos(s) para que el efecto termine!");
                            return true;
                        }
                        if (Session.GetRoleplay().GangCapturing && Session.GetRoleplay().gangCaptureTimer != null)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().gangCaptureTimer.getTime() + " minutos(s) para lograr ganar este territorio!");
                            return true;
                        }
                        if (Session.GetRoleplay().WorkingOut)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().WorkoutSeconds + " segundos(s) para finalizar, progreso: " + Session.GetRoleplay().WorkoutTimer_Done + "/" + Session.GetRoleplay().WorkoutTimer_ToDo + "!");
                            return true;
                        }
                        if (Session.GetRoleplay().WeightLifting)
                        {
                            Session.SendWhisper("Te restan " + Session.GetRoleplay().WeightLiftSeconds + " segundos(s) para finalizar, progreso: " + Session.GetRoleplay().WeightLiftTimer_Done + "/" + Session.GetRoleplay().WeightLiftTimer_ToDo + "!");
                            return true;
                        }
                        else
                        {
                            Session.SendWhisper("Actualmente no tienes tiempo de correr!");
                            return true;
                        }
                    }

                #endregion

                #region :bail
                case "fianza":
                    {
                        #region Generate Instances / Sessions
                        string Target = null;
                        GameClient TargetSession = null;
                        int amount = 0;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :fianza <usuario>");
                            return true;
                        }
                        else
                        {
                            Target = Convert.ToString(Params[1]);
                            TargetSession = RoleplayManager.GenerateSession(Target);
                            amount = TargetSession.GetRoleplay().JailTimer * 250;
                        }

                        if (!RoleplayManager.CanInteract(Session, TargetSession, true))
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }
                        if (Session.GetHabbo().Credits < amount)
                        {
                            Session.SendWhisper("Debes tener $" + amount + " para la fianza!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision.");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto.");
                            return true;
                        }
                        if (!TargetSession.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("El usuario no esta en prision.");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("JAIL"))
                        {
                            Session.SendWhisper("Debes estar en la carcel para hacer esto.");
                            return true;
                        }

                        #endregion

                        #region Execute
                        if (TargetSession.GetRoleplay().Jailed)
                        {
                            RoleplayManager.Shout(Session, "*Fianza " + TargetSession.GetHabbo().UserName + " por [-$" + amount + "]*", 7);
                            RoleplayManager.GiveMoney(Session, -amount);

                            RoleplayManager.Shout(TargetSession, "*Finalizo su tiempo en prision*", 7);
                            TargetSession.GetRoleplay().JailTimer = 0;
                            TargetSession.GetRoleplay().Jailed = false;
                            TargetSession.GetRoleplay().SaveStatusComponents("jailed");
                            if (TargetSession.GetRoleplay().FigBeforeSpecial != null && TargetSession.GetRoleplay().MottBeforeSpecial != null)
                            {
                                TargetSession.GetHabbo().Look = TargetSession.GetRoleplay().FigBeforeSpecial;
                                TargetSession.GetHabbo().Motto = TargetSession.GetRoleplay().MottBeforeSpecial;
                            }
                            else
                            {
                                DataRow User = null;

                                using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                                {
                                    dbClient.SetQuery("SELECT look,motto FROM users WHERE id = '" + TargetSession.GetHabbo().Id + "'");
                                    User = dbClient.GetRow();
                                }

                                TargetSession.GetHabbo().Look = Convert.ToString(User["look"]);
                                TargetSession.GetHabbo().Motto = Convert.ToString(User["motto"]);
                            }
                            TargetSession.GetRoleplay().RefreshVals();
                        }
                        else
                        {
                            Session.SendWhisper("El usuario no esta en prision!");
                            return true;
                        }


                        #endregion


                    }
                    return true;


                #endregion

                #region :dispose
                case "tirardroga":
                    {

                        if (Session.GetRoleplay().Weed <= 0)
                        {
                            Session.SendWhisper("No tienes marihuana!");
                            return true;
                        }

                        Session.GetRoleplay().Weed = 0;
                        Session.GetRoleplay().SaveQuickStat("weed", "" + 0);
                        RoleplayManager.Shout(Session, "*Se deshizo de toda su marihuana*", 3);
                        return true;
                    }
                #endregion

                #region :text
                case "movil":
                    {

                        #region Generate Instances / Sessions
                        string Target = null;
                        string Msg = null;

                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :movil <usuario> <mensaje>");
                        }
                        else
                        {
                            Target = Convert.ToString(Params[1]);
                            Msg = MergeParams(Params, 2);
                        }

                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        int credit = new Random().Next(1, 15);
                        #endregion

                        #region Conditions

                        if (!RoleplayManager.CanInteract(Session, TargetSession, false))
                        {
                            Session.SendWhisperBubble("No se encontro el usuario!", 34);
                            return true;
                        }

                        if (Session.GetRoleplay().Phone != 1)
                        {
                            Session.SendWhisperBubble("No tienes un telefono! Adquiere uno en la sala ID: [5]!", 34);
                            return true;
                        }
                        if (Session.GetHabbo().ActivityPoints < credit)
                        {
                            Session.SendWhisperBubble("Te quedaste sin credito! Adquiere mas saldo en la sala ID: [5]!", 34);
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("text_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("text_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["text_cooldown"] > 0)
                        {
                            Session.SendWhisperBubble("Relajate! [" + Session.GetRoleplay().MultiCoolDown["text_cooldown"] + "/5]", 34);
                            return true;
                        }
                        if (Session.GetRoleplay().DisabledTexts)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto si tienes los mensajes de textos desactivados!", 34);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().DisabledTexts)
                        {
                            Session.SendWhisperBubble("Este usario tiene desactivados los mensajes de texto!", 34);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().BlockedTexters.Contains(Session.GetHabbo().Id))
                        {
                            Session.SendWhisperBubble("Estas en la lista de contactos bloqueados de este usuario!", 34);
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SHAME"))
                        {
                            Session.SendWhisperBubble("No puedes enviar un mensaje de texto en esta sala!", 34);
                            return true;
                        }
                        if (TargetSession.GetHabbo().CurrentRoom.RoomData.Description.Contains("SHAME") && !RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisperBubble("El usuario se encuentra en una sala donde no se permiten los mensajes de texto.", 34);
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoomUser u = Session.GetHabbo().GetRoomUser();
                        RoomUser u2 = TargetSession.GetHabbo().GetRoomUser();

                        Session.GetRoleplay().EffectSeconds = 3;
                        u.ApplyEffect(65);

                        Session.GetRoleplay().MultiCoolDown["text_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        TargetSession.GetRoleplay().LastTexter = Session;

                        RoleplayManager.Shout(Session, "*Envio un mensaje de texto a " + TargetSession.GetHabbo().UserName + "*", 4);

                        if (TargetSession.GetHabbo().GetRoomUser().IsAsleep)
                            Session.SendWhisperBubble("El usuario esta ausente, pero se le envio el mensaje!", 1);

                        TargetSession.GetRoleplay().EffectSeconds = 3;

                        if (u2 != null)
                        {
                            u2.ApplyEffect(65);
                        }

                        RoleplayManager.Shout(TargetSession, "*Recibiste un nuevo mensaje de texto de " + Session.GetHabbo().UserName + "*", 4);

                        string view = "";
                        view += "=====================================================\nTienes un nuevo mensaje de texto!\n=====================================================\n";
                        view += "De: " + Session.GetHabbo().UserName + "\n";
                        view += "Titulo: -" + "\n";
                        view += "Fecha: " + DateTime.Now + " (Tiempo del Servidor)\n\n";
                        view += "Mensaje: \n";
                        view += Msg + "\n\n";
                        view += "-" + Session.GetHabbo().UserName;

                        TargetSession.SendNotifWithScroll(view);

                        var roomUserByRank = Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUserByRank(2);

                        foreach (var current2 in roomUserByRank)
                            if (current2 != null && current2.HabboId != u2.HabboId &&
                                current2.HabboId != u.HabboId && current2.GetClient() != null)
                            {
                                if (RoleplayManager.BypassRights(current2.GetClient()))
                                {
                                    var whispStaff = new ServerMessage(LibraryParser.OutgoingRequest("WhisperMessageComposer"));
                                    whispStaff.AppendInteger(u.VirtualId);
                                    whispStaff.AppendString(string.Format("Mensaje de texto a {0}: {1}", TargetSession.GetHabbo().UserName, Msg));
                                    whispStaff.AppendInteger(0);
                                    whispStaff.AppendInteger(0);
                                    whispStaff.AppendInteger(0);
                                    whispStaff.AppendInteger(-1);
                                    current2.GetClient().SendMessage(whispStaff);
                                }
                            }
                        #endregion

                        return true;
                    }
                #endregion

                #region :reply
                case "responder":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :responder <mensaje>", 34);
                        }

                        string Msg = MergeParams(Params, 1);
                        GameClient TargetSession = null;
                        TargetSession = Session.GetRoleplay().LastTexter;

                        int credit = new Random().Next(1, 15);
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.CanInteract(Session, TargetSession, false))
                        {
                            Session.SendWhisperBubble("El usuario esta desconectado o no fue encontrado!", 34);
                            return true;
                        }
                        if (Session.GetRoleplay().Phone != 1)
                        {
                            Session.SendWhisperBubble("Necesitas un telefono para hacer esto!", 34);
                            return true;
                        }
                        if (Session.GetHabbo().ActivityPoints < credit)
                        {
                            Session.SendWhisperBubble("No tienes el saldo suficiente para hacer esto!", 34);
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("text_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("text_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["text_cooldown"] > 0)
                        {
                            Session.SendWhisperBubble("Relajate! [" + Session.GetRoleplay().MultiCoolDown["text_cooldown"] + "/5]", 34);
                            return true;
                        }
                        if (Session.GetRoleplay().DisabledTexts)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que tienes desactivados los mensajes de texto!", 34);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().DisabledTexts)
                        {
                            Session.SendWhisperBubble("Este usuario tiene desactivados los mensajes de texto!", 34);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().BlockedTexters.Contains(Session.GetHabbo().Id))
                        {
                            Session.SendWhisperBubble("Este usuario esta en tu lista de usuarios bloqueados!", 34);
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SHAME"))
                        {
                            Session.SendWhisperBubble("No se permite esto en esta sala.", 34);
                            return true;
                        }
                        if (TargetSession.GetHabbo().CurrentRoom.RoomData.Description.Contains("SHAME"))
                        {
                            Session.SendWhisperBubble("El usuario se encuentra en una sala donde no se permiten los mensajes de texto.", 34);
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoomUser u = Session.GetHabbo().GetRoomUser();
                        RoomUser u2 = TargetSession.GetHabbo().GetRoomUser();

                        Session.GetRoleplay().EffectSeconds = 3;
                        u.ApplyEffect(65);

                        Session.GetRoleplay().MultiCoolDown["text_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        RoleplayManager.Shout(Session, "*Respuesta de " + TargetSession.GetHabbo().UserName + "' a tu mensaje de texto*", 4);
                        RoleplayManager.GiveCredit(Session, -credit);

                        if (TargetSession.GetHabbo().GetRoomUser().IsAsleep)
                        { Session.SendWhisper("Este usuario esta ausente, pero se le envio el mensaje!"); }

                        TargetSession.GetRoleplay().LastTexter = Session;

                        TargetSession.GetRoleplay().EffectSeconds = 3;
                        u2.ApplyEffect(65);

                        RoleplayManager.Shout(TargetSession, "*Recibiste una respuesta de un mensaje de texto de " + Session.GetHabbo().UserName + "*", 4);

                        string view = "";
                        view += "=====================================================\nTienes un nuevo mensaje de texto!\n=====================================================\n";
                        view += "De: " + Session.GetHabbo().UserName + "\n";
                        view += "Titulo: -" + "\n";
                        view += "Para: " + DateTime.Now + " (Tiempo del Servidor)\n\n";
                        view += "Mensaje: \n";
                        view += Msg + "\n\n";
                        view += "-" + Session.GetHabbo().UserName;

                        TargetSession.SendNotifWithScroll(view);

                        var roomUserByRank = Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUserByRank(6);

                        foreach (var current2 in roomUserByRank)
                            if (current2 != null && current2.HabboId != u2.HabboId &&
                                current2.HabboId != u.HabboId && current2.GetClient() != null)
                            {
                                if (RoleplayManager.BypassRights(current2.GetClient()))
                                {
                                    var whispStaff = new ServerMessage(LibraryParser.OutgoingRequest("WhisperMessageComposer"));
                                    whispStaff.AppendInteger(u.VirtualId);
                                    whispStaff.AppendString(string.Format("Respuesta de mensaje de texto a {0}: {1}", TargetSession.GetHabbo().UserName, Msg));
                                    whispStaff.AppendInteger(0);
                                    whispStaff.AppendInteger(0);
                                    whispStaff.AppendInteger(0);
                                    whispStaff.AppendInteger(-1);
                                    current2.GetClient().SendMessage(whispStaff);
                                }
                            }
                        #endregion

                        return true;
                    }
                #endregion

                #region :toggletexts
                case "modomovil":
                    {

                        #region Conditions

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("dtext_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("dtext_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["dtext_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate [" + Session.GetRoleplay().MultiCoolDown["dtext_cooldown"] + "/15]");
                            return true;
                        }
                        #endregion

                        #region Execute

                        string msg = "";

                        if (Session.GetRoleplay().DisabledTexts)
                        {
                            Session.GetRoleplay().DisabledTexts = false;
                            msg = "*Activaste los mensajes de texto*";
                        }
                        else
                        {
                            Session.GetRoleplay().DisabledTexts = true;
                            msg = "*Desactivaste los mensajes de texto*";
                        }
                        RoleplayManager.Shout(Session, msg, 7);
                        Session.GetRoleplay().MultiCoolDown["dtext_cooldown"] = 15;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        #endregion

                        return true;
                    }
                #endregion

                #region :block
                case "bloquearmovil":
                    {

                        #region Params
                        string Target = null;
                        GameClient TargetSession = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :bloquearmovil <usuario>");
                            return true;
                        }
                        else
                        {
                            Target = Convert.ToString(Params[1]);
                        }

                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (!RoleplayManager.CanInteract(Session, TargetSession, false))
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (Session.GetRoleplay().BlockedTexters.Contains(TargetSession.GetHabbo().Id))
                        {
                            Session.SendWhisper("Este usuario ya esta en tu lista de bloqueados!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Session.GetRoleplay().BlockTexter(TargetSession.GetHabbo().Id);
                        Session.Shout("*Agrego a " + TargetSession.GetHabbo().UserName + " a su lista de usuarios bloqueados*");

                        #endregion

                        return true;
                    }
                #endregion

                #region :unblock
                case "desbloquearmovil":
                    {


                        #region Params
                        string Target = null;
                        GameClient TargetSession = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :desbloquearmovil <usuario>");
                            return true;
                        }
                        else
                        {
                            Target = Convert.ToString(Params[1]);
                        }

                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (!RoleplayManager.CanInteract(Session, TargetSession, false))
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (!Session.GetRoleplay().BlockedTexters.Contains(TargetSession.GetHabbo().Id))
                        {
                            Session.SendWhisper("Este usuario no esta en tu lista de bloqueados!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Session.GetRoleplay().UnblockTexter(TargetSession.GetHabbo().Id);
                        Session.Shout("*Elimino a " + TargetSession.GetHabbo().UserName + " de su lista de bloqueados*");

                        #endregion

                        return true;
                    }
                #endregion

                #region :blocklist

               case "listamovil":
                    {

                        string BlockedList = "---- Block List ----\n";

                        if (Session.GetRoleplay().BlockedTexters.Count > 0)
                        {
                            foreach (uint UserID in Session.GetRoleplay().BlockedTexters)
                            {
                                BlockedList += "[-] " + RoleplayManager.GetStatByID(Convert.ToInt32(UserID), "username") + "\n";
                            }
                        }
                        else
                        {
                            BlockedList += "T√∫ lista de bloqueados esta vacia!";
                        }

                        Session.SendNotifWithScroll(BlockedList);

                        return true;
                    }

                #endregion

                #region :buycredit
                case "recargarmovil":
                    {

                        #region Params
                        int Amnt = 0;
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :recargamovil <cantidad>");
                            return true;
                        }
                        else
                        {
                            Amnt = Convert.ToInt32(Params[1]);
                        }
                        #endregion

                        #region Conditions

                        double dub = Amnt / 2 + 2;
                        double Conv = Math.Round(dub, 0);
                        int Pay = Convert.ToInt32(Conv);

                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("PHONE"))
                        {
                            Session.SendWhisper("Dirigete a la tienda de electronica para adquirir una recarga movil!");
                            return true;
                        }
                        if (Amnt < 25)
                        {
                            Session.SendWhisper("No se puede comprar menos de 25 en saldo telefonico!");
                            return true;
                        }
                        if (Session.GetHabbo().Credits < Pay)
                        {
                            Session.SendWhisper("Necesitas $" + Pay + " para hacer una regarga de " + Amnt + " !");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Hiciste una recarga de " + Amnt + " a tu telefono movil $" + Pay + " [-$" + Pay + "]*", 6);
                        RoleplayManager.GiveCredit(Session, +Amnt);
                        RoleplayManager.GiveMoney(Session, -Pay);
                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #region Activities

                #region :workout
                case "correr":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("GYM"))
                        {
                            Session.SendWhisper("No te encuentras en el gimnacio!");
                            return true;
                        }
                        if (Session.GetRoleplay().Strength >= 20)
                        {
                            Session.SendWhisper("El limite de fuerza es 20!");
                            return true;
                        }
                        if (Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Estas trabajando, no puedes entrenar ahora.");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("workout_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("workout_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["workout_cooldown"] > 0)
                        {
                            Session.SendWhisper("Estas Relajate! [" + Session.GetRoleplay().MultiCoolDown["workout_cooldown"] + "/5]");
                            return true;
                        }
                        if (Session.GetRoleplay().WorkingOut)
                        {
                            Session.SendWhisper("Ya estas entrenando!");
                            return true;
                        }
                        #endregion

                        #region Set

                        RoomUser User = null;
                        User = Session.GetHabbo().GetRoomUser();
                        RoomItem Inter = Session.GetRoleplay().GetNearItem("sf_roller", 0);
                        #endregion

                        #region Execute

                        if (Inter == null)
                        {
                            Session.SendWhisper("No estas en la maquina de correr!");
                            return true;
                        }

                        User.SetRot(Inter.Rot);
                        RoleplayManager.Shout(Session, "*Comenzo a correr*", 31);
                        Session.GetRoleplay().WorkoutSeconds = 40;
                        Session.GetRoleplay().CalculateWorkoutTimer();
                        Session.GetRoleplay().WorkingOut = true;
                        Session.SendWhisper("Sesion: " + Session.GetRoleplay().WorkoutTimer_Done + "/" + Session.GetRoleplay().WorkoutTimer_ToDo);
                        User.IsWalking = true;
                        User.AddStatus("mv", User.X + "," + User.Y + "," + User.Z.ToString().Replace(',', '.'));
                        Session.GetRoleplay().MultiCoolDown["workout_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                    
                #region :weightlift
                case "pesas":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("GYM"))
                        {
                            Session.SendWhisper("No te encuentras en el gimnacio!");
                            return true;
                        }
                        if (Session.GetRoleplay().Constitution >= 10)
                        {
                            Session.SendWhisper("El limite de fuerza extra es 10!");
                            return true;
                        }
                        if (Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("No puedes ejercitarte mientras estas trabajando.");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("weightlift_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("weightlift_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["weightlift_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["weightlift_cooldown"] + "/5]");
                            return true;
                        }
                        if (Session.GetRoleplay().WeightLifting)
                        {
                            Session.SendWhisper("Ya estas levantando pesas!");
                            return true;
                        }
                        #endregion

                        #region Set

                        RoomUser User = null;
                        User = Session.GetHabbo().GetRoomUser();
                        RoomItem Inter = Session.GetRoleplay().GetNearItem("uni_wobench", 0);
                        #endregion

                        #region Execute

                        if (Inter == null)
                        {
                            Session.SendWhisper("No estas en una maquina de pesas!");
                            return true;
                        }
                        RoleplayManager.Shout(Session, "*Comenzo a levantar pesas*", 31);
                        Session.GetRoleplay().WeightLiftSeconds = 40;
                        Session.GetRoleplay().CalculateWeightLiftTimer();
                        Session.GetRoleplay().WeightLifting = true;
                        Session.SendWhisper("Sesion: " + Session.GetRoleplay().WeightLiftTimer_Done + "/" + Session.GetRoleplay().WeightLiftTimer_ToDo);
                        Session.GetRoleplay().MultiCoolDown["weightlift_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion

                #region :relax
                case "relajar":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SPA") && !Session.GetHabbo().HasFuse("fuse_owner"))
                        {
                            Session.SendWhisper("No te encuentras en el SPA!");
                            return true;
                        }
                        if (Session.GetRoleplay().Relaxing)
                        {
                            Session.SendWhisper("Ya te estas relajando!");
                            return true;
                        }
                        if (Session.GetRoleplay().BeingMassaged)
                        {
                            Session.SendWhisper("Ya estas recibiendo un masaje!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Energy == 100)
                        {
                            Session.SendWhisper("Tu energia esta completa!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("massage_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("massage_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["massage_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["massage_cooldown"] + "/10]");
                            return true;
                        }
                        #endregion

                        #region Chair Condition

                        RoomUser User = null;
                        User = Session.GetHabbo().GetRoomUser();
                        RoomItem Inter = Session.GetRoleplay().GetNearItem("val14_recchair", 0);
                        if (Inter == null)
                        {
                            Session.SendWhisper("No te encuentras en una silla de tratamiento!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Relajando cuerpo cansado*", 31);
                        Session.GetRoleplay().relaxTimer = new relaxTimer(Session);
                        Session.GetRoleplay().Relaxing = true;
                        Session.GetRoleplay().MultiCoolDown["massage_cooldown"] = 10;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #region Education
                #region :startlearn
                case "leer":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SCHOOL"))
                        {
                            Session.SendWhisper("Debes estar en la biblioteca para poder leer!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Learning)
                        {
                            Session.SendWhisper("Ya estas leyendo!");
                            return true;
                        }
                        if (Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas trabajando!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("learning"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("learning", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["learning"] > 0)
                        {
                            Session.SendWhisper("Debes esperar para comenzar a leer de nuevo! [" + Session.GetRoleplay().MultiCoolDown["learning"] + "/5]");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Session.GetRoleplay().learningTimer = new learningTimer(Session);
                        Session.GetRoleplay().Learning = true;
                        Session.GetRoleplay().SaveStatusComponents("learning");
                        RoleplayManager.Shout(Session, "*Comenzo a leer*", 11);
                        Session.SendWhisper("Te restan " + Session.GetRoleplay().learningTimer.getTime() + " minutos para aprender un nuevo tema.");
                        Session.GetRoleplay().MultiCoolDown["learning"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                    }
                    return true;

                #endregion
                #region :stoplearn
                case "pararlectura":
                    {

                        #region Conditions
                        if (!Session.GetRoleplay().Learning)
                        {
                            Session.SendWhisper("No estas aprendiendo!");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SCHOOL"))
                        {
                            Session.SendWhisper("Debes estar en la escuela para hacer esto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("No puedes hacer esto por que stas trabajando!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("learning"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("learning", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["learning"] > 0)
                        {
                            Session.SendWhisper("Debes esperar para comenzar a leer de nuevo! [" + Session.GetRoleplay().MultiCoolDown["learning"] + "/5]");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Session.GetRoleplay().Learning = false;
                        Session.GetRoleplay().learningTimer.stopTimer();
                        RoleplayManager.Shout(Session, "*Dejo de leer*", 11);
                        Session.GetRoleplay().MultiCoolDown["learning"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                    }
                    return true;

                #endregion
                #endregion

                #region Vehicles
                #region :autos
                case "autos":
                    {

                        #region Condiciones
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("CARSHOP"))
                        {
                            Session.SendWhisper("No te encuentras en la tienda de autos!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("autos_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("autos_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["autos_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["autos_cooldown"] + "/10]");
                            return true;
                        }
                        #endregion

                        #region Ejecutamos
                        Session.SendNotif("<b>Autos Disponibles Actualmente:</b>\n" +
                            "Auto Perro $30,000\n" +
                            "Auto Conejo $30,000\n" +
                            "El Dorado $50,000\n" +
                            "Fireball $80,000\n" +
                            "Beetle $120,000\n" +
                            "Twizy-Azul/Rosa/Naranja $135,000\n" +
                            "Hubber $230,000");
                        return true;
                        #endregion
                    }
                #endregion
                #region :buycar
                case "comprarauto":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("CARSHOP"))
                        {
                            Session.SendWhisper("Necesitas ir a la automotriz para hacer esto.");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando invalido :comprarauto <modelo>.");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        if (Params[1].ToLower().Equals("perro"))
                        {
                            if (Session.GetHabbo().Credits < 30000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro un 'Perro Manchado' del 2014 [-$30,000]", 6);
                            RoleplayManager.GiveMoney(Session, -30000);
                            Session.GetRoleplay().Car = 48;
                            Session.GetRoleplay().SaveQuickStat("car", "48");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("conejo"))
                        {
                            if (Session.GetHabbo().Credits < 30000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro un 'Conejito Blanco' del 2014 [-$30,000]");
                            RoleplayManager.GiveMoney(Session, -30000);
                            Session.GetRoleplay().Car = 54;
                            Session.GetRoleplay().SaveQuickStat("car", "54");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("eldorado"))
                        {
                            if (Session.GetHabbo().Credits < 50000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro un 'Cadillac Eldorado' de 1980 [-$50,000]", 6);
                            RoleplayManager.GiveMoney(Session, -50000);
                            Session.GetRoleplay().Car = 21;
                            Session.GetRoleplay().SaveQuickStat("car", "21");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("fireball"))
                        {
                            if (Session.GetHabbo().Credits < 80000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro un 'Fireball Tuneado' de 1978 [-$80,000]", 6);
                            RoleplayManager.GiveMoney(Session, -80000);
                            Session.GetRoleplay().Car = 22;
                            Session.GetRoleplay().SaveQuickStat("car", "22");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("van"))
                        {
                            if (Session.GetHabbo().Credits < 100000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro una 'Van' del 2010 [-$100,000]", 6);
                            RoleplayManager.GiveMoney(Session, -100000);
                            Session.GetRoleplay().Car = 94;
                            Session.GetRoleplay().SaveQuickStat("car", "94");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("pickup"))
                        {
                            if (Session.GetHabbo().Credits < 100000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro una 'Pick Up' del 2010 [-$100,000]", 6);
                            RoleplayManager.GiveMoney(Session, -100000);
                            Session.GetRoleplay().Car = 105;
                            Session.GetRoleplay().SaveQuickStat("car", "105");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("beetle"))
                        {
                            if (Session.GetHabbo().Credits < 120000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro un 'Beetle' del 2016 [-$120,000]", 6);
                            RoleplayManager.GiveMoney(Session, -120000);
                            Session.GetRoleplay().Car = 69;
                            Session.GetRoleplay().SaveQuickStat("car", "69");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("twizy-azul"))
                        {
                            if (Session.GetHabbo().Credits < 135000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro un 'Twizy Azul' del 2030 [-$135,000]", 6);
                            RoleplayManager.GiveMoney(Session, -135000);
                            Session.GetRoleplay().Car = 3;
                            Session.GetRoleplay().SaveQuickStat("car", "3");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("twizy-rosa"))
                        {
                            if (Session.GetHabbo().Credits < 135000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro un 'Twizy Rosa' del 2030 [-$135,000]", 6);
                            RoleplayManager.GiveMoney(Session, -135000);
                            Session.GetRoleplay().Car = 17;
                            Session.GetRoleplay().SaveQuickStat("car", "17");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("twizy-naranja"))
                        {
                            if (Session.GetHabbo().Credits < 135000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro un 'Twizy Naranja' del 2030 [-$135,000]", 6);
                            RoleplayManager.GiveMoney(Session, -135000);
                            Session.GetRoleplay().Car = 18;
                            Session.GetRoleplay().SaveQuickStat("car", "18");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("hubber"))
                        {
                            if (Session.GetHabbo().Credits < 250000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de automovil.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compro una 'Hubber Blindada' del 2014 [-$150,000]", 6);
                            RoleplayManager.GiveMoney(Session, -250000);
                            Session.GetRoleplay().Car = 510;
                            Session.GetRoleplay().SaveQuickStat("car", "510");
                            return true;
                        }
                        Session.SendWhisper("El modelo de automovil que espesificaste no existe.");
                        return true;

                        #endregion

                    }
                #endregion
                #region :drive
                case "conducir":
                    {

                        #region Conditions

                        if (Session.GetRoleplay().Car <= 0)
                        {
                            Session.SendWhisper("No tienes un carro.");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("DRIVE"))
                        {
                            Session.SendWhisper("No se puede conducir en este lugar!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("car"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("car", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["car"] > 0)
                        {
                            Session.SendWhisper("Debes esperar para volver a usar tu automovil! - [" + Session.GetRoleplay().MultiCoolDown["car"] + "/350]");
                            return true;
                        }

                        #endregion

                        #region Execute

                        if (!Session.GetHabbo().GetRoomUser().FastWalking)
                        {
                            RoleplayManager.Shout(Session, "*Se subio a su automovil y lo arranco*", 25);
                            Session.GetHabbo().GetRoomUser().FastWalking = true;
                            Session.GetRoleplay().usingCar = true;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(Session.GetRoleplay().Car);
                        }
                        else
                        {
                            Session.GetHabbo().GetRoomUser().FastWalking = false;
                            Session.GetRoleplay().usingCar = false;
                            RoleplayManager.Shout(Session, "*Retiro las llaves de su automovil y dejo de conducir*", 25);
                            Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                        }
                        Session.GetRoleplay().MultiCoolDown["car"] = 120;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                    }
                    return true;


                #endregion
                #region :stopdrive
                case "pararconduccion":
                    {


                        #region Conditions

                        if (Session.GetRoleplay().Car <= 0)
                        {
                            Session.SendWhisper("No tienes un carro.");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("DRIVE"))
                        {
                            Session.SendWhisper("En este lugar no se puede manejar!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (!Session.GetHabbo().GetRoomUser().FastWalking)
                        {
                            Session.SendWhisper("Detente en la parada imaginaria.");
                            return true;
                        }

                        #endregion

                        #region Execute

                        Session.GetHabbo().GetRoomUser().FastWalking = false;
                        Session.GetRoleplay().usingCar = false;
                        RoleplayManager.Shout(Session, "*Se estaciono y retiro las llaves de su automovil*", 25);
                        Session.GetHabbo().GetRoomUser().ApplyEffect(0);

                        #endregion

                    }
                    return true;


                #endregion
                #region :plane
                case "volar":
                    {

                        #region Conditions

                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("PLANE"))
                        {
                            Session.SendWhisper("En este lugar no se puede volar!");
                            return true;
                        }
                        if (Session.GetRoleplay().Plane <= 0)
                        {
                            Session.SendWhisper("No tienes un avion.");
                            return true;
                        }
                        if (Session.GetRoleplay().Fuel <= 0)
                        {
                            Session.SendWhisper("No puedes hacer esto por que no tienes gasolina");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("plane_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("plane_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["plane_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["plane_cooldown"] + "/300]");
                            return true;
                        }

                        #endregion

                        #region Execute

                        if (!Session.GetHabbo().GetRoomUser().AllowOverride)
                        {
                            RoleplayManager.Shout(Session, "*Se subio a su avion y comenzo a volar*", 29);
                            Session.GetRoleplay().planeUsing = Session.GetRoleplay().Plane;
                            Session.GetRoleplay().usingPlane = true;
                            Session.GetHabbo().GetRoomUser().AllowOverride = true;
                            Session.GetRoleplay().planeTimer = new planeTimer(Session);
                            Session.GetHabbo().GetRoomUser().ApplyEffect(Session.GetRoleplay().Plane);
                        }
                        else
                        {
                            Session.GetRoleplay().usingPlane = false;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                            Session.GetHabbo().GetRoomUser().AllowOverride = false;
                            Session.GetRoleplay().planeUsing = 0;

                            RoleplayManager.Shout(Session, "*Se subio a su avion y comenzo a volar*", 29);
                        }
                        Session.GetRoleplay().MultiCoolDown["plane_cooldown"] = 300;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                    }
                    return true;


                #endregion
                #region :aviones
                case "aviones":
                    {

                        #region Condiciones
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("PLANESHOP"))
                        {
                            Session.SendWhisper("Debes estar en el Concesionario de Aviones para hacer esto! Sala ID: 81");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("armas_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("armas_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["armas_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["armas_cooldown"] + "/10]");
                            return true;
                        }
                        #endregion

                        #region Ejecutamos
                        Session.SendNotif("<b>Aviones Disponibles Actualmente:</b><br>Avi√≥n Rojo - $150,000<br>Avi√≥n Az√∫l - $155,000<br>Avi√≥n Purpura - $160,000<br>Avi√≥n Verde - $165,000<br>Avi√≥n Dorado - $170,000<br><br>Para comprar los aviones escribe ' :compraravion <color> '.");
                        return true;
                        #endregion
                    }
                #endregion
                #region :buyplane
                case "compraravion":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("PLANESHOP"))
                        {
                            Session.SendWhisper("No te encuentras en el aeropuerto.");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No pudes hacer esto por que estas en prision.");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto.");
                            return true;
                        }

                        #endregion

                        #region Execute
                        if (Params[1].ToLower().Equals("rojo"))
                        {
                            if (Session.GetHabbo().Credits < 150000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de avion.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compraste un avion rojo [-$150,000][+20,000 DE GASOLINA]*", 6);
                            Session.GetRoleplay().Plane = 175;
                            Session.GetRoleplay().Fuel += 20000;
                            Session.GetRoleplay().SaveQuickStat("plane", "175");
                            Session.GetRoleplay().SaveQuickStat("fuel", "" + 20000);
                            RoleplayManager.GiveMoney(Session, -150000);
                            return true;
                        }
                        if (Params[1].ToLower().Equals("azul"))
                        {
                            if (Session.GetHabbo().Credits < 155000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de avion.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compraste un avion azul [-$155,000][+20,000 DE GASOLINA]*", 6);
                            Session.GetRoleplay().Plane = 176;
                            Session.GetRoleplay().Fuel += 20000;
                            Session.GetRoleplay().SaveQuickStat("plane", "176");
                            Session.GetRoleplay().SaveQuickStat("fuel", "" + 20000);
                            RoleplayManager.GiveMoney(Session, -155000);
                            return true;
                        }
                        if (Params[1].ToLower().Equals("purpura"))
                        {
                            if (Session.GetHabbo().Credits < 160000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de avion.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compraste un avion purpura [-$160,000][+20,000 DE GASOLINA]*", 6);
                            Session.GetRoleplay().Plane = 518;
                            Session.GetRoleplay().Fuel += 20000;
                            Session.GetRoleplay().SaveQuickStat("plane", "518");
                            Session.GetRoleplay().SaveQuickStat("fuel", "" + 20000);
                            RoleplayManager.GiveMoney(Session, -160000);
                            return true;
                        }
                        if (Params[1].ToLower().Equals("verde"))
                        {
                            if (Session.GetHabbo().Credits < 165000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de avion.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compraste un avion verde [-$165,000][+20,000 DE GASOLINA]*", 6);
                            Session.GetRoleplay().Plane = 519;
                            Session.GetRoleplay().Fuel += 20000;
                            Session.GetRoleplay().SaveQuickStat("plane", "519");
                            Session.GetRoleplay().SaveQuickStat("fuel", "" + 20000);
                            RoleplayManager.GiveMoney(Session, -165000);
                            return true;
                        }
                        if (Params[1].ToLower().Equals("dorado"))
                        {
                            if (Session.GetHabbo().Credits < 170000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de avion.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compraste un avion dorado [-$170,000][+20,000 DE GASOLINA]*", 6);
                            Session.GetRoleplay().Plane = 520;
                            Session.GetRoleplay().Fuel += 20000;
                            Session.GetRoleplay().SaveQuickStat("plane", "520");
                            Session.GetRoleplay().SaveQuickStat("fuel", "" + 20000);
                            RoleplayManager.GiveMoney(Session, -170000);
                            return true;
                        }
                        if (Params[1].ToLower().Equals("staff"))
                        {
                            if (Session.GetHabbo().Rank <= 3)
                            {
                                Session.SendWhisper("No tienes el rango necesario para comprar este avi√≥n.");
                                return true;
                            }
                            if (Session.GetHabbo().Credits < 150000)
                            {
                                Session.SendWhisper("No tienes el dinero suficiente para comprar este modelo de avion.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Compraste un avion Staff [-$150,000][+20,000 DE GASOLINA]*", 6);
                            Session.GetRoleplay().Plane = 521;
                            Session.GetRoleplay().Fuel += 20000;
                            Session.GetRoleplay().SaveQuickStat("plane", "521");
                            Session.GetRoleplay().SaveQuickStat("fuel", "" + 20000);
                            RoleplayManager.GiveMoney(Session, -150000);
                            return true;
                        }
                        Session.SendWhisper("El modelo de avi√≥n que espesificaste no existe.");
                        return true;
                      
                        #endregion
                    }
                #endregion
                #region :buyfuel <amnt>
                case "combustible":
                    {

                        #region Params
                        int Amnt = 0;
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :combustible <cantidad>");
                            return true;
                        }
                        else
                        {
                            Amnt = Convert.ToInt32(Params[1]);
                        }
                        double dub = Amnt / 2 + Amnt / 5;
                        double Conv = Math.Round(dub, 0);
                        int Pay = Convert.ToInt32(Conv);
                        #endregion

                        #region Conditions

                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("PLANESHOP"))
                        {
                            Session.SendWhisper("No te encuentras en el aeropuerto!");
                            return true;
                        }
                        if (Amnt < 50)
                        {
                            Session.SendWhisper("Lo minimo que puedes comprar de gasolina es 50!");
                            return true;
                        }
                        if (Session.GetHabbo().Credits < Pay)
                        {
                            Session.SendWhisper("Necesitas $" + Pay + " para " + Amnt + " de gasolina!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Compraste " + Amnt + " de gasolina por $" + Pay + " [-$" + Pay + "]*", 6);
                        Session.GetRoleplay().Fuel += Amnt;
                        Session.GetRoleplay().SaveQuickStat("fuel", "" + Session.GetRoleplay().Fuel);
                        RoleplayManager.GiveMoney(Session, -Pay);
                        #endregion

                        return true;
                    }
                #endregion
                #endregion

                #endregion

                #region Minigames Commands

                #region Color Wars [STAFF] (2)

                #region :cwjoin
                case "cwjoin":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Este comando es solo para STAFFS!");
                            return true;
                        }

                        string team = Params[1];
                        Team Team = ColourManager.GetTeamByName(team);

                        if (Team != null)
                        {
                            Session.SendWhisper("Acabas de entrar al equipo " + Team.Colour + "!");
                            ColourManager.AddPlayerToTeam(Session, team);
                            return true;
                        }

                        return true;
                    }
                #endregion

                #region :cwassign
                case "cwassign":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Session.SendWhisper("Este comando es solo para STAFFS!");
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Este comando es solo para STAFFS!");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        string team = Params[2];
                        Team Team = ColourManager.GetTeamByName(team);

                        if (Team != null)
                        {
                            Session.Shout("*Uso sus poderes divinos para asignar a " + TargetSession.GetHabbo().UserName + " en el equipo " + Team.Colour + "*");
                            ColourManager.ForceAddPlayerToTeam(TargetSession, team);
                            return true;
                        }

                        return true;
                    }
                #endregion

                #endregion

                #region Zombie Infection (4)
                #region :startinfection
                case "startinfection":
                    {

                        #region Condition
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Este comando solo es para STAFFS!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        HabboHotel.Roleplay.Minigames.ZombieInfection.StartGlobalInfection();

                        #endregion

                        return true;
                    }
                #endregion
                #region :stopinfection
                case "stopinfection":
                    {

                        #region Condition
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Este comando solo es para STAFFS!");
                            return true;
                        }
                        #endregion

                        #region Execute


                        HabboHotel.Roleplay.Minigames.ZombieInfection.StopGlobalInfection();

                        #endregion

                        return true;
                    }
                #endregion
                #region :bite
                case "morder":
                    {

                        #region Vars / Params
                        string Username = Params[1];
                        GameClient TargetSession = null;
                        RoomUser Target = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :morder <usuario>");
                            return true;
                        }
                        else
                        {
                            TargetSession = RoleplayManager.GenerateSession(Username);
                            Target = TargetSession.GetHabbo().GetRoomUser();
                        }
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            if (TargetSession == null)
                            {
                                Session.SendWhisper("El usuario esta desconectado o no se encuentra en la sala!");
                                return true;
                            }
                            if (TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom && !RoleplayManager.BypassRights(Session))
                            {
                                Session.SendWhisper("El usuario esta desconectado o no se encuentra en la sala!");
                                return true;
                            }
                            if (!RoleplayManager.ZombieInfection)
                            {
                                Session.SendWhisper("El evento de infeccion Zombie no esta activo!");
                                return true;
                            }
                            if (!RoleplayManager.BypassRights(Session))
                            {
                                if (!Session.GetRoleplay().Infected)
                                {
                                    Session.SendWhisper("Necesitas ser un Zombie para hacer esto!");
                                    return true;
                                }
                                if (!TargetSession.GetRoleplay().inZombieInfection)
                                {
                                    Session.SendWhisper("Este usuario no esta participando en el evento de infeccion Zombie!");
                                    return true;
                                }
                            }
                            if (TargetSession.GetRoleplay().Infected)
                            {
                                Session.SendWhisper("Este usuario ya es un Zombie!");
                                return true;
                            }
                            if (RoleplayManager.UserDistance(TargetSession, Session) > 1 && !RoleplayManager.BypassRights(Session))
                            {
                                Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                                return true;
                            }
                        }
                        #endregion

                        #region Exectue


                        Session.GetRoleplay().Infection_Pts += 1;
                        Session.GetRoleplay().SaveQuickStat("infection_pts", Session.GetRoleplay().Infection_Pts + "");
                        RoleplayManager.Shout(Session, "*Mordio a " + TargetSession.GetHabbo().UserName + " convirtiendolo en un Zombie [+1 Puntos de Infeccion]*", 9);
                        TargetSession.GetRoleplay().Infected = true;
                        TargetSession.GetRoleplay().MakeZombie();
                        TargetSession.SendNotifWithScroll("Fuiste infectado por un Zombie!, corre y muerde tantos ciudadanos puedas para conseguir premios y puntos!\n\n Comandos: \n\n - :morder <ciudadano>\n");
                        HabboHotel.Roleplay.Minigames.ZombieInfection.CheckForWin(Session);

                        #endregion

                        return true;
                    }
                #endregion
                #region :cure
                case "curar":
                    {

                        #region Vars / Params
                        string Username = Params[1];
                        GameClient TargetSession = null;
                        RoomUser Target = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ZombieInfection)
                        {
                            Session.SendWhisper("No estas en una infeccion Zombie!");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :curar <ciudadano>");
                            return true;
                        }
                        else
                        {
                            TargetSession = RoleplayManager.GenerateSession(Username);
                            Target = TargetSession.GetHabbo().GetRoomUser();
                        }
                        if (Session.GetRoleplay().Infected)
                        {
                            Session.SendWhisper("Necesitas ser humano para hacer esto!");
                            return true;
                        }
                        if (!TargetSession.GetRoleplay().inZombieInfection)
                        {
                            Session.SendWhisper("Este usuario no esta participando en la infeccion Zombie!");
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no esta conectado o no se encuentra en la sala!");
                            return true;
                        }
                        if (TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisper("El usuario no esta conectado o no se encuentra en la sala!");
                            return true;
                        }
                        if (!TargetSession.GetRoleplay().Infected)
                        {
                            Session.SendWhisper("Este usuario no es un Zombie!");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(TargetSession, Session) > 1)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Exectue


                        Session.GetRoleplay().Infection_Pts += 1;
                        Session.GetRoleplay().SaveQuickStat("infection_pts", Session.GetRoleplay().Infection_Pts + "");
                        RoleplayManager.Shout(Session, "*Curo a " + TargetSession.GetHabbo().UserName + " del virus de infeccion Zombie [+1 Infection Pts]*", 8);
                        RoleplayManager.Shout(TargetSession, "*Grita del dolor mientras termina su recuperacion", 11);
                        TargetSession.GetRoleplay().Infected = false;
                        if (TargetSession.GetRoleplay().FigBeforeSpecial != null)
                        {
                            TargetSession.GetHabbo().Look = TargetSession.GetRoleplay().FigBeforeSpecial;
                            TargetSession.GetHabbo().Motto = TargetSession.GetRoleplay().MottBeforeSpecial;
                        }

                        TargetSession.GetRoleplay().FigBeforeSpecial = null;
                        TargetSession.GetRoleplay().RefreshVals();

                        HabboHotel.Roleplay.Minigames.ZombieInfection.CheckForWin(Session);


                        #endregion

                        return true;
                    }
                #region

                #endregion


                #endregion
                #endregion

                #region Purge (2)
                #region :startpurge
                case "startpurge":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Este comando solo es para miembros de entretenimiento!");
                            return true;
                        }
                        #endregion

                        string sendmsg = "";
                        sendmsg += "==========================\nComenzando Evento!\n==========================\n";
                        sendmsg += "Evento: Purga\n\n";
                        sendmsg += "-Que es este evento?\n";
                        sendmsg += "Es sencillo durante este corto tiempo, no existe la ley, todo eso desaparecio ";
                        sendmsg += "disfruta este ligero tiempo, ve a robar, asesinar, haz lo que te plasca!";
                        sendmsg += "\n\nDisfruta el evento!";

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {

                                if (client == null)
                                    continue;

                                if (client.GetRoleplay() == null)
                                    continue;

                                if (JobManager.validJob(client.GetRoleplay().JobId, client.GetRoleplay().JobRank))
                                {
                                    if (client.GetRoleplay().JobId == 3 || client.GetRoleplay().JobId == 5)
                                    {
                                        client.GetRoleplay().StopWork();
                                    }
                                }

                                /*client.GetRoleplay().JailTimer = 0;
                                client.GetRoleplay().JailedSeconds = 0;
                                client.GetRoleplay().SaveStatusComponents("jailed");*/


                                if (client.GetRoleplay().Wanted > 0)
                                {
                                    client.GetRoleplay().Wanted = 0;
                                    client.GetRoleplay().SaveQuickStat("wanted", "0");
                                }

                                client.SendNotifWithScroll(sendmsg);

                            }
                        }



                        if (PurgeManager.MainTimer == null)
                        {
                            PurgeManager.MainTimer = new PurgeTimer();
                        }

                        PurgeManager.Running = true;

                        RoleplayManager.WantedListData.Clear();
                        RoleplayManager.PurgeTime = true;


                        return true;
                    }
                #endregion
                #region :stoppurge
                case "stoppurge":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Este comando solo es para miembros del equipo de entretenimiento!");
                            return true;
                        }
                        #endregion

                        string sendmsg = "";
                        sendmsg += "==========================\nEvento Finalizado!\n==========================\n";
                        sendmsg += "Evento: Purga\n";
                        sendmsg += "El evento de purga acaba de finalizar!";

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {

                                if (client == null)
                                    continue;

                                if (client.GetRoleplay() == null)
                                    continue;

                                // if (jobManager.JobRankData[client.GetRoleplay().JobId, client.GetRoleplay().JobRank].hasRights("police"))
                                // {
                                //     client.GetRoleplay().StopWork();
                                // }

                                // if (client.GetRoleplay().Wanted > 0)
                                // {
                                //     client.GetRoleplay().Wanted = 0;
                                //     client.GetRoleplay().SaveQuickStat("wanted", "0");
                                // }


                                client.SendNotifWithScroll(sendmsg);

                            }
                        }

                        // Misc.WantedListData.Clear();
                        PurgeManager.Running = false;
                        RoleplayManager.PurgeTime = false;

                        return true;
                    }
                #endregion
                #endregion

                #endregion

                #region Corporations / Jobs / Working

                #region Global Commands (2)

                #region :corplist
                case "empresas":
                    {

                        string corps = "-----------------------------------------\n";
                        corps += "Lista de Empresas: \n";

                        foreach (Job Job in JobManager.JobData.Values)
                        {
                            corps += "-----------------------------------------\n";
                            corps += "ID de la Empresa: " + Job.Id + "\n";
                            corps += "Empresa: " + Job.Name + "\n";
                            corps += "Lugares: " + Job.Headquarters + "\n";

                        }
                        corps += "-----------------------------------------\n";
                        Session.SendNotifWithScroll(corps);

                        return true;
                    }
                #endregion
                    
                #endregion

                #region Specialised Commands (2)

                #region :radio
                case "radio":
                case "r":
                    {
                        if (Session.GetRoleplay().RadioOff)
                        {
                            Session.SendWhisper("La radio esta apagada!");
                            return true;
                        }
                        #region Execute
                        string msg = ChatCommandHandler.MergeParams(Params, 1);
                        Radio.send(msg, Session);
                        #endregion
                        return true;
                    }
                #endregion

                #region :fuga
                case "fuga":
                    {
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No se puede completar esta accion por que estas muerto", 34);
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisperBubble("No se puede completar esta accion por que estas en prision", 34);
                            return true;
                        }
                        if (Plus.GetGame().JailBreak != null)
                        {
                            Session.SendWhisperBubble("La prision ya fue abierta!", 34);
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("JAIL"))
                        {
                            Session.SendWhisperBubble("No se puede completar esto por que no estas en la prision", 34);
                            return true;
                        }
                        RoomUser Ruser = Session.GetHabbo().GetRoomUser();
                        RoomItem BanzaiTile = Session.GetRoleplay().GetNearItem("bb_rnd_tele", 0);

                        if (Ruser == null)
                            return true;

                        if (BanzaiTile == null)
                        {
                            Session.SendWhisperBubble("No se puede completar esto por que no esta en el punto de escape", 34);
                            return true;
                        }

                        // Execute
                        Plus.GetGame().JailBreak = new JailBreak(Session, BanzaiTile.X, BanzaiTile.Y, BanzaiTile.RoomId, BanzaiTile);
                        RoleplayManager.Shout(Session, "*Saco un peque√±o cuchillo y comenzo a cortar los alambres de la prision*", 24);
                        Radio.send("Al parecer hay informes sobre un criminal que trata de escapar de prision " + Session.GetHabbo().CurrentRoom.RoomData.Name + " [ID: " + Session.GetHabbo().CurrentRoomId + "]! Todas las unidades respondan!", Session, true);
                        return true;
                    }
                #endregion

                #region :toggleradio
                case "modoradio":
                    {
                        if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                            return true;
                        }

                        if (Radio.canUseDept(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank) == "NO")
                        {
                            Session.SendWhisper("No puedes hacer esto!");
                            return true;
                        }

                        #region Execute
                        bool RadioOff = Session.GetRoleplay().RadioOff;

                        if (RadioOff)
                        {
                            Session.GetRoleplay().RadioOff = false;
                            RoleplayManager.Shout(Session, "*Activo el radio*", 30);
                        }
                        else
                        {
                            Session.GetRoleplay().RadioOff = true;
                            RoleplayManager.Shout(Session, "*Desactivo el radio*", 30);
                        }
                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #region Corporation List (4)

                #region Food Handling (2)

                #region :serve <food>
                case "servir":
                    {


                        #region Params

                        RoomUser User = Session.GetHabbo().GetRoomUser();

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;
                        string Food = "";
                        Food FoodItem = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :servir <comida>");
                            return true;
                        }
                        else
                        {
                            Food = Convert.ToString(Params[1]);
                            FoodItem = Substances.GetFoodByUName(Food);
                        }
                        if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                            return true;
                        }
                        if (!Session.GetRoleplay().JobHasRights("diner") && !RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esto!");
                            return true;
                        }
                        if (FoodItem == null)
                        {
                            Session.SendWhisper("La comida '" + Food + "' no existe!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        if (FoodItem.Drink == "true")
                        {
                            Session.SendWhisper("No puedes servir bebidas!");
                            return true;
                        }

                        RoomItem Plate = null;
                        Plate = RoleplayManager.GetNearItem(User, "diner_tray_0", 1);

                        if (Plate == null)
                        {
                            Session.SendWhisper("No hay platos en esta zona!");
                            return true;
                        }

                        RoleplayManager.ReplaceItem(Session, Plate, FoodItem.Item_Name);

                        Session.Shout("*Servir " + FoodItem.DisplayName + "*");

                        #endregion

                        return true;
                    }
                #endregion

                #region :offerdrink <user> <drinkid>
                case "bebida":
                    {

                        #region Params

                        RoomUser User = Session.GetHabbo().GetRoomUser();

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;
                        string Food = "";
                        Food FoodItem = null;
                        GameClient TargetSession = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :bebida <usuario> <bebida>");
                            return true;
                        }
                        else
                        {
                            TargetSession = RoleplayManager.GenerateSession(Params[1]);
                            Food = Convert.ToString(Params[2]);
                            FoodItem = Substances.GetFoodByUName(Food);
                        }
                        if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                            return true;
                        }
                        if (!Session.GetRoleplay().JobHasRights("pub") && !RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (FoodItem == null)
                        {
                            Session.SendWhisper("La bebida '" + Food + " no existe!");
                            return true;
                        }
                        if (FoodItem.Drink == "false")
                        {
                            Session.SendWhisper("Este no es un item para beber!");
                            return true;
                        }
                        if (!RoleplayManager.CanInteract(Session, TargetSession, true))
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        //RoleplayManager.ReplaceItem(Session, Plate, FoodItem.Item_Name);

                        Session.Shout("*Ofrecio a " + Session.GetHabbo().UserName + " la bebida " + FoodItem.DisplayName + "*");
                        Session.GetRoleplay().OfferDrink(TargetSession, Convert.ToUInt32(FoodItem.DrinkId));

                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #region Police (15)

                #region :Patrulla 
                case "patrulla":
                    {

                        #region Conditions

                        if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                            return true;
                        }
                        bool isclose = false;
                        if (!Session.GetRoleplay().JobHasRights("police")
                            && !Session.GetRoleplay().JobHasRights("swat")
                            && !Session.GetRoleplay().JobHasRights("ssec"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("DRIVE"))
                        {
                            Session.SendWhisper("No se puede conducir en este lugar!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {


                            if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("police"))
                            {
                                Session.SendWhisper("No puedes hacer esto en esta sala.");
                                return true;
                            }
                            if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("western"))
                            {
                                Session.SendWhisper("Solo puedes hacer esto en ciertas salas.");
                                return true;
                            }
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("patrulla"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("patrulla", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["patrulla"] > 0)
                        {
                            Session.SendWhisper("Debes esperar para volver a usar la patrulla! - [" + Session.GetRoleplay().MultiCoolDown["car"] + "/350]");
                            return true;
                        }

                        #endregion

                        #region Execute

                        if (!Session.GetHabbo().GetRoomUser().FastWalking)
                        {
                            RoleplayManager.Shout(Session, "*Se subio al automovil de la policia y lo arranco*", 25);
                            Session.GetHabbo().GetRoomUser().FastWalking = true;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(19);
                        }
                        else
                        {
                            Session.GetHabbo().GetRoomUser().FastWalking = false;
                            RoleplayManager.Shout(Session, "*Retiro las llaves del automovil de la policia y dejo de conducir*", 25);
                            Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                        }
                        Session.GetRoleplay().MultiCoolDown["patrulla"] = 20;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                    }
                    return true;


                #endregion

                #region :EstacionarPatrulla
                case "dejarpatrulla":
                    {


                        #region Conditions

                        if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                            return true;
                        }
                        bool isclose = false;
                        if (!Session.GetRoleplay().JobHasRights("police")
                            && !Session.GetRoleplay().JobHasRights("swat")
                            && !Session.GetRoleplay().JobHasRights("ssec"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("DRIVE"))
                        {
                            Session.SendWhisper("En este lugar no se puede manejar!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (!Session.GetHabbo().GetRoomUser().FastWalking)
                        {
                            Session.SendWhisper("Detente en la parada imaginaria.");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {


                            if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("police"))
                            {
                                Session.SendWhisper("No puedes hacer esto en esta sala.");
                                return true;
                            }
                            if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("western"))
                            {
                                Session.SendWhisper("Solo puedes hacer esto en ciertas salas.");
                                return true;
                            }
                        }

                        #endregion

                        #region Execute

                        Session.GetHabbo().GetRoomUser().FastWalking = false;
                        RoleplayManager.Shout(Session, "*Se estaciono y retiro las llaves de la patrulla*", 25);
                        Session.GetHabbo().GetRoomUser().ApplyEffect(0);

                        #endregion

                    }
                    return true;


                #endregion

                #region :warn x <reason>
                case "advertencia":
                    {
                        #region Generate Instances / Sessions / Vars
                        string Target = Convert.ToString(Params[1]);
                        string Msg = MergeParams(Params, 2);
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (TargetSession != null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Targ = TargetSession.GetHabbo().GetRoomUser();
                            Actor = Session.GetHabbo().GetRoomUser();
                        }
                        else
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Police Conditions

                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("gov") 
                            && !Session.GetRoleplay().JobHasRights("swat"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("police"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("western"))
                        {
                            Session.SendWhisper("Solo puedes hacer esto en ciertas salas.");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoomUser u = Session.GetHabbo().GetRoomUser();
                        RoomUser u2 = TargetSession.GetHabbo().GetRoomUser();

                        RoleplayManager.Shout(Session, "*Envio a " + TargetSession.GetHabbo().UserName + " una advertencia*", 28);

                        string view = "";
                        view += "---- Recibiste una Advertencia ----\n";
                        view += "De: " + Session.GetHabbo().UserName + "\n";
                        view += "Titulo: - Precaucion\n";
                        view += "Enviado: " + DateTime.Now + " (Tiempo del Servidor)\n\n";
                        view += "Mensaje: \n";
                        view += Msg + "\n\n";
                        view += "-" + Session.GetHabbo().UserName;

                        TargetSession.SendNotifWithScroll(view);
                        #endregion

                        return true;
                    }
                #endregion

                #region :backup
                case "apoyo":
                    {

                        #region Conditions

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("gov") 
                            && !Session.GetRoleplay().JobHasRights("swat")
                            && !Session.GetRoleplay().JobHasRights("spriv")
                            && !Session.GetRoleplay().JobHasRights("ssec")
                            && !Session.GetRoleplay().JobHasRights("farmas"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("backup_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("backup_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["backup_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["backup_cooldown"] + "/5]");
                            return true;
                        }
                        Radio.send("El oficial " + Session.GetHabbo().UserName + " solicita apoyo en " + Session.GetHabbo().CurrentRoom.RoomData.Name + " [ID: " + Session.GetHabbo().CurrentRoomId + "], todas las unidades respondan!", Session, true);
                        #endregion

                        return true;
                    }
                #endregion

                #region :spray x
                case "spray":
                    {

                        #region Generate Instances / Sessions / Vars
                        string Target = null;
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisperBubble("Comando invalido! :spray <usuario>", 0);
                            return true;
                        }
                        else
                        {
                            Target = Convert.ToString(Params[1]);
                        }

                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (RoleplayManager.CanInteract(Session, TargetSession, true))
                        {
                            Targ = TargetSession.GetHabbo().GetRoomUser();
                            Actor = Session.GetHabbo().GetRoomUser();
                        }
                        else
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Police Conditions

                        bool isclose = false;

                        if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            Session.SendWhisperBubble("Tu empleo no permite esto!", 0);
                            return true;
                        }

                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("swat")
                            && !Session.GetRoleplay().JobHasRights("spriv")
                            && !Session.GetRoleplay().JobHasRights("ssec")
                            && !Session.GetRoleplay().JobHasRights("farmas"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Targ.Frozen)
                        {
                            Session.SendWhisper("El usuario ya esta paralizado!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Distance Conditions
                        if (RoleplayManager.Distance(Pos1, Pos2) >= 5)
                        {
                            RoleplayManager.Shout(Session, "*Intento lanzar spray a " + TargetSession.GetHabbo().UserName + " pero fallo*");
                            return true;
                        }

                        if (RoleplayManager.Distance(Pos1, Pos2) <= 4)
                        {
                            isclose = true;
                        }
                        else if (RoleplayManager.Distance(Pos1, Pos2) >= 10)
                        {
                            Session.SendWhisper("Debe estar mas cerca de ti!");
                            return false;
                        }
                        #endregion

                        #region Execute

                        if (isclose)
                        {

                            RoleplayManager.Shout(Session, "*Disparo su spray hacia " + TargetSession.GetHabbo().UserName + " causando que se detenga*", 28);
                            Targ.ApplyEffect(53);
                            Session.GetRoleplay().EffectSeconds = 15;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(592);
                            Targ.Frozen = true;

                        }

                        #endregion

                        return true;
                    }
                #endregion

                #region :locate x
                case "localizar":
                    {

                        #region Generate Instances / Sessions / Vars
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;

                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no esta conectado!");
                            return true;
                        }
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;
                        #endregion

                        #region Police Conditions
                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("swat"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("locate_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("locate_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["locate_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["locate_cooldown"] + "/60]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        bool found = false;
                        Random Rand = new Random();
                        int Chance = Rand.Next(1, 100);

                        if (Chance <= 25)
                        {
                            found = true;
                        }
                        Session.Shout("*Envio un mensaje para localizar a " + TargetSession.GetHabbo().UserName + "*");

                        if (found == true)
                        {
                            if (TargetSession.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                            {
                                Session.SendWhisper("[Mensaje Policial]: Localizamos con exito a " + TargetSession.GetHabbo().UserName + " sin embargo se encuentra en una sala donde no podemos hacer nada! Intenta mas tarde!");
                            }
                            else if (TargetSession.GetHabbo().CurrentRoom.RoomData.Description.Contains("TURF"))
                            {
                                Session.SendWhisper("[Mensaje Policial]: Localizamos con exito a " + TargetSession.GetHabbo().UserName + " sin embargo se encuentra en un terreno! Intenta mas tarde!");
                            }
                            else
                            {
                                Session.SendWhisper("[Mensaje Policial]: Localizamos con exito a " + TargetSession.GetHabbo().UserName + ". En la sala " + TargetSession.GetHabbo().CurrentRoom.RoomData.Name + " [" + TargetSession.GetHabbo().CurrentRoomId + "]");
                            }
                            found = false;
                        }
                        else
                        {
                            Session.SendWhisper("[Mensaje Policial]: No pudimos localizar a este usuario ya que tenemos poca informacion sobre el, intentalo mas tarde!");
                        }

                        Session.GetRoleplay().MultiCoolDown["locate_cooldown"] = 60;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion

                #region :addwanted
                case "agregarbuscado":
                    {

                        #region Params
                        string Username = "";
                        GameClient Target = null;
                        int Time = 0;
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :agregarbuscado <usuario> <tiempo>");
                            return true;
                        }
                        else
                        {
                            Username = Params[1].ToString();
                            Time = Convert.ToInt32(Params[2]);
                            Target = RoleplayManager.GenerateSession(Username);
                        }

                        #region Null Checks
                        if (!RoleplayManager.CanInteract(Session, Target, false))
                        {
                            Session.SendWhisperBubble("El usuario no fue encontrado!");
                            return true;
                        }
                        #endregion

                        #endregion

                        #region Police Conditions

                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("swat"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (Time <= 0)
                        {
                            Session.SendWhisper("Tiempo no valido!");
                            return true;
                        }
                        int MaxTime = 0;

                        if (JobManager.JobRankData[Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank].canFire())
                        {
                            MaxTime = 30;
                        }
                        else
                        {
                            MaxTime = 30;
                        }

                        if (Time > MaxTime)
                        {
                            Session.SendWhisper("Tu rango solo permite un tiempo maximo de " + MaxTime + " minutos!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        if (RoleplayManager.WantedListData.ContainsKey(Target.GetHabbo().UserName.ToLower()))
                        {
                            Target.GetRoleplay().Wanted = Time;
                            Target.GetRoleplay().SaveQuickStat("wanted", "" + Time);
                            RoleplayManager.Shout(Session, "*Cambio el tiempo de busqueda del usuario " + Target.GetHabbo().UserName + " a " + Time + " minutos*", 28);
                            RoleplayManager.WantedListData[Target.GetHabbo().UserName.ToLower()] = Time + "|" + 1;
                        }
                        else
                        {
                            lock (Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                foreach (GameClient mClient in Plus.GetGame().GetClientManager().Clients.Values)
                                {
                                    if (mClient == null)
                                        continue;
                                    if (mClient.GetHabbo() == null)
                                        continue;
                                    if (mClient.GetHabbo().CurrentRoom == null)
                                        continue;
                                    if (mClient.GetConnection() == null)
                                        continue;
                                    mClient.SendWhisperBubble("La policia esta buscando a " + Target.GetHabbo().UserName + ", ayudanos a encontrarl@", 33);
                                }
                            }
                            Target.GetRoleplay().Wanted = Time;
                            Target.GetRoleplay().SaveQuickStat("wanted", "" + Time);
                            RoleplayManager.WantedListData.TryAdd(Target.GetHabbo().UserName.ToLower(), Time + "|" + Convert.ToInt32(Target.GetHabbo().CurrentRoomId));
                            RoleplayManager.Shout(Session, "*Agrego a " + Target.GetHabbo().UserName + " a la lista de buscados por " + Time + " minutos*", 28);
                        }
                        #endregion

                        return true;
                    }
                #endregion

                #region :removewanted
                case "quitarbuscado":
                case "eliminarbuscado":
                case "deletebuscado":
                    {

                        #region Params
                        string Username = "";
                        GameClient Targ = null;
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :quitarbuscado <usuario>");
                            return true;
                        }
                        else
                        {
                            Username = Params[1].ToString();
                            Targ = RoleplayManager.GenerateSession(Username);
                        }
                        #region Null Checks
                        if (Targ == null)
                        {
                            Session.SendWhisper("El usuario no se encuentra en la sala!");
                            return true;
                        }
                        if (Targ.GetHabbo() == null)
                        {
                            Session.SendWhisper("El usuario no se encuentra en la sala!");
                            return true;
                        }

                        if (Targ.GetHabbo().GetRoomUser() == null)
                        {
                            Session.SendWhisper("El usuario no se encuentra en la sala!");
                            return true;
                        }
                        if (Targ.GetHabbo().CurrentRoom == null)
                        {
                            Session.SendWhisper("El usuario no se encuentra en la sala!");
                            return true;
                        }
                        #endregion
                        #endregion

                        #region Police Conditions

                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("swat"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!RoleplayManager.WantedListData.ContainsKey(Username.ToLower()))
                        {
                            Session.SendWhisper(Username.ToLower() + " el usuario no esta en la lista de buscados!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("removewanted_" + Username))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("removewanted_" + Username, 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["removewanted_" + Username] > 0)
                        {
                            Session.SendWhisper("Para evitar abusos, no puedes usar este comando por un tiempo! [" + Session.GetRoleplay().MultiCoolDown["removewanted_" + Username] + "/1000]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Targ.GetRoleplay().Wanted = 0;
                        Targ.GetRoleplay().SaveQuickStat("wanted", "0");

                        string wantedJunk = Targ.GetHabbo().UserName.ToLower();
                        RoleplayManager.WantedListData.TryRemove(Targ.GetHabbo().UserName.ToLower(), out wantedJunk);

                        RoleplayManager.Shout(Session, "*Quito a " + Username.ToLower() + " de la lista de buscados*", 28);
                        Session.GetRoleplay().MultiCoolDown["removewanted_" + Username] = 1000;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        #endregion

                        return true;
                    }
                #endregion

                #region :clearwanted
                case "borrarlistabuscados":
                case "borrarlb":
                    {

                        #region Params
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;
                        #endregion

                        #region Police Conditions
                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("swat"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }

                        #endregion

                        #region Execute
                        try
                        {
                            lock (RoleplayManager.WantedListData)
                            {
                                lock (Plus.GetGame().GetClientManager().Clients.Values)
                                {
                                    RoleplayManager.WantedListData.Clear();
                                    foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                                    {

                                        client.GetRoleplay().Wanted = 0;
                                        client.GetRoleplay().SaveQuickStat("wanted", "0");

                                    }
                                }
                            }


                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                dbClient.RunFastQuery("UPDATE rp_stats SET wanted = 0 WHERE wanted > 0");
                            }

                            RoleplayManager.Shout(Session, "*Limpio la lista de buscados*", 28);
                        }
                        catch (Exception) { }
                        #endregion

                        return true;
                    }
                #endregion

                #region :wantedlist
                case "buscados":
                    {

                        string Wantedlist = "---- Lista de Buscados ----\n";

                        foreach (KeyValuePair<string, string> User in RoleplayManager.WantedListData)
                        {
                            string Name = User.Key;
                            string[] Split = User.Value.Split('|');
                            int Time = 5;
                            int LastSeen = 1;

                            Time = Convert.ToInt32(Split[0]);
                            LastSeen = Convert.ToInt32(Split[1]);

                            string RoomName = "";

                            Room Room = null;
                            Room = RoleplayManager.GenerateRoom(Convert.ToUInt32(LastSeen));
                            if (Room != null)
                            {
                                RoomName = Room.RoomData.Name;
                            }

                            Wantedlist += "Usuario: " + Name + "\n";
                            Wantedlist += "Buscado por: " + Time + "minutos\n";
                            Wantedlist += "Visto por ultima vez: " + RoomName + " [" + LastSeen + "]\n\n";
                        }

                        Session.SendNotifWithScroll(Wantedlist);

                        return true;
                    }
                #endregion

                #region :unstun x
                case "desparalizar":
                    {

                        #region Generate Instances / Sessions / Vars
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (TargetSession != null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Targ = TargetSession.GetHabbo().GetRoomUser();
                            Actor = Session.GetHabbo().GetRoomUser();
                        }
                        else
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Police Conditions

                        bool isclose = false;
                        if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                            return true;
                        }
                        if (!Session.GetRoleplay().JobHasRights("police")
                            && !Session.GetRoleplay().JobHasRights("swat")
                            && !Session.GetRoleplay().JobHasRights("spriv")
                            && !Session.GetRoleplay().JobHasRights("ssec")
                            && !Session.GetRoleplay().JobHasRights("farmas"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Targ.Frozen)
                        {
                            Session.SendWhisper("El usuario no esta paralizado!");
                            return true;
                        }                       
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("police"))
                            {
                                Session.SendWhisper("No puedes hacer esto en esta sala.");
                                return true;
                            }
                            if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("western"))
                            {
                                Session.SendWhisper("Solo se permite hacer esto en ciertas salas.");
                                return true;
                            }
                        }
                        #endregion

                        #region Distance Conditions
                        if (RoleplayManager.Distance(Pos1, Pos2) <= 4)
                        {
                            isclose = true;
                        }
                        else if (RoleplayManager.Distance(Pos1, Pos2) >= 5)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return false;
                        }
                        #endregion

                        #region Execute

                        if (isclose)
                        {

                            RoleplayManager.Shout(Session, "*Desparalizo a " + TargetSession.GetHabbo().UserName + "*", 28);
                            Targ.ApplyEffect(0);
                            Session.GetRoleplay().EffectSeconds = 15;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(592);
                            Targ.CanWalk = true;
                            Targ.Frozen = false;
                            TargetSession.GetRoleplay().Cuffed = false;
                        }

                        #endregion

                        return true;
                    }
                #endregion

                #region :stun x
                case "paralizar":
                    {

                        #region Generate Instances / Sessions / Vars
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Invalid syntax: :stun x");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo() == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().GetRoomUser() == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().GetRoomUser().RoomId != Session.GetHabbo().GetRoomUser().RoomId)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        Targ = TargetSession.GetHabbo().GetRoomUser();
                        Actor = Session.GetHabbo().GetRoomUser();

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Police Conditions
                        if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                            return true;
                        }
                        bool isclose = false;
                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("swat")
                            && !Session.GetRoleplay().JobHasRights("spriv")
                            && !Session.GetRoleplay().JobHasRights("ssec")
                            && !Session.GetRoleplay().JobHasRights("farmas"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Targ.Frozen)
                        {
                            Session.SendWhisper("El usuario ya esta paralizado!");
                            return true;
                        }
                        if (Session.GetHabbo().GetRoomUser().Stunned)
                        {
                            Session.SendWhisper("No puedes hacer esto si est√°s paralizado!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {


                            if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("police"))
                            {
                                Session.SendWhisper("No puedes hacer esto en esta sala.");
                                return true;
                            }
                            if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("western"))
                            {
                                Session.SendWhisper("Solo puedes hacer esto en ciertas salas.");
                                return true;
                            }
                        }
                        #endregion

                        #region Distance Conditions
                        if (RoleplayManager.Distance(Pos1, Pos2) >= 5)
                        {
                            RoleplayManager.Shout(Session, "*Intento paralizar a " + TargetSession.GetHabbo().UserName + " pero fallo*");
                            return true;
                        }

                        if (RoleplayManager.Distance(Pos1, Pos2) <= 4)
                        {
                            isclose = true;
                        }
                        else if (RoleplayManager.Distance(Pos1, Pos2) >= 10)
                        {
                            Session.SendWhisper("Debe estar mas cerca de ti!");
                            return false;
                        }
                        #endregion

                        #region Execute

                        if (isclose)
                        {

                            RoleplayManager.Shout(Session, "*Disparo su arma paralizadora hacia " + TargetSession.GetHabbo().UserName + "*", 28);
                            Session.GetRoleplay().EffectSeconds = 15;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(592);
                            Targ.ApplyEffect(53);
                            Targ.CanWalk = false;
                            Targ.Frozen = true;
                            Targ.ClearMovement();
                            TargetSession.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + 10;
                            ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                            Packet.AppendInteger(10);
                            TargetSession.SendMessage(Packet);

                        }

                        #endregion

                        return true;
                    }
                #endregion

                #region :cuff x
                case "esposar":
                    {

                        #region Generate Instances / Sessions / Vars
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo() == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().GetRoomUser() == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().GetRoomUser().RoomId != Session.GetHabbo().GetRoomUser().RoomId)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        Targ = TargetSession.GetHabbo().GetRoomUser();
                        Actor = Session.GetHabbo().GetRoomUser();
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Police Conditions

                        bool isclose = false;

                        if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                            return true;
                        }

                        if (!Session.GetRoleplay().JobHasRights("police")
                            && !Session.GetRoleplay().JobHasRights("swat"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Targ.Frozen)
                        {
                            Session.SendWhisper("El usuario debe estar paralizado para hacer esto!");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().Cuffed)
                        {
                            Session.SendWhisper("Este usuario ya est√° esposado!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("police"))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("western"))
                        {
                            Session.SendWhisper("Solo puedes hacer esto en ciertas salas.");
                            return true;
                        }
                        #endregion

                        #region Distance Conditions
                        if (RoleplayManager.Distance(Pos1, Pos2) >= 3)
                        {
                            RoleplayManager.Shout(Session, "*Intento ponerle las esposas a " + TargetSession.GetHabbo().UserName + " pero fallo*", 14);
                            return true;
                        }

                        if (RoleplayManager.Distance(Pos1, Pos2) <= 2)
                        {
                            isclose = true;
                        }
                        else if (RoleplayManager.Distance(Pos1, Pos2) >= 6)
                        {
                            Session.SendWhisper("Debe estar mas cerca de ti!");
                            return false;
                        }
                        #endregion

                        #region Execute

                        if (isclose)
                        {

                            RoleplayManager.Shout(Session, "*Poniendo esposas en la mano de " + TargetSession.GetHabbo().UserName + "*", 28);
                            TargetSession.GetRoleplay().Cuffed = true;
                            Targ.ApplyEffect(590);
                        }

                        #endregion

                        return true;
                    }
                #endregion

                #region :arrest x <time>
                case "arrestar":
                    {

                        #region Generate Instances / Sessions / Vars

                        bool Wanted = false;

                        string Target = Convert.ToString(Params[1]);
                        int Time = 0;
                        if (!RoleplayManager.WantedListData.ContainsKey(Target.ToLower()))
                        {
                            if (!RoleplayManager.ParamsMet(Params, 2))
                            {
                                Session.SendWhisper("Comando inv√°lido digite: :arrestar <usuario> <tiempo>");
                                return true;
                            }
                            else
                            {


                            #region Int Check
                                    bool isint =true;
                                int outt;
                             

                                if (Int32.TryParse(Params[2].ToString(), out outt))
                                {
                                    Time = Convert.ToInt32(Params[2]);
                                    isint = true;
                                }
                                else
                                {
                                  //  Time = Convert.ToInt32(Params[2]);
                                    isint = false;
                                }

                                if(!isint)
                                {
                                    Session.SendWhisper("Solo se permiten numeros en la sentencia!");
                                    return true;
                                }

                            #endregion

                            }


                        }
                        else
                        {
                            string Data = RoleplayManager.WantedListData[Target.ToLower()];
                            string[] Split = Data.Split('|');

                            foreach (string data in Split)
                            {
                                Time = Convert.ToInt32(Split[0]);
                            }

                            Wanted = true;

                        }

                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo() == null)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().GetRoomUser() == null)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }

                        Targ = TargetSession.GetHabbo().GetRoomUser();
                        Actor = Session.GetHabbo().GetRoomUser();


                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Police Conditions

                        bool isclose = false;

                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("swat"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("No estas trabajando!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Targ.Frozen)
                        {
                            Session.SendWhisper("El usuario ya esta aturdido!");
                            return true;
                        }
                        if (!TargetSession.GetRoleplay().Cuffed)
                        {
                            Session.SendWhisper("El usuario ya esta esposado!");
                            return true;
                        }
                        if (Time <= 0)
                        {
                            Session.SendWhisper("El tiempo espesificado no es valido!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No puedes hacer esto en salas 'NOCOP'.");
                            return true;
                        }

                        int MaxTime = 0;

                        if (JobManager.JobRankData[MyJobId, MyJobRank].canFire())
                        {
                            MaxTime = 120;
                        }
                        else
                        {
                            MaxTime = 60;
                        }

                        if (Time > MaxTime)
                        {
                            Session.SendWhisper("El rango de tu empleo solo permite un maximo de " + MaxTime + " minutos!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("ca_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("ca_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["ca_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["ca_cooldown"] + "/3]");
                            return true;
                        }
                        #endregion

                        #region Distance Conditions
                        if (TargetSession.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No se puede arrestar al usuario, esta muerto!");
                            return true;
                        }
                        if (RoleplayManager.Distance(Pos1, Pos2) >= 3)
                        {
                            RoleplayManager.Shout(Session, "*Intento arrestar a " + TargetSession.GetHabbo().UserName + " pero fallo*");
                            return true;
                        }
                        if (RoleplayManager.Distance(Pos1, Pos2) <= 2)
                        {
                            isclose = true;
                        }
                        else if (RoleplayManager.Distance(Pos1, Pos2) >= 6)
                        {
                            Session.SendWhisper("Debe estar mas cercas de ti!");
                            return false;
                        }
                        #endregion

                        #region Execute

                        if (isclose)
                        {
                            string Extra = "";


                            if (Wanted)
                            {
                                Session.SendWhisper("El usuario ya esta siendo buscado, se ha cambiado el tiempo deseado por el anterior!");
                                Extra += ", y se elimino de la lista de buscados.";
                                TargetSession.GetRoleplay().Wanted = 0;
                                TargetSession.GetRoleplay().SaveQuickStat("wanted", "0");

                                string wantedJunk = TargetSession.GetHabbo().UserName.ToLower();
                                RoleplayManager.WantedListData.TryRemove(TargetSession.GetHabbo().UserName.ToLower(), out wantedJunk);
                            }


                            RoomUser User = TargetSession.GetHabbo().GetRoomUser();
                            User.ApplyEffect(0);
                            TargetSession.GetRoleplay().StopWork();

                            if (Plus.GetGame().JailBreak != null)
                            {
                                Plus.GetGame().JailBreak.StopJailbreak();
                            }

                            TargetSession.GetRoleplay().Equiped = null;
                            User.Frozen = false;

                            RoleplayManager.Shout(Session, "*Arresto a " + TargetSession.GetHabbo().UserName + " durante " + Time + " minuto(s)" + Extra + "*", 32);
                            TargetSession.GetRoleplay().Cuffed = false;
                            TargetSession.SendNotif("Haz sido arrestado por " + Session.GetHabbo().UserName + " durante " + Time + " minuto(s)");
                            TargetSession.GetRoleplay().JailFigSet = false;
                            TargetSession.GetRoleplay().JailedSeconds = 60;
                            TargetSession.GetRoleplay().JailTimer = Time;
                            TargetSession.GetRoleplay().Jailed = true;
                            TargetSession.GetRoleplay().Arrested++;
                            TargetSession.GetRoleplay().UpdateStats++;

                            Session.GetRoleplay().Arrests++;
                            Session.GetRoleplay().UpdateStats++;
                            Session.GetRoleplay().MultiCoolDown["ca_cooldown"] = 3;
                            Session.GetRoleplay().CheckingMultiCooldown = true;

                            if (TargetSession.GetRoleplay().Working)
                            {
                                TargetSession.GetRoleplay().StopWork();
                            }
                            TargetSession.GetRoleplay().SaveStatusComponents("jailed");

                        }

                        #endregion

                        return true;
                    }
                #endregion

                #region :release x
                case "liberar":
                    {

                        #region Generate Instances / Sessions / Vars
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (TargetSession != null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Targ = TargetSession.GetHabbo().GetRoomUser();
                            Actor = Session.GetHabbo().GetRoomUser();
                        }
                        else
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Police Conditions

                        bool isclose = false;

                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("swat"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (TargetSession.GetHabbo().UserName == Session.GetHabbo().UserName)
                        {
                            Session.SendWhisper("No puedes sacarte a ti mismo de prisi√≥n!");
                            return true;
                        }
                        if (!TargetSession.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("Este usuario no esta en prisi√≥n!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("police"))
                        {
                            Session.SendWhisper("No puedes hacer esto aqu√≠!");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("western"))
                        {
                            Session.SendWhisper("No puedes hacer esto aqu√≠!");
                            return true;
                        }
                        #endregion

                        #region Distance Conditions

                        isclose = true;

                        #endregion

                        #region Execute

                        if (isclose)
                        {

                            RoleplayManager.Shout(Session, "*Libero a " + TargetSession.GetHabbo().UserName + " de la prision*", 28);
                            TargetSession.GetRoleplay().Cuffed = true;
                            TargetSession.GetRoleplay().JailTimer = 0;
                            TargetSession.GetRoleplay().JailedSeconds = 0;
                            TargetSession.GetRoleplay().SaveStatusComponents("jailed");

                        }

                        #endregion

                        return true;
                    }
                #endregion

                #region :search x
                case "buscar":
                    {

                        #region Generate Instances / Sessions / Vars
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Null Checks
                        if (!RoleplayManager.CanInteract(Session, TargetSession, true))
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }
                        #endregion

                        #region Set Values
                        Targ = TargetSession.GetHabbo().GetRoomUser();
                        Actor = Session.GetHabbo().GetRoomUser();

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);
                        #endregion

                        #region Police Conditions

                        bool isclose = false;

                        if (!Session.GetRoleplay().JobHasRights("police") 
                            && !Session.GetRoleplay().JobHasRights("swat")
                            && !Session.GetRoleplay().JobHasRights("farmas")
                            && !Session.GetRoleplay().JobHasRights("spriv"))
                        {
                            Session.SendWhisper("Tu empleo no permite esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOSEARCH"))
                        {
                            Session.SendWhisper("En esta sala no se permite la busqueda!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisper("No se puede trabajar en esta sala!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("police"))
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en una zona occidental!");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("WESTERN") && Session.GetRoleplay().JobHasRights("western"))
                        {
                            Session.SendWhisper("Solo se puede hacer esto en las salas occidentales.");
                            return true;
                        }
                        #endregion

                        #region Distance Conditions
                        if (RoleplayManager.Distance(Pos1, Pos2) >= 3)
                        {
                            RoleplayManager.Shout(Session, "*Intento buscar a " + TargetSession.GetHabbo().UserName + " pero fallo*", 14);
                            return true;
                        }

                        if (RoleplayManager.Distance(Pos1, Pos2) <= 2)
                        {
                            isclose = true;
                        }
                        else if (RoleplayManager.Distance(Pos1, Pos2) >= 7)
                        {
                            Session.SendWhisper("Debe estar mas cerca de ti!");
                            return false;
                        }
                        #endregion

                        #region Execute

                        if (isclose)
                        {

                            bool IllegalItemsFound = false;
                            string IllegalItem = "";

                            if (TargetSession.GetRoleplay().Weed > 0)
                            {
                                IllegalItem += ", " + TargetSession.GetRoleplay().Weed + "g de marihuana";
                                IllegalItemsFound = true;
                            }
                            if (TargetSession.GetRoleplay().Equiped != null)
                            {
                                IllegalItem += ", encontro " + TargetSession.GetRoleplay().Equiped + " arma";
                                IllegalItemsFound = true;
                            }
							if (TargetSession.GetRoleplay().Carrots > 0)
							{
								IllegalItem += ", " + TargetSession.GetRoleplay().Carrots + "g de cocaina";
                                IllegalItemsFound = true;
							}

                            if (!IllegalItemsFound)
                            {
                                IllegalItem = ", no encontraron nada";
                            }

                            RoleplayManager.Shout(Session, "*Buscando a " + TargetSession.GetHabbo().UserName + " por tener items ilegales" + IllegalItem + "*", 28);
                        }

                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #region Banking(5)

                #region :balance
                case "saldobancario":
                    {

                        #region Conditions
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("balance_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("balance_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["balance_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["balance_cooldown"] + "/5]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.SendWhisperBubble("Cuentas con $" + Session.GetRoleplay().Bank + " billetes en el banco.", 1);
                        Session.GetRoleplay().MultiCoolDown["balance_cooldown"] = Convert.ToInt32(RoleplayData.Data["balance_cooldown"]);
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        #endregion

                        return true;
                    }
                #endregion

                #region :withdraw <amnt>
                case "retirar":
                    {

                        #region Params
                        int Amount = 1;
                        bool wFromBank = false;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :retirar <cantidad>");
                            return true;
                        }
                        else
                        {

                            if (!Plus.IsNum(Params[1]))
                            {
                                Session.SendWhisperBubble("Solo numeros!", 34);
                                return true;
                            }

                            Amount = Convert.ToInt32(Params[1]);

                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("withdraw_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("withdraw_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["withdraw_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["withdraw_cooldown"] + "/5]");
                            return true;
                        }

                        if (Amount <= 0)
                        {
                            Session.SendWhisper("Cantidad invalida!");
                            return true;
                        }
                        if (Session.GetRoleplay().Bank < Amount || Session.GetRoleplay().Bank - Amount < 0)
                        {
                            Session.SendWhisper("No tienes $" + Amount + " para retirar de tu cuenta bancaria!");
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("BANK"))
                        {
                            if (Session.GetRoleplay().Phone == 1)
                            {
                                wFromBank = false;
                            }
                            else
                            {
                                Session.SendWhisperBubble("Debes tener un telefono para usar el banco en linea!", 1);
                                return true;
                            }
                        }
                        else if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("BANK"))
                        {
                            wFromBank = true;
                        }
                        #endregion

                        #region Execute
                        if (wFromBank)
                        {
                            RoleplayManager.Shout(Session, "*Retiraste $" + Amount + " de tu cuenta bancaria*", 6);
                            RoleplayManager.GiveMoney(Session, +Amount);
                            Session.GetRoleplay().SaveQuickStat("bank", "" + (Session.GetRoleplay().Bank - Amount));
                            Session.GetRoleplay().Bank -= Amount;
                            Session.GetRoleplay().AtmSetAmount = 0;
                            Session.GetRoleplay().WithdrawDelay = 0;
                            Session.GetRoleplay().Withdraw_Via_Phone = false;
                            RoomUser RoomUser = null;
                            RoomUser = Session.GetHabbo().GetRoomUser();
                            RoomUser.ApplyEffect(0);
                            return true;
                        }
                        else
                        {
                            Session.SendWhisperBubble("Dirigete al banco para retirar tu dinero.", 1);
                            return true;
                            /*Misc.Shout(Session, "*Takes out their phone*");
                            RoomUser User =Session.GetHabbo().GetRoomUser();
                            User.ApplyEffect(65);
                            Session.GetRoleplay().WithdrawDelay = 1;
                            Session.GetRoleplay().Withdraw_Via_Phone = true;
                            Session.GetRoleplay().AtmSetAmount = Amount;
                            Session.GetRoleplay().MultiCoolDown["withdraw_cooldown"] = 5;
                            Session.GetRoleplay().CheckingMultiCooldown = true;*/
                        }
                        #endregion
                    }
                #endregion

                #region :deposit <amnt>
                case "depositar":
                    {

                        #region Params
                        int Amount = 1;
                        bool dFromBank = false;
                        #endregion

                        #region Conditions
                        if (Params.Length < 2)
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :depositar <cantidad>", 1);
                            return true;
                        }
                        else
                        {
                            Amount = Convert.ToInt32(Params[1]);
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("deposit_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("deposit_cooldown", 0);

                        }
                        if (Session.GetRoleplay().MultiCoolDown["deposit_cooldown"] > 0)
                        {
                            Session.SendWhisperBubble("Relajate! [" + Session.GetRoleplay().MultiCoolDown["deposit_cooldown"] + "/5]", 1);
                            return true;
                        }
                        if (Amount <= 0)
                        {
                            Session.SendWhisperBubble("Cantidad invalida!", 1);
                            return true;
                        }
                        if (Session.GetHabbo().Credits < Amount || Session.GetHabbo().Credits - Amount < 0)
                        {
                            Session.SendWhisperBubble("No tienes $" + Amount + " para depositar en tu cuenta bancaria!", 1);
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("BANK"))
                        {
                            if (Session.GetRoleplay().Phone == 1)
                            {
                                dFromBank = false;
                            }
                            else
                            {
                                Session.SendWhisperBubble("Necesitas un telefono para usar el banco en linea!", 1);
                                return true;
                            }
                        }
                        else if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("BANK"))
                        {
                            dFromBank = true;
                        }
                        #endregion

                        #region Execute
                        if (dFromBank)
                        {
                            RoleplayManager.Shout(Session, "*Deposito $" + Amount + " en su cuenta bancaria*", 6);
                            RoleplayManager.GiveMoney(Session, -Amount);
                            Session.GetRoleplay().SaveQuickStat("bank", "" + (Session.GetRoleplay().Bank + Amount));
                            Session.GetRoleplay().Bank += Amount;
                            Session.GetRoleplay().MultiCoolDown["deposit_cooldown"] = Convert.ToInt32(RoleplayData.Data["deposit_cooldown"]);
                            return true;
                        }
                        else
                        {
                            Session.SendWhisperBubble("Debes dirigirte al banco para depositar tu dinero!", 1);
                            return true;
                            /*Misc.Shout(Session, "*Deposits $" + Amount + " to their Bank Account*");
                            Misc.GiveMoney(Session, -Amount);
                            Session.GetRoleplay().SaveQuickStat("bank", "" + (Session.GetRoleplay().Bank + Amount));
                            Session.GetRoleplay().Bank += Amount;
                            Session.GetRoleplay().MultiCoolDown["deposit_cooldown"] = 5;
                            Session.GetRoleplay().CheckingMultiCooldown = true;*/
                        }
                        #endregion

                    }
                #endregion

                #region :setatm
                case "cajerocantidad":
                    {

                        int Amnt = 0;

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :cajerocantidad <cantidad>", 1);
                            return true;
                        }
                        else
                        {
                            Amnt = Convert.ToInt32(Params[1]);
                        }
                        if (Session.GetRoleplay().WithdrawDelay > 0)
                        {
                            Session.SendWhisperBubble("Procesando..", 1);
                            return true;
                        }
                        if (Amnt <= 0)
                        {
                            Session.SendWhisperBubble("La cantidad no puede ser menor o igual a 0!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Bank < Amnt)
                        {
                            Session.SendWhisperBubble("No tienes $" + Amnt + " en tu cuenta bancaria!", 1);
                            return true;
                        }
                        Session.GetRoleplay().AtmSetAmount = Amnt;
                        Session.SendWhisperBubble("Se cambio correctamente la cantidad de retiro a  $" + Amnt + ". Doble click en el cajero automatico para retirar!", 1);



                        return true;
                    }
                #endregion

                #endregion

                #region Hospital (2)

                #region :heal x
                case "vida":
                    {
                        #region Generate Instances / Sessions / Vars
                        string Target = null;

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :vida <usuario>");
                            return true;
                        }

                        Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;

                        TargetSession = RoleplayManager.GenerateSession(Target);

                        #region Null Checks
                        if (!RoleplayManager.CanInteract(Session, TargetSession, true))
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!");
                            return true;
                        }
                        #endregion

                        Targ = TargetSession.GetHabbo().GetRoomUser();
                        Actor = Session.GetHabbo().GetRoomUser();

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Hospital Conditions

                        bool isclose = false;

                        if (!Session.GetRoleplay().JobHasRights("hospital") && !Session.GetRoleplay().JobHasRights("gov"))
                        {
                            Session.SendWhisperBubble("Tu trabajo no permite esto!", 1);
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisperBubble("Debes estar trabajando para hacer esta accion!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas muerto!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas en prision!", 1);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().BeingHealed)
                        {
                            Session.SendWhisperBubble("El usuario tiene su vida completa!", 1);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().CurHealth >= TargetSession.GetRoleplay().MaxHealth)
                        {
                            Session.SendWhisperBubble("El usuario ahora tiene su vida completa!", 1);
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("heal_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("heal_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["heal_cooldown"] > 0)
                        {
                            Session.SendWhisperBubble("Relajate! [" + Session.GetRoleplay().MultiCoolDown["heal_cooldown"] + "/10]", 1);
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :vida <usuario>", 1);
                            return true;
                        }
                        #endregion

                        #region Distance Conditions
                        if (RoleplayManager.Distance(Pos1, Pos2) <= 4)
                        {
                            isclose = true;
                        }
                        else if (RoleplayManager.Distance(Pos1, Pos2) >= 5)
                        {
                            Session.SendWhisperBubble("Debes estar mas cerca para hacer esto!", 1);
                            return true;
                        }
                        #endregion

                        #region Execute
                        if (isclose)
                        {
                            
                            RoleplayManager.Shout(Session, "*Aplicando vendajes a " + TargetSession.GetHabbo().UserName + "'s por sus heridas*", 11);
                            TargetSession.GetRoleplay().BeingHealed = true;
                            TargetSession.GetRoleplay().healTimer = new healTimer(TargetSession);
                            Session.GetRoleplay().MultiCoolDown["heal_cooldown"] = 10;
                            Session.GetRoleplay().CheckingMultiCooldown = true;

                        }
                        #endregion

                        return true;
                    }
                #endregion

                #region :discharge x
                case "revivir":
                    {

                        #region Generate Instances / Sessions / Vars
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #region Null Checks
                        if (TargetSession == null)
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                            return true;
                        }
                        if (TargetSession.GetHabbo() == null)
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                            return true;
                        }

                        if (TargetSession.GetHabbo().GetRoomUser() == null)
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                            return true;
                        }
                        if (TargetSession.GetHabbo().CurrentRoom == null)
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                            return true;
                        }
                        if (TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                            return true;
                        }
                        #endregion
                        Targ = TargetSession.GetHabbo().GetRoomUser();
                        Actor = Session.GetHabbo().GetRoomUser();
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Hospital Conditions

                        bool isclose = false;

                        if (!Session.GetRoleplay().JobHasRights("hospital") && !Session.GetRoleplay().JobHasRights("gov") && Session.GetHabbo().Rank <= 2)
                        {
                            Session.SendWhisperBubble("Tu empleo no permite esto!", 1);
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisperBubble("Debes estar trabajando para hacer esta accion!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas muerto!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas en prision!", 1);
                            return true;
                        }
                        if (!TargetSession.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("El usuario no esta muerto!", 1);
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("d_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("d_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["d_cooldown"] > 0)
                        {
                            Session.SendWhisperBubble("Relajate! [" + Session.GetRoleplay().MultiCoolDown["d_cooldown"] + "/3]", 1);
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisperBubble("Comando invalida: :revivir <usuario>", 1);
                            return true;
                        }
                        #endregion

                        #region Distance Conditions
                        if (RoleplayManager.Distance(Pos1, Pos2) <= 6)
                        {
                            isclose = true;
                        }
                        else if (RoleplayManager.Distance(Pos1, Pos2) >= 7)
                        {
                            Session.SendWhisperBubble("Debes estar mas cerca para hacer esto!", 1);
                            return true;
                        }
                        #endregion

                        #region Execute
                        if (isclose)
                        {

                            RoleplayManager.GiveMoney(Session, +Session.GetRoleplay().JobRank);
                            TargetSession.GetHabbo().GetRoomUser().SetPos(9, 26, 0);
                            TargetSession.GetHabbo().GetRoomUser().ClearMovement();
                            RoleplayManager.Shout(Session, "*Revivio a " + TargetSession.GetHabbo().UserName + " [+$" + Session.GetRoleplay().JobRank + "]*", 11);
                            TargetSession.GetRoleplay().DeadTimer = 0;
                            TargetSession.GetRoleplay().DeadSeconds = 0;
                            TargetSession.GetRoleplay().SaveStatusComponents("dead");
                            TargetSession.GetRoleplay().healTimer = new healTimer(TargetSession);
                            TargetSession.GetRoleplay().BeingHealed = true;
                            Session.GetRoleplay().MultiCoolDown["d_cooldown"] = 3;
                            Session.GetRoleplay().CheckingMultiCooldown = true;

                        }
                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #region SWAT (1)

                #region :flashbang
                    
                case "gasbomba":
                    {

                        #region Conditions

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        if (!Session.GetRoleplay().JobHasRights("swat"))
                        {
                            Session.SendWhisperBubble("Tu empleo no permite esto!", 1);
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisperBubble("Debes estar trabajando para hacer esta accion!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas muerto!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas en prision!", 1);
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                        {
                            Session.SendWhisperBubble("No se puede hacer esto en esta sala.", 1);
                            return true;
                        }

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("flashbang"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("flashbang", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["flashbang"] > 0)
                        {
                            Session.SendWhisperBubble("Para evitar abusos, no puedes usar este comando! [" + Session.GetRoleplay().MultiCoolDown["flashbang"] + "/600]", 1);
                            return true;
                        }

                        #endregion

                        #region Execute

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (client == null)
                                    continue;
                                if (client.GetHabbo() == null)
                                    continue;
                                if (client.GetRoleplay() == null)
                                    continue;
                                if (client.GetHabbo().CurrentRoom == null)
                                    continue;
                                if (client.GetHabbo().CurrentRoom == Session.GetHabbo().CurrentRoom)
                                {
                                    if (client.GetHabbo().UserName != Session.GetHabbo().UserName && !Session.GetRoleplay().usingPlane)
                                    {
                                        client.GetHabbo().GetRoomUser().ApplyEffect(53);
                                        client.GetHabbo().GetRoomUser().CanWalk = false;
                                        client.GetHabbo().GetRoomUser().Frozen = true;
                                        client.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + 10;
                                        ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                                        Packet.AppendInteger(10);
                                        client.SendMessage(Packet);
                                    }
                                }
                            }
                        }
                        RoleplayManager.Shout(Session, "*Lanzo gas paralizante, toda la sala se quedo paralizada*");
                        Session.GetRoleplay().MultiCoolDown["flashbang"] = 600;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                    }
                    return true;
                #endregion

                #endregion

                #region Spa (1)
                #region :massage x
                case "masaje":
                    {
                        #region Generate Instances / Sessions / Vars
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        RoomUser Actor = null;
                        RoomUser Targ = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (TargetSession != null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Targ = TargetSession.GetHabbo().GetRoomUser();
                            Actor = Session.GetHabbo().GetRoomUser();
                        }
                        else
                        {
                            Session.SendWhisperBubble("El usuario no fue encontrado en esta sala!", 1);
                            return true;
                        }
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        Vector2D Pos1 = new Vector2D(Actor.X, Actor.Y);
                        Vector2D Pos2 = new Vector2D(Targ.X, Targ.Y);

                        #endregion

                        #region Spa Conditions

                        bool isclose = false;

                        if (!Session.GetRoleplay().JobHasRights("spa") && !Session.GetRoleplay().JobHasRights("gov") && Session.GetHabbo().Rank <= 2)
                        {
                            Session.SendWhisperBubble("Tu empleo no permite esto!", 1);
                            return true;
                        }
                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisperBubble("Debes estar trabajando para hacer esta accion!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas muerto!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto por que estas en prision!", 1);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().Energy == 100)
                        {
                            Session.SendWhisperBubble("La energia de este ciudadano esta completa!", 1);
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("massage_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("massage_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["massage_cooldown"] > 0)
                        {
                            Session.SendWhisperBubble("Relajate! [" + Session.GetRoleplay().MultiCoolDown["massage_cooldown"] + "/10]", 1);
                            return true;
                        }
                        #endregion

                        #region Distance Conditions
                        if (RoleplayManager.Distance(Pos1, Pos2) <= 4)
                        {
                            isclose = true;
                        }
                        else if (RoleplayManager.Distance(Pos1, Pos2) >= 5)
                        {
                            Session.SendWhisperBubble("Debes estar mas cerca para hacer esto!", 1);
                            return false;
                        }
                        #endregion

                        #region Execute
                        if (isclose)
                        {
                            RoleplayManager.Shout(Session, "*Masajeando a " + TargetSession.GetHabbo().UserName + "*", 11);
                            TargetSession.GetRoleplay().BeingMassaged = true;
                            TargetSession.GetRoleplay().massageTimer = new massageTimer(TargetSession);
                            Session.GetRoleplay().MultiCoolDown["massage_cooldown"] = 10;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }
                        #endregion

                        return true;
                    }
                #endregion
                #endregion

                #endregion

                #region General (3)

                #region :startwork
                case "trabajar":
                    {
                        int JobId = Session.GetRoleplay().JobId;
                        int JobRank = Session.GetRoleplay().JobRank;

                        #region Invalid Job Rectifier
                        if (!JobValidation.ValidateJob(JobId, JobRank))
                        {
                            Session.SendWhisperBubble("Al parecer tu empleo no es valido o no existe, si crees que se trata de un error, reinicia el juego!", 1);
                            Session.GetRoleplay().JobId = 1;
                            Session.GetRoleplay().JobRank = 1;
                            Session.GetRoleplay().SaveJobComponents();
                            return true;
                        }
                        #endregion

                        #region Conditions

                        if (Session.GetRoleplay().JobHasRights("police") || Session.GetRoleplay().JobHasRights("swat"))
                        {
                            if (RoleplayManager.PurgeTime)
                            {
                                Session.SendWhisperBubble("No puedes ser policia durante una purga!", 1);
                                return true;
                            }
                            if (Session.GetRoleplay().IsNoob)
                            {
                                Session.SendWhisperBubble("No puedes hacer esto si tienes la proteccion activada!", 1);
                                return true;
                            }
                            if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOCOP"))
                            {
                                Session.SendWhisperBubble("Lo sentimos, en esta zona no se permite trabajar!", 1);
                                return true;
                            }
                        }
                        if (Session.GetRoleplay().JobHasRights("desempleado"))
                        {
                            Session.SendWhisperBubble("No puedes trabajar mientras eres desempleado, Ve a alguna empresa y consigue trabajo!");
                            return true;
                        }
                        if (Session.GetRoleplay().SentHome)
                        {
                            Session.SendWhisperBubble("Un rango superior te penalizo, te restan " + Session.GetRoleplay().SendHomeTimer + " minutos para volver a trabajar!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Working)
                        {
                            Session.SendWhisperBubble("Ya estas trabajando!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().ATMRobbery)
                        {
                            Session.SendWhisperBubble("No puedes trabajar mientras estas robando!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Robbery)
                        {
                            Session.SendWhisperBubble("No puedes trabajar mientras estas robando!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Learning)
                        {
                            Session.SendWhisperBubble("No puedes trabajar por que estas estudiando!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().WeightLifting)
                        {
                            Session.SendWhisperBubble("No puedes trabajar por que estas alzando pesas!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().WorkingOut)
                        {
                            Session.SendWhisperBubble("No puedes trabajar por que estas corriendo!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No puedes trabajar por que estas muerto!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisperBubble("No puedes trabajar por que estas en prision!", 1);
                            return true;
                        }
                        if (!JobManager.JobRankData[Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank].WorkRooms.Contains("*"))
                        {
                            if (!JobManager.JobRankData[Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank].isWorkRoom(Session.GetHabbo().CurrentRoomId))
                            {
                                Session.SendWhisperBubble("No se puede trabajar aqui!", 1);
                                return true;
                            }
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("work_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("work_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["work_cooldown"] > 0)
                        {
                            Session.SendWhisperBubble("Debes esperar para poder robar el banco de nuevo! [" + Session.GetRoleplay().MultiCoolDown["work_cooldown"] + "/5]", 1);
                            return true;
                        }
                        #endregion

                        #region Execute

                        string JobName = JobManager.JobData[JobId].Name;
                        string RankName = JobManager.JobRankData[JobId, JobRank].Name;

                        #region Apply Work Outfit/Motto
                        Session.GetRoleplay().FigBeforeWork = Session.GetHabbo().Look;
                        Session.GetRoleplay().MottBeforeWork = Session.GetHabbo().Motto;

                        if (Session.GetRoleplay().JobId != 1 && !JobManager.JobRankData[JobId, JobRank].MaleFig.Contains("*") && !JobManager.JobRankData[JobId, JobRank].FemaleFig.Contains("*")) // Set Figure if not Unemployed
                        {
                            if (!JobManager.JobRankData[JobId, JobRank].MaleFig.ToLower().Contains("none") && !JobManager.JobRankData[JobId, JobRank].FemaleFig.ToLower().Contains("none"))
                            {
                                if (Session.GetHabbo().Gender.ToLower().StartsWith("m"))
                                {
                                    Session.GetHabbo().Look = RoleplayManager.SplitFigure(Session.GetHabbo().Look) + JobManager.JobRankData[JobId, JobRank].MaleFig;
                                    Session.GetRoleplay().FigWork = RoleplayManager.SplitFigure(Session.GetHabbo().Look) + JobManager.JobRankData[JobId, JobRank].MaleFig;
                                }
                                else
                                {
                                    Session.GetHabbo().Look = RoleplayManager.SplitFigure(Session.GetHabbo().Look) + JobManager.JobRankData[JobId, JobRank].FemaleFig;
                                    Session.GetRoleplay().FigWork = RoleplayManager.SplitFigure(Session.GetHabbo().Look) + JobManager.JobRankData[JobId, JobRank].FemaleFig;
                                }
                            }
                        }
                        #endregion

                        Session.GetHabbo().Motto = "[Empleo] " + JobName + " - " + RankName;
                        Session.GetRoleplay().RefreshVals();
                        Session.GetRoleplay().Working = true;
                        Session.GetRoleplay().workingTimer = new workingTimer(Session);
                        Session.GetRoleplay().SaveJobComponents();
                        RoleplayManager.Shout(Session, "*Comenzo a trabajar*", 31);
                        Session.SendWhisperBubble("Dentro de " + Session.GetRoleplay().workingTimer.getTime() + " minuto(s) recibiras tu siguiente pago!", 1);
                        Session.GetRoleplay().MultiCoolDown["work_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :stopwork
                case "parartrabajo":
                    {

                        #region Conditions

                        if (!Session.GetRoleplay().Working)
                        {
                            Session.SendWhisperBubble("No estas trabajando!", 1);
                            return true;
                        }

                        #endregion

                        Session.GetRoleplay().StopWork(true);

                        if (Session.GetRoleplay().Equiped != null)
                        {
                            if (Session.GetRoleplay().Equiped.ToLower().Equals("npa"))
                            {
                                Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                                Session.GetRoleplay().Equiped = null;
                            }
                        }

                        return true;
                    }
                #endregion
                #region :quitjob
                case "renunciar":
                    {

                        #region Conditions
                        if (Session.GetRoleplay().JobId <= 1)
                        {
                            Session.SendWhisperBubble("Actualmente no tienes empleo!", 1);
                            return true;
                        }
                        #endregion

                        #region Execute
                        if (Session.GetRoleplay().Working)
                        {
                            Session.GetRoleplay().StopWork();
                        }

                        RoleplayManager.Shout(Session, "*Renuncio a su empleo*", 0);
                        Session.GetRoleplay().JobId = 1;
                        Session.GetRoleplay().JobRank = 1;
                        Session.GetRoleplay().SaveJobComponents();

                        Session.GetRoleplay().Shifts = 0;
                        Session.GetRoleplay().SaveQuickStat("shifts_completed", "" + Session.GetRoleplay().Shifts);

                        if (Session.GetRoleplay().Equiped != null)
                        {
                            if (Session.GetRoleplay().Equiped.ToLower().Equals("npa"))
                            {
                                Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                                Session.GetRoleplay().Equiped = null;
                            }
                        }
                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #region Corporation Management (5)

                #region :hire x
                case "contratar":
                    {

                        #region Some Vars

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        #endregion

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                            return true;
                        }
                        if (!JobManager.JobRankData[MyJobId, MyJobRank].canHire())
                        {
                            Session.SendWhisperBubble("Tu rango no permite este!", 1);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().JobId > 1)
                        {
                            Session.SendWhisperBubble("Este usuario ya tiene un empleo!", 1);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().JobId == Session.GetRoleplay().JobId && TargetSession.GetRoleplay().JobRank == 1)
                        {
                            Session.SendWhisperBubble("Este usuario ya tiene este empleo!", 1);
                            return true;
                        }
                        #endregion

                        #region Execute

                        string Job = JobManager.JobData[MyJobId].Name;
                        string Rank = JobManager.JobRankData[MyJobId, 1].Name;

                        RoleplayManager.Shout(Session, "*Contrato a " + TargetSession.GetHabbo().UserName + " en " + Job + " como " + Rank + "*");
                        TargetSession.GetRoleplay().JobId = MyJobId;
                        TargetSession.GetRoleplay().JobRank = 1;
                        TargetSession.GetRoleplay().SaveJobComponents();

                        #endregion

                        return true;
                    }
                #endregion
                #region :fire x
                case "despedir":
                    {
                        #region Some Vars

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        #endregion

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        if (TargetSession != null)
                        {

                            #region Online Fire

                            #region Conditions (Online)
                            if (!Session.GetHabbo().HasFuse("fuse_mod"))
                            {
                                if (!JobManager.JobRankData[MyJobId, MyJobRank].canFire())
                                {
                                    Session.SendWhisperBubble("Tu rango en el empleo no permite esto!", 1);
                                    return true;
                                }
                                if (TargetSession.GetRoleplay().JobId != MyJobId)
                                {
                                    Session.SendWhisperBubble("El usuario no trabaj apara ti!", 1);
                                    return true;
                                }
                                if (TargetSession.GetRoleplay().JobId == 1)
                                {
                                    Session.SendWhisperBubble("Este usuario esta desempleado.", 1);
                                    return true;
                                }
                                if (JobManager.JobRankData[TargetSession.GetRoleplay().JobId, TargetSession.GetRoleplay().JobRank].canFire() && JobManager.JobData[MyJobId].OwnerId != Convert.ToInt32(Session.GetHabbo().Id))
                                {
                                    Session.SendWhisperBubble("No tienes los suficientes derechos par ahacer esto!", 1);
                                    return true;
                                }
                            }

                            if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                            {
                                Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                                return true;
                            }
                            #endregion

                            #region Execute (Online)

                            string Job = JobManager.JobData[MyJobId].Name;
                            string Rank = JobManager.JobRankData[MyJobId, 1].Name;

                            if (TargetSession.GetRoleplay().Working)
                            {
                                TargetSession.GetRoleplay().StopWork();
                            }

                            RoleplayManager.Shout(Session, "*Despediste a " + TargetSession.GetHabbo().UserName + " del trabajo*", 4);
                            TargetSession.GetRoleplay().JobId = 1;
                            TargetSession.GetRoleplay().JobRank = 1;
                            TargetSession.GetRoleplay().SaveJobComponents();

                            TargetSession.GetRoleplay().Shifts = 0;
                            TargetSession.GetRoleplay().SaveQuickStat("shifts_completed", "" + Session.GetRoleplay().Shifts);

                            #endregion

                            #endregion

                        }
                        else
                        {

                            #region Offline Fire

                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {

                                dbClient.SetQuery("SELECT id FROM users WHERE username = '" + Target + "'");
                                int targetid = dbClient.GetInteger();

                                dbClient.SetQuery("SELECT username FROM users WHERE username = '" + Target + "'");
                                string username = dbClient.GetString();

                                dbClient.SetQuery("SELECT job_id, job_rank FROM rp_stats WHERE id = '" + targetid + "'");
                                DataRow TarGetRow = dbClient.GetRow();

                                #region Conditions (Offline)
                                if (TarGetRow == null)
                                {
                                    Session.SendWhisperBubble("El usuario no existe!", 1);
                                    return true;
                                }

                                if (!Session.GetHabbo().HasFuse("fuse_mod"))
                                {
                                    if (!JobManager.JobRankData[MyJobId, MyJobRank].canFire())
                                    {
                                        Session.SendWhisperBubble("Tu rango en el empleo no permite esto!", 1);
                                        return true;
                                    }
                                    if (Convert.ToInt32(TarGetRow["job_id"]) != MyJobId)
                                    {
                                        Session.SendWhisperBubble("El usuario no trabaja para ti!", 1);
                                        return true;
                                    }
                                    if (Convert.ToInt32(TarGetRow["job_id"]) == 1)
                                    {
                                        Session.SendWhisperBubble("El usuario esta desempleado.", 1);
                                        return true;
                                    }
                                    if (JobManager.JobRankData[Convert.ToInt32(TarGetRow["job_id"]), Convert.ToInt32(TarGetRow["job_rank"])].canFire() && JobManager.JobData[MyJobId].OwnerId != Convert.ToInt32(Session.GetHabbo().Id))
                                    {
                                        Session.SendWhisperBubble("No tienes los suficientes derechos para hacer esto!", 1);
                                        return true;
                                    }
                                }
                                #endregion


                                Session.SendWhisperBubble("El usuario esta desconectado y no pudo ser despedido!", 1);

                                RoleplayManager.Shout(Session, "*Despediste a " + username + " del trabajo*", 4);
                                dbClient.RunFastQuery("UPDATE rp_stats SET job_id = 1, job_rank = 1, shifts_completed = 0 WHERE id = '" + targetid + "'");
                                return true;
                            }
                            #endregion

                        }

                        return true;
                    }
                #endregion
                #region :promote x
                case "subir":
                    {
                        #region Some Vars

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        #endregion

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            if (!JobManager.JobRankData[MyJobId, MyJobRank].canPromote())
                            {
                                Session.SendWhisperBubble("Tu rango no permite esto!", 1);
                                return true;
                            }
                            if (TargetSession.GetRoleplay().JobId != MyJobId)
                            {
                                Session.SendWhisperBubble("Este usuario no trabaja para ti!", 1);
                                return true;
                            }
                            if (TargetSession.GetRoleplay().JobId == MyJobId && TargetSession.GetRoleplay().JobRank == (MyJobRank - 1))
                            {
                                Session.SendWhisperBubble("No se puede subir al usuario!", 1);
                                return true;
                            }
                            if (JobManager.JobRankData[TargetSession.GetRoleplay().JobId, TargetSession.GetRoleplay().JobRank].canPromote() && JobManager.JobData[MyJobId].OwnerId != Convert.ToInt32(Session.GetHabbo().Id))
                            {
                                Session.SendWhisperBubble("No tienes los derechos suficientes!", 1);
                                return true;
                            }
                        }
                        if (!JobValidation.ValidateJob(TargetSession.GetRoleplay().JobId, TargetSession.GetRoleplay().JobRank + 1))
                        {
                            Session.SendWhisperBubble("El usuario ya tiene el rango mas alto!", 1);
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                            return true;
                        }
                        #endregion

                        #region Execute

                        string Job = JobManager.JobData[TargetSession.GetRoleplay().JobId].Name;
                        string Rank = JobManager.JobRankData[TargetSession.GetRoleplay().JobId, TargetSession.GetRoleplay().JobRank + 1].Name;

                        if (TargetSession.GetRoleplay().Working)
                        {
                            TargetSession.GetRoleplay().StopWork();
                        }

                        RoleplayManager.Shout(Session, "*Subio a " + TargetSession.GetHabbo().UserName + " en " + Job + " a " + Rank + "*");
                        TargetSession.GetRoleplay().JobRank += 1;
                        TargetSession.GetRoleplay().SaveJobComponents();

                        #endregion

                        return true;
                    }
                #endregion
                #region :demote x
                case "bajar":
                    {
                        #region Some Vars

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;

                        #endregion

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                            {
                                Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                                return true;
                            }
                            if (!JobManager.JobRankData[MyJobId, MyJobRank].canDemote() && !Session.GetHabbo().HasFuse("fuse_mod"))
                            {
                                Session.SendWhisperBubble("Tu rango no permite esto!", 1);
                                return true;
                            }
                            if (TargetSession.GetRoleplay().JobId != MyJobId)
                            {
                                Session.SendWhisperBubble("El usuario no trabaja para ti!", 1);
                                return true;
                            }
                            if (JobManager.JobRankData[TargetSession.GetRoleplay().JobId, TargetSession.GetRoleplay().JobRank].canDemote() && JobManager.JobData[MyJobId].OwnerId != Convert.ToInt32(Session.GetHabbo().Id))
                            {
                                Session.SendWhisperBubble("No tienes los suficientes derechos para hacer esto!", 1);
                                return true;
                            }
                        }
                        if (!JobValidation.ValidateJob(TargetSession.GetRoleplay().JobId, TargetSession.GetRoleplay().JobRank - 1))
                        {
                            Session.SendWhisperBubble("Este usuario ya tiene el rango mas bajo!", 1);
                            return true;
                        }
                        #endregion

                        #region Execute

                        string Job = JobManager.JobData[TargetSession.GetRoleplay().JobId].Name;
                        string Rank = JobManager.JobRankData[TargetSession.GetRoleplay().JobId, TargetSession.GetRoleplay().JobRank - 1].Name;

                        if (TargetSession.GetRoleplay().Working)
                        {
                            TargetSession.GetRoleplay().StopWork();
                        }

                        RoleplayManager.Shout(Session, "*Bajo a " + TargetSession.GetHabbo().UserName + " en " + Job + " a " + Rank + "*");
                        TargetSession.GetRoleplay().JobRank -= 1;
                        TargetSession.GetRoleplay().SaveJobComponents();

                        #endregion

                        return true;
                    }
                #endregion
                #region :sendhome x
                case "sancion":
                    {

                        #region Some Vars

                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;
                        int Time = 0;

                        #endregion

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Params.Length < 2)
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :sancion <usuario> <minutos>", 1);
                            return true;
                        }
                        else
                        {
                            Time = Convert.ToInt32(Params[2]);
                        }
                        if (Time < 5)
                        {
                            Session.SendWhisperBubble("El minimo de sancion es de 5 minutos!", 1);
                            return true;
                        }
                        if (Time > 30)
                        {
                            Session.SendWhisperBubble("El maximo de sancion es de 30 minutos!", 1);
                            return true;
                        }
                        if (!Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            if (!JobManager.JobRankData[MyJobId, MyJobRank].canSendHome())
                            {
                                Session.SendWhisperBubble("Tu rango no permite esto!", 1);
                                return true;
                            }
                            if (TargetSession.GetRoleplay().JobId != MyJobId)
                            {
                                Session.SendWhisperBubble("El usuario no trabaja para ti!", 1);
                                return true;
                            }
                            if (JobManager.JobRankData[TargetSession.GetRoleplay().JobId, TargetSession.GetRoleplay().JobRank].canSendHome() && JobManager.JobData[MyJobId].OwnerId != Convert.ToInt32(Session.GetHabbo().Id))
                            {
                                Session.SendWhisperBubble("No tienes los suficientes derechos para hacer esto!", 1);
                                return true;
                            }
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!", 1);
                            return true;
                        }
                        #endregion

                        #region Execute


                        if (TargetSession.GetRoleplay().Working)
                        {
                            TargetSession.GetRoleplay().StopWork();
                            RoleplayManager.Shout(TargetSession, "*Ha dejado de trabajar - No se encuentra en la sala de su empleo!*");
                        }
                        RoleplayManager.Shout(Session, "*Se envio a casa " + TargetSession.GetHabbo().UserName + " por " + Time + " minutos*");
                        TargetSession.GetRoleplay().SendHomeTimer = Time;
                        TargetSession.GetRoleplay().SaveQuickStat("sendhome_timer", "" + TargetSession.GetRoleplay().SendHomeTimer);
                        TargetSession.GetRoleplay().sendHomeTimer = new sendHomeTimer(TargetSession);
                        TargetSession.GetRoleplay().SentHome = true;

                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #endregion

                #region Staff Roleplay Commands
                #region :clearbountylist

                case "lrecompensas":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }

                        Bounties.BountyUsers.Clear();
                        Session.SendWhisperBubble("Lista de recompensas limpiada!", 1);
                        return true;
                    }

                #endregion
                #region :disablevipa
                    
                case "cpublicistas":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return false;
                        }

                        if (RoleplayManager.GVIPAlertsDisabled)
                        {
                            RoleplayManager.GVIPAlertsDisabled = false;
                            Session.SendWhisperBubble("Chat de publicistas activado!", 1);
                        }
                        else
                        {
                            RoleplayManager.GVIPAlertsDisabled = true;
                            Session.SendWhisperBubble("Chat de publicistas desactivado!", 1);
                        }
                        return true;
                    }

                #endregion
                #region :activatedata
                case "activatedata":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }
                        RoomUser User = Session.GetHabbo().GetRoomUser();
                        RoomItem Itemm = null;

                        string Data = "";
                        Data = Convert.ToString(Params[1]);

                        foreach (RoomItem Item in Session.GetHabbo().CurrentRoom.GetRoomItemHandler().FloorItems.Values)
                        {
                            if (RoleplayManager.Distance(new Vector2D(Item.X, Item.Y), new Vector2D(User.X, User.Y)) <= 3)
                            {
                                Itemm = Item;
                            }
                        }


                        Session.SendWhisperBubble("Listo, " + Itemm.GetBaseItem().Name + " de " + Itemm.ExtraData + " a " + Data, 1);

                        Itemm.ExtraData = Data;
                        Itemm.UpdateState();


                        return true;
                    }
                #endregion
                #region :itemname
                case "itemname":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }
                        RoomUser User = Session.GetHabbo().GetRoomUser();
                        RoomItem Itemm = null;

                        foreach (RoomItem Item in Session.GetHabbo().CurrentRoom.GetRoomItemHandler().FloorItems.Values)
                        {
                            if (RoleplayManager.Distance(new Vector2D(Item.X, Item.Y), new Vector2D(User.X, User.Y)) <= 1)
                            {
                                Itemm = Item;
                            }
                        }


                        // room.GetGameMap().RemoveFromMap(item, false);
                        Itemm.UpdateState(false, true);

                        Session.SendWhisperBubble("Informacion del item: " + Itemm.GetBaseItem().Name + "|baseitem:" + Itemm.BaseItem + "|accid:" + Itemm.Id + "|", 1);

                        return true;
                    }
                #endregion
                #region :picknearitem
                case "picknearitem":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }
                        RoomUser User = Session.GetHabbo().GetRoomUser();
                        RoomItem Itemm = null;

                        foreach (RoomItem Item in Session.GetHabbo().CurrentRoom.GetRoomItemHandler().FloorItems.Values)
                        {
                            if (RoleplayManager.Distance(new Vector2D(Item.X, Item.Y), new Vector2D(User.X, User.Y)) <= 1)
                            {
                                Itemm = Item;
                            }
                        }


                        RoleplayManager.ReplaceItem(Session, Itemm, "sofa_silo");

                        return true;
                    }
                #endregion
                #region :placeitem
                case "placeitem":
                    {

                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }

                        uint ItemId = Convert.ToUInt32(Params[1]);
                        RoomUser User = Session.GetHabbo().GetRoomUser();
                        RoleplayManager.PlaceItemToCord(Session, ItemId, User.X, User.Y, 0, 0, false);

                        return true;
                    }
                #endregion
                #region :onduty

                case "strabajar":
                    {

                        #region Conditions

                        if (Session.GetHabbo().Rank <= 2)
                        {
                            return true;
                        }

                        #endregion

                        #region Execute
                        if (Session.GetHabbo().Rank == 3)
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(178);
                            RoleplayManager.Shout(Session, "*Comenzo a laborar (Embajador)*", 6);
                            Session.GetRoleplay().StaffDuty = true;
                            string message = Session.GetHabbo().UserName + " comenzo a laborar (Embajador)";
                            RoleplayManager.sendStaffAlert(message, true);
                        }
                        else
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(102);
                            RoleplayManager.Shout(Session, "*Comenzo a laborar (Staff)*", 33);
                            Session.GetRoleplay().StaffDuty = true;
                            string message = Session.GetHabbo().UserName + " comenzo a laborar (Staff)";
                            RoleplayManager.sendStaffAlert(message, true);
                        }
                        #endregion


                    }
                    return true;

                #endregion
                #region :offduty

                case "sparartrabajo":
                    {

                        #region Conditions

                        if (Session.GetHabbo().Rank <= 2)
                        {
                            return true;
                        }

                        #endregion

                        #region Execute
                        if (Session.GetHabbo().Rank == 3)
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                            RoleplayManager.Shout(Session, "*Dejo de laborar (Embajador)*");
                            Session.GetRoleplay().StaffDuty = false;
                        }
                        else
                        {
                            Session.GetHabbo().GetRoomUser().ApplyEffect(0);
                            RoleplayManager.Shout(Session, "*Dejo de laborar (Staff)*");
                            Session.GetRoleplay().StaffDuty = false;
                        }

                        #endregion


                    }
                    return true;

                #endregion
                #region :kickbot x
                case "fkickbot":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }
                        string Name = Params[1].ToString();
                        RoleplayManager.KickBotFromRoom(Name, Session.GetHabbo().CurrentRoomId);
                        Session.SendWhisperBubble("Expulso al bot!", 1);
                        return true;
                    }
                #endregion
                #region :startsh
                case "startsh":
                    {

                        Session.GetRoleplay().DebugStacking = !Session.GetRoleplay().DebugStacking;

                        Session.SendWhisperBubble("Comenzando debug: " + Session.GetRoleplay().DebugStacking.ToString(), 1);

                        return true;
                    }
                #endregion
                #region :setsh (debug)
                case "setsh":
                    {
                        double height = Convert.ToDouble(Params[1]);

                        /* if (!Session.GetHabbo().HasFuse("fuse_admin"))
                         {
                             return true;
                         }*/

                        if (!Session.GetRoleplay().DebugStacking)
                        {
                            Session.SendWhisperBubble("El modo de depuracion ahora esta: ACTIVADO - Escribe :stopsh para desactivar!", 1);
                            Session.GetRoleplay().DebugStacking = true;
                        }

                        Session.GetRoleplay().DebugStack = height;

                        Session.SendWhisperBubble("La nueva altura es ahora de: " + height, 1);

                        return true;
                    }
                #endregion
                #region :stopsh (debug)
                case "stopsh":
                    {
                        /*if (!Session.GetHabbo().HasFuse("fuse_admin"))
                        {
                            return true;
                        }*/

                        Session.GetRoleplay().DebugStacking = false;
                        Session.SendWhisperBubble("Se detubo el modo debug!", 1);

                        return true;
                    }
                #endregion
                #region :initweapons (debug)
                case "initweapons":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }

                        WeaponManager.init();
                        Session.SendWhisperBubble("Actualizaste las armas.", 1);

                        return true;
                    }
                #endregion
                #region :initjobs (debug)
                case "initjobs":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }

                        JobManager.init();
                        Session.SendWhisperBubble("Actualizaste los rangos.", 1);
                        return true;
                    }
                #endregion
                #region :initrp (debug)
                case "initrp":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }


                        RoleplayData.Load(Path.Combine(System.Windows.Forms.Application.StartupPath, "Settings/Roleplay/settings.ini"), true, true);
                        Session.SendWhisperBubble("Actualizaste la configuracion del hotel.", 1);

                        return true;
                    }
                #endregion
                #region :initgangs (debug)
                case "initgangs":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }

                        GangManager.init();
                        Session.SendWhisperBubble("Actualizaste los grupos criminales.", 1);


                        return true;
                    }
                #endregion
                #region :initfood (debug)
                case "initfood":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }

                        Substances.load();
                        Session.SendWhisperBubble("Actualizaste la comida.", 1);
                        return true;
                    }
                #endregion
                #region :initpets (debug)
                case "initpets":
                case "initpet":
                    {



                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }

                        FightPetManager.load();
                        Session.SendWhisper("Actualizaste las mascotas.");

                        return true;
                    }
                #endregion
                #region :superhire x <job> <rank>
                case "dartrabajo":
                    {


                        #region Params
                        int JobId = 1;
                        int RankId = 1;
                        #endregion

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        // Console.WriteLine(JobId + "|" + RankId + "|" + Target);
                        #endregion

                        #region Conditions

                        if (!Session.GetHabbo().GotCommand("superhire"))
                        {
                            return false;
                        }
                        if (Params.Length < 3)
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :dartrabajo <jobid> <rankid>", 1);
                            return true;
                        }
                        else
                        {
                            JobId = Convert.ToInt32(Params[2]);
                            RankId = Convert.ToInt32(Params[3]);
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisperBubble("El usuario no fue encontrado!", 1);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().JobId == JobId && TargetSession.GetRoleplay().JobRank == RankId)
                        {
                            Session.SendWhisperBubble("El usuario ya tiene el empleo espesificado.", 1);
                            return true;
                        }
                        if (!JobValidation.ValidateJob(JobId, RankId))
                        {
                            Session.SendWhisperBubble("Este no es un empleo valido!", 1);
                            return true;
                        }
                        #endregion

                        #region Execute

                        string RankName = JobManager.JobRankData[JobId, RankId].Name;

                        if (TargetSession.GetRoleplay().Working)
                        {
                            TargetSession.GetRoleplay().StopWork();
                        }

                        TargetSession.GetRoleplay().JobId = JobId;
                        TargetSession.GetRoleplay().JobRank = RankId;
                        TargetSession.GetRoleplay().SaveJobComponents();
                        TargetSession.SendWhisper("Usted acaba de firmar un contrado en " + JobManager.JobData[JobId].Name + " como " + RankName + "!");

                        RoleplayManager.Shout(Session, "*Contrato a " + TargetSession.GetHabbo().UserName + " en " + JobManager.JobData[JobId].Name + " como " + RankName + "*", 33);
                        string message = Session.GetHabbo().UserName + " contrat√≥ " + TargetSession.GetHabbo().UserName + " como " + JobManager.JobData[JobId].Name + " " + RankName;
                        RoleplayManager.sendStaffAlert(message, true);
                        #endregion

                        return true;
                    }
                #endregion
                #region :spaceminer x
                case "spaceminer":
                    {
                        #region Generate Instances / Sessions & Params
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        int JobId = 26;
                        int RankId = TargetSession.GetRoleplay().SpaceLevel;
                        #endregion

                        #region Conditions

                        if (!Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            return true;
                        }
                        if (Params.Length < 1)
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :spaceminer <usuario>", 1);
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisperBubble("El usuario no fue encontrado!", 1);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().JobId == JobId && TargetSession.GetRoleplay().JobRank == RankId)
                        {
                            Session.SendWhisperBubble("El usuario ya tiene el empleo espesificado", 1);
                            return true;
                        }
                        #endregion

                        #region Execute

                        string RankName = JobManager.JobRankData[JobId, RankId].Name;

                        if (TargetSession.GetRoleplay().Working)
                        {
                            TargetSession.GetRoleplay().StopWork();
                        }
                        TargetSession.GetRoleplay().JobId = JobId;
                        TargetSession.GetRoleplay().JobRank = RankId;
                        TargetSession.GetRoleplay().SaveJobComponents();

                        RoleplayManager.Shout(Session, "*Contrato a " + TargetSession.GetHabbo().UserName + " como " + JobManager.JobData[JobId].Name + " " + RankName + "*");
                        #endregion

                        return true;
                    }
                #endregion
                #region :farmer x
                case "farmer":
                    {
                        #region Generate Instances / Sessions & Params
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        int JobId = 23;
                        int RankId = TargetSession.GetRoleplay().FarmingLevel;
                        #endregion

                        #region Conditions

                        if (!Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            return true;
                        }
                        if (Params.Length < 1)
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :farmer <usuario>", 1);
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisperBubble("El usuario no fue encontrado!", 1);
                            return true;
                        }
                        if (TargetSession.GetRoleplay().JobId == JobId && TargetSession.GetRoleplay().JobRank == RankId)
                        {
                            Session.SendWhisperBubble("El usuario ya tiene el empleo espesificado", 1);
                            return true;
                        }
                        #endregion

                        #region Execute

                        string RankName = JobManager.JobRankData[JobId, RankId].Name;

                        if (TargetSession.GetRoleplay().Working)
                        {
                            TargetSession.GetRoleplay().StopWork();
                        }
                        TargetSession.GetRoleplay().JobId = JobId;
                        TargetSession.GetRoleplay().JobRank = RankId;
                        TargetSession.GetRoleplay().SaveJobComponents();

                        RoleplayManager.Shout(Session, "*Contrato a " + TargetSession.GetHabbo().UserName + " en " + JobManager.JobData[JobId].Name + " como " + RankName + "*");
                        #endregion

                        return true;
                    }
                #endregion
                #region :suicide
                case "suicidarse":
                    {
                        #region Conditions
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("Ya estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No hay nada con lo que te puedes suicidar!");
                            return true;
                        }
                        if (Session.GetRoleplay().Wanted > 0)
                        {
                            Session.SendWhisper("No hay nada con lo que te puedes suicidar!");
                            return true;
                        }
                        RoomUser rSession = Session.GetHabbo().GetRoomUser();
                        if (rSession.Frozen || !rSession.CanWalk)
                        {
                            Session.SendWhisper("No hay nada con lo que te puedes suicidar!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SHAME"))
                        {
                            Session.SendWhisper("No hay nada con lo que te puedes suicidar!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Decidio que ya no quiere seguir viviendo y se suicido*", 10);
                        Session.GetRoleplay().DeadFigSet = false;
                        Session.GetRoleplay().DeadSeconds = 60;
                        Session.GetRoleplay().DeadTimer = 2;
                        Session.GetRoleplay().Dead = true;
                        Session.GetRoleplay().SaveStatusComponents("dead");
                        Session.GetRoleplay().Deaths++;
                        RoleplayManager.HandleDeath(Session);
                        #endregion

                        return true;
                    }
                #endregion
                #region :colores
                case "colores":
                    {

                        #region Condiciones
                        if (Session.GetHabbo().Rank == 1)
                        {
                            Session.SendWhisperBubble("Debes ser miembro VIP para ver esto!", 1);
                            return true;
                        }
                        #endregion

                        #region Ejecutamos
                        Session.SendNotif("<b>Colores Disponibles Actualmente:</b><br>- Gris<br>- Blanco<br>- Azul<br>- Rojo<br>- Verde<br>- Purpura<br><br>El comando de uso es ':chat (color) (mensaje)'.");
                        return true;
                        #endregion
                    }
                #endregion

                #region :chat <color> <msg>
                case "c":
                case "color":
                case "chat":
                    {
                        #region Condiciones
                        string colormsg = ChatCommandHandler.MergeParams(Params, 2);

                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto mientras estes muerto!", 1);
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetHabbo().Rank == 1)
                        {
                            Session.SendWhisperBubble("Debes ser miembro VIP para hacer esto!", 1);
                            return true;
                        }
                        #endregion

                        #region Ejecutamos
                        if (Params[1].ToLower().Equals("gris"))
                        {
                            RoleplayManager.Shout(Session, "<font color='#878787'>" + colormsg + "</font>");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("blanco"))
                        {
                            RoleplayManager.Shout(Session, "<font color='#FFFFFF'>" + colormsg + "</font>");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("azul"))
                        {
                            RoleplayManager.Shout(Session, "<font color='#286a7d'>" + colormsg + "</font>");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("rojo"))
                        {
                            RoleplayManager.Shout(Session, "<font color='#b74a4a'>" + colormsg + "</font>");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("verde"))
                        {
                            RoleplayManager.Shout(Session, "<font color='#00ff0a'>" + colormsg + "</font>");
                            return true;
                        }
                        if (Params[1].ToLower().Equals("purpura"))
                        {
                            RoleplayManager.Shout(Session, "<font color='#9300ff'>" + colormsg + "</font>");
                            return true;
                        }

                        Session.SendWhisperBubble("Comando inv√°lido digite: :chat <color> <mensaje>");
                        return true;
                        #endregion
                    }
                #endregion
                #region :me <msg>
                case "me":
                    {
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisperBubble("No puedes hacer esto mientras estes muerto!", 1);
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("mecommand"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("mecommand", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["mecommand"] > 0)
                        {
                            Session.SendWhisperBubble("Relajate! [" + Session.GetRoleplay().MultiCoolDown["mecommand"] + "/3]", 1);
                            return true;
                        }
                        string rpmsg = ChatCommandHandler.MergeParams(Params, 1);
                        RoleplayManager.Shout(Session, "*" + rpmsg + "*", 3);
                        Session.GetRoleplay().MultiCoolDown["mecommand"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        return true;
                    }
                #endregion
                #region :bubble <id>
                case "bubble":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_owner"))
                        {
                            return true;
                        }
                        if (Params.Length <= 1)
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :bubble <id>", 1);
                            return true;
                        }
                        int BubbleId;
                        if (int.TryParse(Params[1], out BubbleId))
                        {
                            Session.SendWhisperBubble("Actualizaste tu burbuja a la numero: " + BubbleId + "", BubbleId);
                            return true;
                        }
                        else
                        {
                            Session.SendWhisperBubble("Numbers only!", 1);
                            return true;
                        }
                    }
                #endregion
                #region :kill x
                case "kill":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank != 23)
                        {
                            return false;
                        }
                        if (Params.Length <= 1)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :kill <user>");
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("El usuario ya esta muerto!");
                            return true;
                        }
                        if (TargetSession.GetHabbo().Rank >= Session.GetHabbo().Rank)
                        {
                            Session.SendWhisper("No puedes matar a este usuario!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Alguien no esta de buen humor y mato instantaneamente a " + TargetSession.GetHabbo().UserName + "*", 27);
                        TargetSession.GetRoleplay().DeadFigSet = false;
                        TargetSession.GetRoleplay().DeadSeconds = 60;
                        TargetSession.GetRoleplay().DeadTimer = 2;
                        TargetSession.GetRoleplay().Dead = true;
                        TargetSession.GetRoleplay().SaveStatusComponents("dead");
                        RoleplayManager.HandleDeath(TargetSession);
                        TargetSession.SendNotif("Fuiste matado por " + Session.GetHabbo().UserName + "!");
                        #endregion

                        return true;
                    }
                #endregion
                #region :rigjackpot
                case "rigjackpot":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return false;
                        }
                        if (Session.GetRoleplay().RigJackpot == false)
                        {
                            Session.GetRoleplay().RigJackpot = true;
                            Session.SendWhisper("Haz activado el jackpot rigger");
                            return true;
                        }
                        else if (Session.GetRoleplay().RigJackpot == true)
                        {
                            Session.GetRoleplay().RigJackpot = false;
                            Session.SendWhisper("Haz desactivado el jackpot rigger");
                            return true;
                        }
                        return true;
                    }
                #endregion
                #region :sethp <user> <amount>
                case "darvida":
                    {

                        #region Generate Instances / Sessions
                        string Target = null;
                        int Amnt = 0;
                        GameClient TargetSession = null;

                        if(RoleplayManager.ParamsMet(Params,2))
                        {
                            Target = Convert.ToString(Params[1]);
                            Amnt = Convert.ToInt32(Params[2]);
                        }
                        else
                        {
                            Session.SendWhisper("Comando invalido! :darvida <usuario> <cantidad>");
                            return true;
                        }
                        
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank < 20)
                        {
                            return false;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }

                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*La vida de " + TargetSession.GetHabbo().UserName + " ahora es " + Amnt + "*", 33);
                        TargetSession.GetRoleplay().CurHealth = Amnt;
                        TargetSession.GetRoleplay().SaveQuickStat("curhealth", Amnt + "");

                        #endregion

                        return true;
                    }
                #endregion
                #region :setarmor <user> <amount>
                case "darproteccion":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        int Amnt = Convert.ToInt32(Params[2]);
                        // Console.WriteLine(JobId + "|" + RankId + "|" + Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank < 20)
                        {
                            return false;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }

                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*La proteccion de " + TargetSession.GetHabbo().UserName + " ahora es " + Amnt + "*", 33);
                        TargetSession.GetRoleplay().Armor = Amnt;
                        TargetSession.GetRoleplay().SaveQuickStat("armor", Amnt + "");

                        #endregion

                        return true;
                    }
                #endregion
                #region :sethygiene <user> <amount>
                case "darlimpieza":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        int Amnt = Convert.ToInt32(Params[2]);
                        // Console.WriteLine(JobId + "|" + RankId + "|" + Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank < 20)
                        {
                            return false;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*La limpieza de " + TargetSession.GetHabbo().UserName + " ahora es " + Amnt + "*", 33);
                        TargetSession.GetRoleplay().Hygiene = Amnt;
                        TargetSession.GetRoleplay().SaveQuickStat("hygiene", Amnt + "");

                        #endregion

                        return true;
                    }
                #endregion
                #region :sethunger <user> <amount>
                case "darcomida":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        int Amnt = Convert.ToInt32(Params[2]);
                        // Console.WriteLine(JobId + "|" + RankId + "|" + Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank < 20)
                        {
                            return false;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*La hambre de " + TargetSession.GetHabbo().UserName + " ahora es " + Amnt + "*", 33);
                        TargetSession.GetRoleplay().Hunger = Amnt;
                        TargetSession.GetRoleplay().SaveQuickStat("hunger", Amnt + "");
                        #endregion

                        return true;
                    }
                #endregion
                #region :setenergy <user> <amount>
                case "darenergia":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        int Amnt = Convert.ToInt32(Params[2]);
                        // Console.WriteLine(JobId + "|" + RankId + "|" + Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank < 20)
                        {
                            return false;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*La energia de " + TargetSession.GetHabbo().UserName + " ahora es " + Amnt + "*");
                        TargetSession.GetRoleplay().Energy = Amnt;
                        TargetSession.GetRoleplay().SaveQuickStat("energy", Amnt + "");

                        #endregion

                        return true;
                    }
                #endregion
                #region :setworkout <user> <amount>
                case "darfuerza":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        int Amnt = Convert.ToInt32(Params[2]);
                        // Console.WriteLine(JobId + "|" + RankId + "|" + Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank < 20)
                        {
                            return false;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        TargetSession.GetRoleplay().WorkoutTimer_Done = Amnt;
                        Session.SendWhisper("La fuerza de " + TargetSession.GetHabbo().UserName + " de" + Amnt + " a " + TargetSession.GetRoleplay().WorkoutTimer_Done + "/" + TargetSession.GetRoleplay().WorkoutTimer_ToDo);


                        #endregion

                        return true;
                    }
                #endregion
                #region :setweightlift <user> <amount>
                case "darmasa":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        int Amnt = Convert.ToInt32(Params[2]);
                        // Console.WriteLine(JobId + "|" + RankId + "|" + Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank < 20)
                        {
                            return false;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        TargetSession.GetRoleplay().WeightLiftTimer_Done = Amnt;
                        Session.SendWhisper("La masa muscular de " + TargetSession.GetHabbo().UserName + " de " + Amnt + " a " + TargetSession.GetRoleplay().WeightLiftTimer_Done + "/" + TargetSession.GetRoleplay().WeightLiftTimer_ToDo);

                        #endregion

                        return true;
                    }
                #endregion
                #region :sethhh <user>
                case "sethhh":
                case "refresh":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank < 20)
                        {
                            return false;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*" + TargetSession.GetHabbo().UserName + "' vida " + TargetSession.GetRoleplay().MaxHealth + ", hambre e higiene al 100%*", 33);

                        TargetSession.GetRoleplay().CurHealth = TargetSession.GetRoleplay().MaxHealth;
                        TargetSession.GetRoleplay().SaveQuickStat("maxhealth", TargetSession.GetRoleplay().MaxHealth + "");

                        TargetSession.GetRoleplay().Hunger = 0;
                        TargetSession.GetRoleplay().SaveQuickStat("hunger", "0");

                        TargetSession.GetRoleplay().Hygiene = 100;
                        TargetSession.GetRoleplay().SaveQuickStat("hygiene", "100");


                        #endregion

                        return true;
                    }
                #endregion
                #region :restore x
                case "restore":
                case "revive":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_admin"))
                        {
                            return true;
                        }
                        if (Params.Length <= 1)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :revive <usuario>");
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (!TargetSession.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("This user is not dead!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Uso sus poderes divinos para revivir a " + TargetSession.GetHabbo().UserName + "*");


                        TargetSession.GetRoleplay().DeadTimer = 0;
                        TargetSession.GetRoleplay().DeadSeconds = 0;
                        TargetSession.GetRoleplay().SaveStatusComponents("dead");
                        TargetSession.GetRoleplay().CurHealth = TargetSession.GetRoleplay().MaxHealth;

                        #endregion


                        return true;
                    }
                #endregion
                #region :adminjail x <time>
                case "adminjail":
                case "jail":
                    {
                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        int Time = Convert.ToInt32(Params[2]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_admin"))
                        {
                            return true;
                        }
                        if (Params.Length <= 2)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :adminjail x <time>");
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("El usuario ya esta en prision!");
                            return true;
                        }
                        if (TargetSession.GetHabbo().Rank >= Session.GetHabbo().Rank)
                        {
                            Session.SendWhisper("No puedes hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Utilizo sus poderes divinos y mando a la carcel a " + TargetSession.GetHabbo().UserName + " durante " + Time + " minutos*");
                        TargetSession.SendNotif("Haz sido arrestado por " + Session.GetHabbo().UserName + " durante " + Time + " minutos");
                        TargetSession.GetRoleplay().JailFigSet = false;
                        TargetSession.GetRoleplay().JailedSeconds = 60;
                        TargetSession.GetRoleplay().JailTimer = Time;
                        TargetSession.GetRoleplay().Jailed = true;
                        TargetSession.GetRoleplay().SaveStatusComponents("jailed");
                        #endregion

                        return true;
                    }
                #endregion
                #region :adminrelease x
                case "adminrelease":
                    {
                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_admin"))
                        {
                            return true;
                        }
                        if (Params.Length <= 1)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :adminrelease <usuario>");
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (!TargetSession.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("El usuario no esta en prision!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Usando poderes divinos para sacar de prision a " + TargetSession.GetHabbo().UserName + "*");


                        TargetSession.GetRoleplay().JailTimer = 0;
                        TargetSession.GetRoleplay().JailedSeconds = 0;
                        TargetSession.GetRoleplay().SaveStatusComponents("jailed");
                        #endregion

                        return true;
                    }
                #endregion
                #region :at <roomid>
                case "at":
                    {
                        #region Params

                        uint RoomId = Convert.ToUInt32(Params[1]);
                        string RoomName = "null";
                        Room Room = null;
                        Room = RoleplayManager.GenerateRoom(RoomId);
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_builder"))
                        {
                            return true;
                        }

                        if (Params.Length < 1)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :at <roomid>");
                            return true;
                        }
                        else
                        {
                            RoomId = Convert.ToUInt32(Params[1]);
                        }
                        #endregion

                        #region Execute

                        if (Room == null || RoomId <= 0)
                        {
                            Session.SendWhisper("La sala solicitada '" + RoomId + "' no existe!");
                            return true;
                        }

                        RoomName = Room.RoomData.Name;

                        // Misc.Shout(Session, "*Hops on their Super Staff Motorcycle " + RoomName + " [" + RoomId + "]*");
                        Session.GetRoleplay().RequestedTaxi_WaitTime = 0;
                        Session.GetRoleplay().RequestedTaxi_Arrived = false;
                        Session.GetRoleplay().RecentlyCalledTaxi = true;
                        Session.GetRoleplay().RecentlyCalledTaxi_Timeout = 0;
                        Session.GetRoleplay().RequestedTaxiDestination = Room;
                        Session.GetRoleplay().RequestedTaxi = true;
                        Session.GetRoleplay().taxiTimer = new taxiTimer(Session);

                        #endregion

                        return true;
                    }
                #endregion
                #region :senduser <roomid>
                case "senduser":
                    {

                        #region Params
                        uint RoomId = 0;
                        string Username = "";
                        GameClient TargetSession = null;
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }

                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :senduser x <roomid>");
                            return true;
                        }
                        else
                        {

                            if (!Plus.IsNum(Params[2]))
                            {
                                Session.SendWhisperBubble("Solo numeros en el apartado de sala!");
                                return true;
                            }

                            RoomId = Convert.ToUInt32(Params[2]);
                            #region Generate Instances / Sessions
                            Username = Convert.ToString(Params[1]);
                            TargetSession = RoleplayManager.GenerateSession(Username);
                            #endregion
                        }
                        if (!RoleplayManager.CanInteract(Session, TargetSession, false))
                        {
                            Session.SendWhisperBubble("El usuario no fue encontrado!");
                            return true;
                        }                     
                        #endregion

                        #region Execute

                        Room Room = null;

                        Room = RoleplayManager.GenerateRoom(RoomId);

                        if (Room == null || RoomId <= 0) { Session.SendWhisper("La sala solicitada '" + RoomId + "' no existe!"); return true; }

                        if (Room.RoomData.Description.Contains("NOSTAFF"))
                        {
                            Session.SendWhisper("No se permiten usuarios en esta Sala", false, 34);
                            return true;
                        }

                        string Name = "";
                        if (Room != null)
                        {
                            Name = " " + Room.RoomData.Name;
                        }
                        RoleplayManager.Shout(Session, "*Envio a " + TargetSession.GetHabbo().UserName + " hacia " + Name + "[" + RoomId + "]*", 33);
                        TargetSession.GetRoleplay().RequestedTaxi_WaitTime = 0;
                        TargetSession.GetRoleplay().RequestedTaxi_Arrived = false;
                        TargetSession.GetRoleplay().RecentlyCalledTaxi = true;
                        TargetSession.GetRoleplay().RecentlyCalledTaxi_Timeout = 10;
                        TargetSession.GetRoleplay().RequestedTaxiDestination = Room;
                        TargetSession.GetRoleplay().RequestedTaxi = true;
                        TargetSession.GetRoleplay().taxiTimer = new taxiTimer(TargetSession);

                        #endregion

                        return true;
                    }
                #endregion
                #region :summonall
                case "summonall":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_owner"))
                        {
                            return true;
                        }
                        #endregion

                        #region Execute


                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {

                                if (client == null)
                                    continue;

                                if (client.GetHabbo() == null)
                                    continue;

                                if (client.GetHabbo().CurrentRoom == null)
                                    continue;


                                if (client.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                                {
                                    client.GetMessageHandler().PrepareRoomForUser(Session.GetHabbo().CurrentRoomId, null);
                                }
                            }
                        }

                        RoleplayManager.Shout(Session, "*Trajo a todos los usuarios del hotel*", 33);

                        #endregion

                        return true;
                    }
                #endregion
                #region :warptou
                case "warptou":
                case "warpmeto":
                    {

                        #region Params
                        string Username = "";
                        GameClient TargetSession = null;
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_mod") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("This command is for Events Staff only!");
                            return true;
                        }

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :warptou <user>");
                            return true;
                        }
                        else
                        {
                            #region Generate Instances / Sessions
                            Username = Convert.ToString(Params[1]);
                            TargetSession = RoleplayManager.GenerateSession(Username);
                            #endregion
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisper("El usuario no esta en esta sala!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoomUser targ = null;
                        RoomUser me = null;

                        targ = TargetSession.GetHabbo().GetRoomUser();
                        me = Session.GetHabbo().GetRoomUser();

                        me.ClearMovement();
                        me.X = targ.X;
                        me.Y = targ.Y;
                        me.Z = targ.Z;

                        me.SetPos(targ.X, targ.Y, targ.Z);
                        me.UpdateNeeded = true;

                        RoleplayManager.Shout(Session, "*Warps to " + TargetSession.GetHabbo().UserName + "*");

                        #endregion
                        return true;
                    }
                #endregion
                #region :warptome
                case "warptome":
                    {

                        #region Params
                        string Username = "";
                        GameClient TargetSession = null;
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :warptome <usuario>");
                            return true;
                        }
                        else
                        {
                            #region Generate Instances / Sessions
                            Username = Convert.ToString(Params[1]);
                            TargetSession = RoleplayManager.GenerateSession(Username);
                            #endregion
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisper("El usuario no esta en esta sala!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoomUser targ = null;
                        RoomUser me = null;

                        targ = TargetSession.GetHabbo().GetRoomUser();
                        me = Session.GetHabbo().GetRoomUser();

                        targ.ClearMovement();
                        targ.X = me.X;
                        targ.Y = me.Y;
                        targ.Z = me.Z;

                        targ.SetPos(me.X, me.Y, me.Z);
                        targ.UpdateNeeded = true;

                        RoleplayManager.Shout(Session, "*Transporto a " + TargetSession.GetHabbo().UserName + "*");

                        #endregion


                        return true;
                    }
                #endregion
                #region :roomheal
                case "roomheal":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_events") || (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager")))
                        {
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("EVENTS") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("You can only roomheal in an EVENTS room!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {

                                if (client == null)
                                    continue;

                                if (client.GetHabbo() == null)
                                    continue;

                                if (client.GetRoleplay() == null)
                                    continue;

                                if (client.GetHabbo().CurrentRoom == null)
                                    continue;



                                if (client.GetHabbo().CurrentRoom == Session.GetHabbo().CurrentRoom)
                                {
                                    client.GetRoleplay().CurHealth = client.GetRoleplay().MaxHealth;
                                    client.GetRoleplay().Energy = 100;
                                    client.GetRoleplay().SaveQuickStat("curhealth", client.GetRoleplay().MaxHealth + "");
                                    client.GetRoleplay().SaveQuickStat("energy", "100");
                                    client.SendWhisper("Un administrador le dio vida a la sala!");
                                }
                            }

                        }
                        RoleplayManager.Shout(Session, "*Usando poderes divinos para darle vida a la sala*", 1);

                        #endregion

                        return true;
                    }
                #endregion

                #region Bank Vault & Nuke Refills

                #region :refillvault

                case "refillvault":
                case "llenarboveda":
                    {
                        #region Conditions

                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return false;
                        }
                        if (RoleplayManager.VaultRobbery > 100)
                        {
                            Session.SendWhisper("La boveda no necesita ser llenada");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.VaultRobbery = 100000;
                        RoleplayManager.Shout(Session, "*La boveda fue llenada*", 33);

                        #endregion

                        return true;
                    }

                #endregion

                #region :setvault

                case "setvault":
                case "masboveda":
                    {
                        #region Vars

                        int Amount = Convert.ToInt32(Params[1]);

                        #endregion

                        #region Conditions

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :masboveda <cantidad>");
                            return true;
                        }

                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return false;
                        }
                        if (Amount > 1000000)
                        {
                            Session.SendWhisper("No se puede poner m√°s de $1,000,000!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.VaultRobbery = Amount;
                        RoleplayManager.Shout(Session, "*El dinero de la boveda ahora es $" + Amount + "*", 33);

                        #endregion

                        return true;
                    }

                #endregion

                #region :setnukes

                case "setnukes":
                case "masnuclear":
                    {
                        #region Conditions

                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return false;
                        }

                        if (RoleplayManager.NukesOccurred <= 0)
                        {
                            Session.SendWhisper("Actualmente el sistema nuclear no se puede mover!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.NukesOccurred = 0;
                        Session.SendWhisper("Correcto!");

                        #endregion

                        return true;
                    }

                #endregion

                #endregion

                #region Color Wars

                #region :setprize
                case "setprize":
                case "premioevento":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisperBubble("Solo STAFFS pueden hacer uso de esto!", 1);
                            return true;
                        }

                        ColourManager.Prize = Convert.ToInt32(Params[1]);
                        RoleplayManager.Shout(Session, "El premio de este evento es de " + ColourManager.Prize + " billetes!", 33);
                        return true;
                    }
                #endregion

                #region :forcewin <team>
                case "forcewin":
                case "darvictoria":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }

                        string Team;

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            return true;
                        }
                        else
                        {
                            Team = Params[1];
                        }

                        if (!ColourManager.Started)
                        {
                            Session.SendWhisper("Actualmente la guerra de colores no esta activa!");
                            return true;
                        }

                        lock (ColourManager.Teams.Values)
                        {
                            foreach (Team team in ColourManager.Teams.Values)
                            {
                                if (team.Colour == Team)
                                {

                                }
                                else
                                {
                                    ColourManager.EliminateTeam(team);
                                }


                                //
                            }
                        }

                        Session.Shout("*Uso sus poderes divinos para que gane el equipo " + Team.ToUpper() + "*");

                        return true;
                    }
                #endregion

                #region :addtoteam <username> <team>
                case "addtoteam":
                case "agregarequipo":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Session.SendWhisper("Este comando es solo para STAFFS!");
                            return true;
                        }


                        string Username = null;
                        string Color = null;
                        GameClient TargetSession;

                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :agregarequipo <usuario> <equipo>");
                            return true;
                        }


                        Username = Params[1];
                        Color = Params[2];

                        if (!ColourManager.Teams.ContainsKey(Color.ToLower()))
                        {
                            Session.SendWhisper("El equipo '" + Color.ToLower() + "' no existe!");
                        }

                        TargetSession = RoleplayManager.GenerateSession(Username.ToLower());

                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no existe o no esta conectado!");
                            return true;
                        }

                        if (TargetSession.GetHabbo() == null)
                        {
                            Session.SendWhisper("El usuario no existe o no esta conectado!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().CurrentRoom == null)
                        {
                            Session.SendWhisper("El usuario no existe o no esta conectado!");
                            return true;
                        }

                        if (TargetSession.GetRoleplay().inColourWars)
                        {
                            ColourManager.RemovePlayerFromTeam(TargetSession, TargetSession.GetRoleplay().ColourWarTeam, true, "Fuiste removido por un administrador");
                        }




                        Session.Shout("*Uso sus poderes divinos para agregar a " + TargetSession.GetHabbo().UserName + " al equipo " + Color.ToUpper() + "*");

                        ColourManager.ForceAddPlayerToTeam(TargetSession, Color.ToLower());

                        return true;
                    }

                #endregion

                #region :forcestop
                case "forcestop":
                case "finalizarevento":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisperBubble("Esta funcion es solo para STAFFS!", 1);
                            return true;
                        }

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {

                                if (client == null)
                                    continue;

                                if (client.GetHabbo() == null)
                                    continue;

                                if (client.GetHabbo().CurrentRoom == null)
                                    continue;

                                if (!client.GetHabbo().CurrentRoom.RoomData.Description.Contains("COLOR"))
                                {
                                    continue;
                                }

                                if (client.GetRoleplay() != null)
                                {
                                    if (client.GetRoleplay().inColourWars)
                                    {
                                        ColourManager.RemovePlayerFromTeam(client, client.GetRoleplay().ColourWarTeam, false, "An admin has stopped the game!");
                                    }
                                }

                                Room Room = RoleplayManager.GenerateRoom(ColourManager.MainLobby);
                                client.GetRoleplay().RequestedTaxi_Arrived = false;
                                client.GetRoleplay().RecentlyCalledTaxi = true;
                                client.GetRoleplay().RecentlyCalledTaxi_Timeout = 10;
                                client.GetRoleplay().RequestedTaxiDestination = Room;
                                client.GetRoleplay().RequestedTaxi = true;
                                client.GetRoleplay().taxiTimer = new taxiTimer(client);

                            }
                        }

                        ColourManager.EndGame();
                        Session.Shout("*Uso sus poderes divinos para finalizar el evento*");

                        return true;
                    }
                #endregion

                #region :forcestart
                case "forcestart":
                case "comenzarevento":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisperBubble("Esta funcion es solo para STAFFS!", 1);
                            return true;
                        }

                        ColourManager.TryStart(true);
                        Session.Shout("*Uso sus poderes divinos para comenzar el evento*");

                        return true;
                    }

                #endregion

                #endregion

                #region :coinself
                case "coinself":
                case "darbilletes":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_builder"))
                        {
                            return true;
                        }
                        if (!RoleplayManager.BypassRights(Session) && Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            Session.SendWhisper("No tienes permiso para hacer esto!");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :darbilletes <cantidad>");
                            return true;
                        }
                        int creditsToAdd;
                        if (int.TryParse(Params[1], out creditsToAdd))
                        {
                            Session.GetHabbo().Credits = Session.GetHabbo().Credits + creditsToAdd;
                            Session.GetHabbo().UpdateCreditsBalance();
                            Session.SendWhisper("Te diste $" + creditsToAdd + "");
                            return true;
                        }
                        else
                        {
                            Session.SendNotif("Solo numeros!");
                            return true;
                        }
                    }
                #endregion
                #region :airstrike
                case "airstrike":
                case "ataqueaero":
                    {
                        #region Conditions
                        if (Session.GetHabbo().Id != 1)
                        {
                            return false;
                        }
                        #endregion

                        #region Execute
                        lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                        {
                            foreach (RoomUser client in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {

                                if (client == null)
                                    continue;
                                if (client.GetClient() == null)
                                    continue;
                                if (client.GetClient().GetRoleplay() == null)
                                    continue;
                                if (client.GetClient().GetHabbo() == null)
                                    continue;
                                if (client.GetClient().GetHabbo().CurrentRoom == null)
                                    continue;
                                if (client.GetClient().GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                                    continue;

                                if (!RoleplayManager.BypassRights(client.GetClient()))
                                {
                                    client.GetClient().GetRoleplay().DeadFigSet = false;
                                    client.GetClient().GetRoleplay().DeadSeconds = 60;
                                    client.GetClient().GetRoleplay().DeadTimer = 2;
                                    client.GetClient().GetRoleplay().Dead = true;
                                    client.GetClient().GetRoleplay().SaveStatusComponents("dead");
                                    RoleplayManager.HandleDeath(client.GetClient());
                                    client.GetClient().SendNotif("Fuiste matado por un ataque aereo!");
                                }
                            }
                        }
                        RoleplayManager.Shout(Session, "*Solicito un ataque aereo*", 33);

                        #endregion

                        return true;
                    }
                #endregion
                #region :roomrelease
                case "roomrelease":
                case "revivirsala":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("HOSP") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Solo puedes usar este comando en el hospital!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (client == null)
                                    continue;

                                if (client.GetRoleplay() == null)
                                    continue;

                                if (client.GetHabbo() == null)
                                    continue;

                                if (client.GetHabbo().CurrentRoom == null)
                                    continue;

                                if (client.GetHabbo().CurrentRoom == Session.GetHabbo().CurrentRoom)
                                {

                                    if (client.GetRoleplay().Jailed)
                                    {
                                        client.GetRoleplay().JailTimer = 0;
                                        client.GetRoleplay().JailedSeconds = 0;
                                        client.GetRoleplay().SaveStatusComponents("jailed");
                                    }

                                    if (client.GetRoleplay().Dead)
                                    {
                                        client.GetRoleplay().DeadTimer = 0;
                                        client.GetRoleplay().DeadSeconds = 0;
                                        client.GetRoleplay().SaveStatusComponents("dead");
                                        client.GetRoleplay().CurHealth = client.GetRoleplay().MaxHealth;
                                    }

                                }
                            }
                        }
                        RoleplayManager.Shout(Session, "*Utilizando poderes divinos*", 33);

                        #endregion

                        return true;

                    }
                #endregion
                #region :sendroom
                case "sendroom":
                case "enviarsala":
                    {
                        #region Conditions
                        uint RoomId = 1;
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :enviarsala <id>");
                            return true;
                        }
                        else
                        {
                            RoomId = Convert.ToUInt32(Params[1]);
                        }
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        #endregion

                        #region Execute
                        try
                        {
                            foreach (RoomUser User in Session.GetHabbo().CurrentRoom.GetRoomUserManager().UserList.Values)
                            {
                                if (User == null)
                                {
                                    continue;
                                }

                                if (User.GetClient() == null)
                                    continue;


                                if (User.GetClient().GetMessageHandler() == null)
                                    continue;

                                if (User.GetClient().GetHabbo() == null)
                                    continue;

                                if (User.GetClient() == Session)
                                    continue;

                                User.GetClient().GetMessageHandler().PrepareRoomForUser(RoomId, "");
                            }
                            Room Room = null;
                            Room = RoleplayManager.GenerateRoom(RoomId);
                            string Name = "";
                            if (Room != null)
                            {
                                Name = " " + Room.RoomData.Name;
                            }

                            RoleplayManager.Shout(Session, "*Envio a toda la sala a " + Name + " [" + RoomId + "]*", 33);
                        }
                        catch (Exception)
                        {

                        }
                        #endregion

                        return true;
                    }
                #endregion
                #region :summonstaff
                case "summonstaff":
                case "staffall":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_senior"))
                        {
                            return true;
                        }
                        #endregion

                        #region Execute
                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (client == null)
                                    continue;
                                if (client.GetHabbo() == null)
                                    continue;
                                if (client.GetHabbo().CurrentRoom == Session.GetHabbo().CurrentRoom)
                                    continue;
                                if (!client.GetHabbo().HasFuse("fuse_events"))
                                    continue;

                                client.GetMessageHandler().PrepareRoomForUser(Session.GetHabbo().CurrentRoomId, null);
                            }
                        }
                        RoleplayManager.Shout(Session, "*Trajo a todos los miembros del gobierno*", 33);
                        #endregion

                        return true;
                    }
                #endregion
                #region :summonf
                case "summonm":
                case "femaleall":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_senior"))
                        {
                            return true;
                        }
                        #endregion

                        #region Execute
                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (client == null)
                                    continue;
                                if (client.GetHabbo() == null)
                                    continue;
                                if (client.GetHabbo().CurrentRoom == Session.GetHabbo().CurrentRoom)
                                    continue;
                                if (!client.GetHabbo().Gender.ToLower().Contains("f"))
                                    continue;

                                client.GetMessageHandler().PrepareRoomForUser(Session.GetHabbo().CurrentRoomId, null);
                            }
                        }
                        RoleplayManager.Shout(Session, "*Trajo a todas las mujeres*", 33);
                        #endregion

                        return true;
                    }
                #endregion
                #region :vipa
                case "rclub":
                case "clubalert":
                case "clubha":
                case "clubr":
                case "radiovip":
                    {

                        #region Conditions
                        string Notice = "";
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :radiovip <mensaje>");
                            return true;
                        }
                        else
                        {
                            Notice = MergeParams(Params, 1);
                        }
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("No eres un usuario VIP!");
                            return true;
                        }
                        if (Notice == null)
                        {
                            Session.SendWhisper("Ese no es un mensaje valido!");
                            return true;
                        }
                        if (Session.GetHabbo().vipAlertsOff)
                        {
                            Session.SendWhisper("No puedes enviar alertas por que las tienes desactivadas!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SHAME") && !RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("No puedes hacer esto en esta sala.");
                            return true;
                        }
                        if (RoleplayManager.GVIPAlertsDisabled && !RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("Un administrador bloqueo que uses este comando!");
                            return true;
                        }
                        if (Session.GetRoleplay().BannedFromVIPAlert)
                        {
                            Session.SendWhisper("En este momento estan bloqueadas las alertas VIP!");
                            return true;
                        }

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("vipa_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("vipa_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["vipa_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["vipa_cooldown"] + "/2]");
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoleplayManager.sendVIPAlert(Session, Notice, false);
                        Session.GetRoleplay().MultiCoolDown["vipa_cooldown"] = 2;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :togglevipalerts
                case "dradiovip":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            return true;
                        }
                        #endregion

                        #region Execute
                        bool vipAlertsOff = Session.GetHabbo().vipAlertsOff;

                        if (vipAlertsOff)
                        {
                            Session.GetHabbo().vipAlertsOff = false;
                            Session.Shout("*Radio VIP activada*");
                        }
                        else
                        {
                            Session.GetHabbo().vipAlertsOff = true;
                            Session.Shout("*Radio VIP desactivada*");
                        }
                        #endregion

                        return true;
                    }
                #endregion
                #region :givevip
                case "givevip":
                case "darvip":
                    {
                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank != 23)
                        {
                            Session.SendWhisper("No puedes hacer esto.");
                            return true;
                        }
                        if (TargetSession.GetHabbo().Rank == 2)
                        {
                            Session.SendWhisper("Este usuario ya es miembro VIP.");
                            return true;
                        }
                        if (Params.Length <= 1)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: darvip: <usuario>");
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Le dio al usuario " + TargetSession.GetHabbo().UserName + " VIP*", 33);
                        TargetSession.GetHabbo().Rank = 2;
                        RoleplayManager.GiveMoney(TargetSession, +2000);
                        RoleplayManager.GiveCredit(TargetSession, +100);
                        TargetSession.GetHabbo().BelCredits += 5;
                        TargetSession.GetHabbo().UpdateActivityPointsBalance();

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.RunFastQuery("UPDATE `users` SET `rank` = '2' WHERE `id` = '" + TargetSession.GetHabbo().Id + "'");
                            dbClient.RunFastQuery("UPDATE `users` SET `vip` = '1' WHERE `id` = '" + TargetSession.GetHabbo().Id + "'");
                        }

                        RoleplayManager.Shout(TargetSession, "*Se desconecto (Recibio VIP)*", 30);
                        TargetSession.GetConnection().Dispose();


                        #endregion

                        return true;
                    }


                #endregion
                #region :givevip
                case "quitarvip":
                    {
                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank != 23)
                        {
                            Session.SendWhisper("No puedes hacer esto.");
                            return true;
                        }
                        if (TargetSession.GetHabbo().Rank != 2)
                        {
                            Session.SendWhisper("Este usuario no es miembro VIP.");
                            return true;
                        }
                        if (Params.Length <= 1)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: quitarvip: <usuario>");
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Le quito al usuario " + TargetSession.GetHabbo().UserName + " VIP*", 33);
                        TargetSession.GetHabbo().Rank = 1;

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.RunFastQuery("UPDATE `users` SET `rank` = '1' WHERE `id` = '" + TargetSession.GetHabbo().Id + "'");
                            dbClient.RunFastQuery("UPDATE `users` SET `vip` = '0' WHERE `id` = '" + TargetSession.GetHabbo().Id + "'");
                        }

                        RoleplayManager.Shout(TargetSession, "*Se desconecto (Se le quito VIP)*", 30);
                        TargetSession.GetConnection().Dispose();


                        #endregion

                        return true;
                    }


                #endregion
                #region :staffcommands (Staff Commands)
                case "staffcommands":
                case "staffcmds":
                case "scomandos":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        StringBuilder StaffCmds = new StringBuilder();

                        StaffCmds.Append("Esta es la lista completa de rangos actualmente disponibles dependiendo tu rango, recuerda que pueden ser cambiados constantemente.\n");
                        StaffCmds.Append("CUALQUIER MIEMBRO QUE SEA SORPRENDIDO HACIENDO MAL USO DE ESTOS COMANDOS LLEVARA A GRAVES CONSECUENCIAS.\n\n");

                        StaffCmds.Append("-------------------------------------------------\nEntretenimiento - Eventos\n-------------------------------------------------\n");
                        StaffCmds.Append(":sa <mensaje> - Enviar mensaje a los miembros del equipo conectados\n");
                        StaffCmds.Append(":teleport - Teleportacion dentro de la sala\n");
                        StaffCmds.Append(":override - Caminar por ensima de los furnis\n");
                        StaffCmds.Append(":senduser <usuario> <salaid> - Enviar usuario espesifico a la sala espesifica\n");
                        StaffCmds.Append(":startpurge - Iniciar evento de purga\n");
                        StaffCmds.Append(":stoppurge - Parar evento de purga\n");
                        StaffCmds.Append(":startinfection - Iniciar evento de infeccion\n");
                        StaffCmds.Append(":stopinfection - Parar evento de infeccion\n");
                        StaffCmds.Append(":eventha <info> - Iniciar evento. Recuerda que los eventos son en salas espesificas\n");
                        StaffCmds.Append(":setprize <cantidad> - Establecer permio para los bandos\n");
                        StaffCmds.Append(":ban <usuario> - Banear usuario\n");
                        StaffCmds.Append(":forcestart - Forzar inicio para comenzar guerra de grupos criminales\n");
                        StaffCmds.Append(":strabajar - Empezar a trabajar como Staff.\n");
                        StaffCmds.Append(":sparartrabajo - Dejar de trabajar como Staff.\n");

                        StaffCmds.Append("-------------------------------------------------\nArquitectos\n-------------------------------------------------\n");
                        StaffCmds.Append(":coinself <cantidad> - Dar monedas\n");
                        StaffCmds.Append(":follow <usuario> - Seguir usuario por la ciudad\n");

                        StaffCmds.Append("-------------------------------------------------\nModeradores\n-------------------------------------------------\n");
                        StaffCmds.Append(":spaceminer <usuario> - Dar empleo de minero\n");
                        StaffCmds.Append(":farmer <usuario> - Dar empleo de agricultor\n");
                        StaffCmds.Append(":ban <usuario> <minutos> <razon> - Banear usuario temporalmente\n");
                        StaffCmds.Append(":superban <usuario> <razon> - Banear usuario permanentemente\n");
                        StaffCmds.Append(":ipban <usuario> <razon> - Banear IP permanentemente\n");
                        StaffCmds.Append(":summon <usuario> - Traer usuario a la sala\n");
                        StaffCmds.Append(":warptome <usuario> - Teleportar usuario\n");
                        StaffCmds.Append(":warptou <usuario> - Teleportar usuario\n");
                        StaffCmds.Append(":roomheal - Subir los niveles de vida de toda la sala (Solo en el hospital)\n");
                        StaffCmds.Append(":roomrelease - Revivir todos los usuarios muertos de la sala (Solo en el hospital)\n");
                        StaffCmds.Append(":ideas - Abrir lista de ideas\n");
                        StaffCmds.Append(":agregaridea <idea> - Agregar idea a la lista de ideas\n");
                        StaffCmds.Append(":borraridea <id> - Eliminar idea de la lista de ideas\n");

                        StaffCmds.Append("-------------------------------------------------\nAdministradores\n-------------------------------------------------\n");
                        StaffCmds.Append(":dartrabajo <usuario> <empresa ID> <rango ID> - Contratar usuarios para las empresas\n");
                        StaffCmds.Append(":flood <usuario> <segundos> - Floods a un usuario durante un tiempo espesifico\n");
                        StaffCmds.Append(":adminjail <username> <minutos> - Arrestar usuario desde cualquier sala\n");
                        StaffCmds.Append(":adminrelease <usuario> - Quitar arresto de un usuario desde cualquier sala\n");
                        StaffCmds.Append(":restore <usuario> - Descargar usuario desde cualquier sala.\n");

                        StaffCmds.Append("-------------------------------------------------\nCEOS\n-------------------------------------------------\n");
                        StaffCmds.Append(":roomheal - Subir niveles de vida de toda la sala completa\n");
                        StaffCmds.Append(":roomrelease - Volver a la vida todos los usuarios muertos de la sala\n");
                        StaffCmds.Append(":ha <mensaje> - Enviar alerta a todo el hotel\n");
                        StaffCmds.Append(":wha <mensaje> - Susurrar mensaje a todo el hotel\n");
                        StaffCmds.Append(":flag <usuario> - Cambiar nombre de usuario por uno valido\n");

                        StaffCmds.Append("-------------------------------------------------\nReglas\n-------------------------------------------------\n");
                        StaffCmds.Append("Si un miembro del equipo rompe alguna de estas reglas se tomaran acciones inmediatamente.\n\n");
                        StaffCmds.Append("Siempre deben cumplirse las reglas, no eres mas que los demas.\n");
                        StaffCmds.Append("Nunca usar tu rango para ser superior a los usuarios.\n");
                        StaffCmds.Append("No abusar de los comandos.\n");
                        StaffCmds.Append("No dar ban sin una razon justa o leer la guia de baneos.\n");
                        StaffCmds.Append("No tomar favoritismo con tus amigos sobre algun usuario.\n");
                        StaffCmds.Append("Siempre ayudar a los usuarios sin importar el pasado.\n");
                        StaffCmds.Append("No hacer el trabajo de un rango mas alto.\n");
                        StaffCmds.Append("No discutir con algun usuario o miembro del equipo.\n");
                        StaffCmds.Append("Ser profesional todo el tiempo.\n");
                        StaffCmds.Append("Nunca dar mas de 3,000c como premio.\n");
                        StaffCmds.Append("Nunca contratar a un usuario nuevo por ensima del rango 1 en alguna empresa.\n");
                        StaffCmds.Append("Nunca pedir un asenso.\n");

                        StaffCmds.Append("-------------------------------------------------\nGuia de Baneos\n-------------------------------------------------\n");
                        StaffCmds.Append("Recuerda usar SIEMPRE esta guia antes de banear.\n\n");
                        StaffCmds.Append("- 10 Minutos:\n10 Minutos unicamente son como una advertencia!\n\nSpam\nAbuso\nBullying\nGeneralidad\n\n");
                        StaffCmds.Append("- 30 Minutos:\n\nBromas de Enfermedades\nRacismo\nAbuso del sitio (Gym, etc.)\n\n");
                        StaffCmds.Append("- 60 Minutos:\n\nContinuar Spam\nAbuso\nBullying\n\n");
                        StaffCmds.Append("- IP Ban:\n\nAdvertencia\nDespues un superban\n\n");
                        StaffCmds.Append("- Super Ban:\n\nUsar dos cuentas dentro del sitio\n\n");

                        StaffCmds.Append("- Recuerda que esta solo es una peque√±a guia, la lista completa sera publicada posteriormente.\n");
                        StaffCmds.Append("- Si tienes alguna duda recuerda contactar a alguien de rangos superiores!\n");

                        Session.SendNotifWithScroll(StaffCmds.ToString());

                        return true;
                    }
                #endregion
                #region :update_rocks
                case "update_rocks":
                case "initrocks":
                case "actualizarluna":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        Session.SendWhisperBubble("Los lugares de la luna fuer√≥n actualizados.", 1);
                        spaceManager.initSpace();
                        return true;
                    }
                #endregion
                #region :update_farming
                case "update_farming":
                case "initfarming":
                case "actualizargranjas":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        Session.SendWhisperBubble("Los lugares para sembrar fueron actualizados", 1);
                        farmingManager.init();
                        return true;
                    }
                #endregion
                #region :update_slots
                case "update_slots":
                case "initslots":
                case "actualizarcasino":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        Session.SendWhisperBubble("Las maquinas del casino fueron actualizadas.", 1);
                        SlotsManager.init();
                        return true;
                    }
                #endregion
                #region :update_models
                case "update_models":
                case "refresh_models":
                case "initmodels":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }

                        Room room = Session.GetHabbo().CurrentRoom;

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            Plus.GetGame().GetRoomManager().LoadModels(dbClient);
                            room.ResetGameMap(room.RoomData.ModelName, room.RoomData.WallHeight, room.RoomData.WallThickness, room.RoomData.FloorThickness);
                        }
                        Session.SendWhisperBubble("Los modelos de las salas fuer√≥n actualizados.", 1);

                        return true;
                    }

                #endregion
                #region :giveweapon x <weapon>

                case "dararma":
                    {
                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :dararma <usuario> <arma>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        string Offer = Convert.ToString(Params[2]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_owner"))
                        {
                            return false;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }
                        Dictionary<string, Weapon> Weaponss = new Dictionary<string, Weapon>();
                        Dictionary<string, Weapon> TWeaponss = new Dictionary<string, Weapon>();
                        Weaponss.Clear();
                        TWeaponss.Clear();
                        //foreach (KeyValuePair<string, Weapon> Weaponlol in Session.GetRoleplay().Weapons)
                        //{
                        //    Weaponss.Add(weaponManager.GetWeaponName(Weaponlol.Key), Weaponlol.Value);
                        //
                        //}
                        foreach (KeyValuePair<string, Weapon> Weaponlol in TargetSession.GetRoleplay().Weapons)
                        {
                            TWeaponss.Add(WeaponManager.GetWeaponName(Weaponlol.Key), Weaponlol.Value);
                        }

                        if (TWeaponss.ContainsKey(Offer))
                        {
                            RoleplayManager.Shout(Session, "*Saca un " + Offer.ToLower() + " de su bolsillo, se la pone en las manos a " + TargetSession.GetHabbo().UserName + ", pero ya tiene una " + WeaponManager.WeaponsData[Offer.ToLower()] + "*", 33);
                            Session.SendWhisper("Este usuario ya tiene " + Offer);
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Saca un " + Offer.ToLower() + " de su bolsillo, se la pone en las manos a " + TargetSession.GetHabbo().UserName + "*", 33);
                        TargetSession.GetRoleplay().addWeapon(WeaponManager.WeaponsData[Offer.ToLower()].Name);

                        #endregion

                        return true;
                    }

                #endregion
                #region :givestats x <stat>

                case "darestadisticas":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 3))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :darestadisticas <usuario> <tipo> <cantidad>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        string Stats = Convert.ToString(Params[2]);
                        int Amount = Convert.ToInt32(Params[3]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions

                        if (!RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("No puedes hacer esto.");
                            return true;
                        }
                        if (Amount <= 0)
                        {
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Uso sus poderes divinos para dar [" + Amount + "]" + Stats + " a " + TargetSession.GetHabbo().UserName + "*", 33);
                        TargetSession.GetRoleplay().SaveQuickStat(Stats, Convert.ToString(Amount));

                        #endregion


                        return true;
                    }
                #endregion
                #region :todo
                case "ideas":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        string Todo = "---- Lista de Ideas ----\n\nID - Usuario - Idea\n\n";
                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("SELECT * FROM todo");
                            DataTable Table = dbClient.GetTable();
                            foreach (DataRow Row in Table.Rows)
                            {
                                Todo += "[#" + Row["id"] + "] " + Row["user"] + " - " + Row["details"] + "\n";
                                /*string Completed = (Row["completed"] == "0") ? "ÔøΩ (No)" : "ÔøΩ (Yes)";
                                Todo += "ID: " + Row["id"] + "\n";
                                Todo += "User: " + Row["user"] + "\n";
                                Todo += "Idea: " + Row["details"] + "\n";
                                Todo += "Completed: " + Completed + "\n\n";*/
                            }
                        }
                        Session.SendNotifWithScroll(Todo);
                        return true;
                    }
                #endregion
                #region :todoadd
                case "agregaridea":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        string Idea = ChatCommandHandler.MergeParams(Params, 1);
                        string User = Session.GetHabbo().UserName;
                        using (var adapter = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            adapter.SetQuery("INSERT INTO todo VALUES (null, @user, @details)");
                            adapter.AddParameter("user", User);
                            adapter.AddParameter("details", Idea);
                            adapter.RunQuery();
                            Session.SendWhisper("Agregaste una idea correctamente.");
                        }
                        return true;
                    }
                #endregion
                #region :tododel
                case "eliminaridea":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        string Id = Params[1];
                        using (var adapter = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            adapter.SetQuery("DELETE FROM todo WHERE id = @id");
                            adapter.AddParameter("id", Id);
                            adapter.RunQuery();
                            Session.SendWhisper("Eliminaste la lista de ideas.");
                        }
                        return true;
                    }
                #endregion
                #region :freezeroom
                case "congelarsala":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_senior"))
                        {
                            return true;
                        }
                        #endregion

                        #region Execute
                        lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                        {
                            foreach (RoomUser client in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {
                                if (client == null)
                                    continue;
                                if (client.GetClient() == null)
                                    continue;
                                if (client.GetClient().GetHabbo() == null)
                                    continue;
                                if (client.GetClient().GetHabbo().CurrentRoom == null)
                                    continue;

                                if (client.GetClient().GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                                    continue;

                                client.ClearMovement();
                                client.CanWalk = false;
                                client.Frozen = true;
                                client.ApplyEffect(12);
                            }
                        }



                        RoleplayManager.Shout(Session, "*Uso sus poderes divinos para congelar la sala*", 1);

                        #endregion

                        return true;
                    }
                #endregion
                #region :unfreezeroom
                case "descongelarsala":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_senior"))
                        {
                            return true;
                        }
                        #endregion

                        #region Execute
                        lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                        {
                            foreach (RoomUser client in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {
                                if (client == null)
                                    continue;
                                if (client.GetClient() == null)
                                    continue;
                                if (client.GetClient().GetHabbo() == null)
                                    continue;
                                if (client.GetClient().GetHabbo().CurrentRoom == null)
                                    continue;
                                if (client.GetClient().GetHabbo().GetRoomUser() == null)
                                    continue;
                                if (client.GetClient().GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                                    continue;

                                client.CanWalk = true;
                                client.Frozen = false;
                                client.ApplyEffect(0);
                            }
                        }

                        RoleplayManager.Shout(Session, "*Uso sus poderes divinos para des congelar la sala*", 33);

                        #endregion

                        return true;
                    }
                #endregion
                #region :warpalltome
                case "atraertodos":
                    {

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_senior"))
                        {
                            return true;
                        }
                        #endregion

                        #region Execute

                        lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                        {
                            foreach (RoomUser client in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {
                                if (client == null)
                                    continue;
                                if (client.GetClient() == null)
                                    continue;
                                if (client.GetClient().GetHabbo() == null)
                                    continue;
                                if (client.GetClient().GetHabbo().CurrentRoom == null)
                                    continue;
                                if (client.GetClient().GetHabbo().GetRoomUser() == null)
                                    continue;
                                if (client.GetClient().GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                                    continue;

                                client.ClearMovement();
                                client.X = Session.GetHabbo().GetRoomUser().X;
                                client.Y = Session.GetHabbo().GetRoomUser().Y;
                                client.Z = Session.GetHabbo().GetRoomUser().Z;

                                client.SetPos(Session.GetHabbo().GetRoomUser().X,
                                              Session.GetHabbo().GetRoomUser().Y,
                                              Session.GetHabbo().GetRoomUser().Z);
                                client.UpdateNeeded = true;
                            }
                        }

                        RoleplayManager.Shout(Session, "*Atraco a todos hacia el*", 33);

                        #endregion


                        return true;
                    }
                #endregion

                #region :mimic

                case "mimic":
                case "copy":
                case "copylook":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }

                        var room = Session.GetHabbo().CurrentRoom;

                        var user = room.GetRoomUserManager().GetRoomUserByHabbo(Params[1]);
                        if (user == null)
                        {
                            Session.SendWhisper(Plus.GetLanguage().GetVar("user_not_found"));
                            return true;
                        }

                        var gender = user.GetClient().GetHabbo().Gender;
                        var look = user.GetClient().GetHabbo().Look;
                        Session.GetHabbo().Gender = gender;
                        Session.GetHabbo().Look = look;
                        using (var adapter = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            adapter.SetQuery(
                                "UPDATE users SET gender = @gender, look = @look WHERE id = " + Session.GetHabbo().Id);
                            adapter.AddParameter("gender", gender);
                            adapter.AddParameter("look", look);
                            adapter.RunQuery();
                        }

                        var myUser = room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().UserName);
                        if (myUser == null) return true;

                        var message = new ServerMessage(LibraryParser.OutgoingRequest("UpdateUserDataMessageComposer"));
                        message.AppendInteger(myUser.VirtualId);
                        message.AppendString(Session.GetHabbo().Look);
                        message.AppendString(Session.GetHabbo().Gender.ToLower());
                        message.AppendString(Session.GetHabbo().Motto);
                        message.AppendInteger(Session.GetHabbo().AchievementPoints);
                        room.SendMessage(message.GetReversedBytes());

                        return true;
                    }

                #endregion
                #endregion

                #region Roleplay Categorized

                #region Crime

                #region :rob x
                case "rob":
                    {
                        #region Generate Instances / Sessions
                        string Target = null;
                        GameClient TargetSession = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :rob <usuario>");
                            return true;
                        }
                        else
                        {
                            Target = Params[1];
                        }
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        if (!RoleplayManager.CanInteract(Session, TargetSession, true))
                        {
                            Session.SendWhisperBubble("El usuario no se encuentra en esta sala!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("rob_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("rob_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["rob_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["rob_cooldown"] + "/300]");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :rob <usuario>");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOROB") && RoleplayManager.PurgeTime == false)
                        {
                            Session.SendWhisper("En esta sala no se permite robar!");
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SAFEZONE"))
                        {
                            Session.SendWhisper("Lo sentimos, esta es una zona segura!");
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala");
                            return true;
                        }
                        if (TargetSession.GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala");
                            return true;
                        }
                        if (TargetSession.GetHabbo().HasFuse("fuse_builder") && !TargetSession.GetHabbo().HasFuse("fuse_mod"))
                        {
                            Session.SendWhisper("No puedes robar a un constructor!");
                            return true;
                        }
                        if (TargetSession.GetHabbo().HasFuse("fuse_senior") && TargetSession.GetHabbo().Rank != 12)
                        {
                            Session.SendWhisper("No puedes robarle a un miembro del equipo staff!");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().IsNoob)
                        {
                            Session.SendWhisper("Este usuario tiene la proteccion activada!");
                            return true;
                        }
                        if (Session.GetRoleplay().IsNoob)
                        {
                            if (!Session.GetRoleplay().NoobWarned)
                            {
                                Session.SendNotif("Debes desactivar la proteccion para hacer esto!");
                                Session.GetRoleplay().NoobWarned = true;
                                return false;
                            }
                            else
                            {
                                Session.GetRoleplay().RemoveGodProtection();
                            }
                        }
                        if (TargetSession.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("Esta persona esta muerta, no la puedes robar");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("Esta persona esta en prision, no la puedes robar");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No se puede completar esta accion por que estas muerto");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No se puede completar esta accion por que estas en prision");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca!");
                            return true;
                        }


                        #endregion

                        #region Execute

                        Random Rand = new Random();
                        int Genc = 0;
                        int rndNum = new Random(DateTime.Now.Millisecond).Next(1, 20);
                        int Robamt = 0;

                        if (rndNum == 1)
                        {
                            Genc = Rand.Next(1, 500);
                            Robamt += (Session.GetRoleplay().Strength + Session.GetRoleplay().Stamina + 1) * 3 + Genc;
                        }

                        else if (rndNum < 5)
                        {
                            Genc = Rand.Next(1, 200);
                            Robamt += (Session.GetRoleplay().Strength + Session.GetRoleplay().Stamina + 1) * 2 + Genc;
                        }

                        else if (rndNum < 10)
                        {
                            Genc = Rand.Next(1, 90);
                            Robamt += (Session.GetRoleplay().Strength + Session.GetRoleplay().Stamina + 1) + 3 + Genc;
                        }

                        else
                        {
                            Genc = Rand.Next(1, 30);
                            Robamt += (Session.GetRoleplay().Strength + Session.GetRoleplay().Stamina + 1) + 1 + Genc;
                        }

                        int Damage = Rand.Next(Session.GetRoleplay().Stamina, Session.GetRoleplay().Strength + 3);

                        if (TargetSession.GetHabbo().Credits < Genc || TargetSession.GetHabbo().Credits - Genc < 0)
                        {
                            Session.SendWhisper("Este usuario no tenia dinero!");
                            return true;
                        }

                        RoleplayManager.GiveMoney(Session, +Genc);
                        RoleplayManager.GiveMoney(TargetSession, -Genc);
                        TargetSession.GetRoleplay().CurHealth -= Damage;
                        Session.GetRoleplay().EffectSeconds = 5;
                        Session.GetHabbo().GetRoomUser().ApplyEffect(533);
                        RoleplayManager.Shout(Session, "*Ataco a " + TargetSession.GetHabbo().UserName + " causando " + Damage + " de da√±o y robando $" + Robamt + " de el!*");
                        Session.GetRoleplay().MultiCoolDown["rob_cooldown"] = 300;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion

                #region :robbank
                case "robbanco":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("VAULT"))
                        {
                            Session.SendWhisper("Debes estar en la boveda para hacer esto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Robbery)
                        {
                            Session.SendWhisper("Ya estas robando el banco!");
                            return true;
                        }
                        if (Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas trabajando!");
                            return true;
                        }
                        if (Session.GetRoleplay().Intelligence < 15)
                        {
                            Session.SendWhisper("Necesitas tener nivel 15 de Conocimiento para hacer esto!");
                            return true;
                        }
                        if (RoleplayManager.VaultRobbery <= 0)
                        {
                            Session.SendWhisper("Al parecer la boveda ya fue robada!");
                            return true;
                        }
                        if (Session.GetRoleplay().IsNoob)
                        {
                            if (!Session.GetRoleplay().NoobWarned)
                            {
                                Session.SendNotif("Debes tener la proteccion desactivada para hacer esto!");
                                Session.GetRoleplay().NoobWarned = true;
                                return false;
                            }
                            else
                            {
                                Session.GetRoleplay().RemoveGodProtection();
                            }
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("robbery"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("robbery", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["robbery"] > 0)
                        {
                            Session.SendWhisper("Debes esperar para poder robar la boveda de nuevo! [" + Session.GetRoleplay().MultiCoolDown["robbery"] + "/900]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.GetRoleplay().bankRobTimer = new bankRobTimer(Session);
                        Session.GetRoleplay().Robbery = true;
                        Session.GetRoleplay().EffectSeconds = 300;
                        Session.GetHabbo().GetRoomUser().ApplyEffect(523);
                        Session.GetRoleplay().SaveStatusComponents("robbery");
                        RoleplayManager.Shout(Session, "*Comenzo a robar el banco*", 7);
                        Session.SendWhisper("Te restan " + Session.GetRoleplay().bankRobTimer.getTime() + " minutos para completar el robo.");
                        Session.GetRoleplay().MultiCoolDown["robbery"] = 900;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        Radio.send("Alerta en la boveda del banco! " + Session.GetHabbo().CurrentRoom.RoomData.Name + " esta siendo robada! Todas las unidades respondan!", Session, true);
                        #endregion

                    }
                    return true;


                #endregion

                #region :checkvault
                    
                case "boveda":
                    {

                        #region Conditions

                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("VAULT"))
                        {
                            Session.SendWhisper("Debes estar en la boveda para usar este comando!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("vaultcash_check"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("vaultcash_check", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["vaultcash_check"] > 0)
                        {
                            Session.SendWhisper("Debes esperar para volver a hacer esto! [" + Session.GetRoleplay().MultiCoolDown["vaultcash_check"] + "/300]");
                            return true;
                        }

                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Saco el telefono de su bolsillo y marco '#111' para checar su saldo disponible.*", 3);
                        System.Threading.Thread.Sleep(2000);
                        RoleplayManager.Shout(Session, "*Recibio su respuesta, colgo el telefono y lo volvio a guardar*", 3);
                        Session.SendWhisper("Su saldo disponible es: $" + RoleplayManager.VaultRobbery + "!");

                        Session.GetRoleplay().MultiCoolDown["vaultcash_check"] = 300;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }

                #endregion

                #region :robatm
                case "robcajero":
                case "robarcajero":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("ATMROB"))
                        {
                            Session.SendWhisper("En esta sala no hay cajero automatico!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().ATMRobbery)
                        {
                            Session.SendWhisper("Ya estas robando el cajero automatico.");
                            return true;
                        }
                        if (Session.GetRoleplay().Working)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas trabajando.");
                            return true;
                        }
                        if (!Session.GetRoleplay().NearItem("atm_moneymachine", 1))
                        {
                            Session.SendWhisper("Debes estar cerca del cajero automatico!");
                            return true;
                        }
                        if (Session.GetRoleplay().IsNoob)
                        {
                            if (!Session.GetRoleplay().NoobWarned)
                            {
                                Session.SendNotif("Debes tener desactivada la proteccion para hacer esto!");
                                Session.GetRoleplay().NoobWarned = true;
                                return false;
                            }
                            else
                            {
                                Session.GetRoleplay().RemoveGodProtection();
                            }
                        }

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("atm_robbery"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("atm_robbery", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["atm_robbery"] > 0)
                        {
                            Session.SendWhisper("Debes esperar para robar el cajero automatico de nuevo! [" + Session.GetRoleplay().MultiCoolDown["atm_robbery"] + "/900]");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Session.GetRoleplay().ATMRobTimer = new ATMRobTimer(Session);
                        Session.GetRoleplay().ATMRobbery = true;
                        Session.GetRoleplay().SaveStatusComponents("atm_robbery");
                        RoleplayManager.Shout(Session, "*Saca un Oxicorte para perforar el cajero autom√°tico*", 7);
                        Session.SendWhisper("Te restan " + Session.GetRoleplay().ATMRobTimer.getTime() + " minutos para robar el cajero automatico!");
                        Session.GetRoleplay().EffectSeconds = 300;
                        Session.GetHabbo().GetRoomUser().ApplyEffect(523);
                        Session.GetRoleplay().MultiCoolDown["atm_robbery"] = 900;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        Radio.send("Alerta de robo en " + Session.GetHabbo().CurrentRoom.RoomData.Name + " [ID: " + Session.GetHabbo().CurrentRoomId + "]! Todas las unidades!", Session, true);

                        #endregion

                    }
                    return true;


                #endregion

                #region :smokeweed
                case "fumar":
                    {

                        #region Conditions
                        if (Session.GetRoleplay().Dead || Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes fumar marihuana por que estas muerto o en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Weed < 5)
                        {
                            Session.SendWhisper("Debes tener al menos 5g de marihuana para poder fumar!");
                            return true;
                        }
                        if (Session.GetRoleplay().Hunger > 95)
                        {
                            Session.SendWhisper("La marihuana te dara mucha hambre!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("weed_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("weed_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["weed_cooldown"] > 0)
                        {
                            Session.SendWhisper("Cooldown [" + Session.GetRoleplay().MultiCoolDown["weed_cooldown"] + "/120]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Fumo 5g de marihuana [+5 Hambre, +1 Fuerza, -5g Marihuana]*", 4);
                        Session.SendWhisper("Tienes 2 minutos hasta que el efecto pase!");
                        Session.SendWhisper("Depronto tuvo el deseo de comer [+5 Hambre)");
                        Session.GetRoleplay().Weed -= 5;
                        Session.GetRoleplay().SaveQuickStat("weed", "" + Session.GetRoleplay().Weed);
                        int PlusHunger = 5;
                        if (Session.GetRoleplay().Hunger + PlusHunger >= 100)
                        {
                            Session.GetRoleplay().Hunger = 100;
                            Session.GetRoleplay().SaveQuickStat("hunger", "" + Session.GetRoleplay().Hunger);
                            Session.SendWhisper("Muerienvo de hambre!");
                        }
                        else
                        {
                            Session.GetRoleplay().Hunger += PlusHunger;
                            Session.GetRoleplay().SaveQuickStat("hunger", "" + Session.GetRoleplay().Hunger);
                            Session.SendWhisper("Tu hambre es " + Session.GetRoleplay().Hunger + "!");
                        }
                        Session.GetRoleplay().UsingWeed_Bonus += 1;
                        Session.GetRoleplay().weedTimer = new weedTimer(Session);
                        Session.GetRoleplay().UsingWeed = true;
                        Session.GetRoleplay().MultiCoolDown["weed_cooldown"] = 120;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;

                    }
                #endregion

                #region :eatcarrot
                case "inhalar":
                    {

                        #region Conditions
                        if (Session.GetRoleplay().Dead || Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes inhalar cocaina por que estas muerto o en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Hunger == 0)
                        {
                            Session.SendWhisper("No puedes inhalar cocaina por que no tienes hambre!");
                            return true;
                        }
                        if (Session.GetRoleplay().Carrots <= 0)
                        {
                            Session.SendWhisper("No tienes cocaina!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("carrot_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("carrot_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["carrot_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["carrot_cooldown"] + "/10]");
                            return true;
                        }
                        #endregion

                        #region Execute
                        int MinusHunger = 3;
                        int PlusHealth = 10;
                        RoleplayManager.Shout(Session, "*Saco una bolsa con cocaina y la inhalo [-3 Hambre, +10 Vida, -1g de cocaina]*", 7);

                        if (Session.GetRoleplay().Hunger - MinusHunger <= 0)
                        {
                            Session.GetRoleplay().Hunger = 0;
                            Session.GetRoleplay().SaveQuickStat("hunger", "" + Session.GetRoleplay().Hunger);
                            Session.SendWhisper("Estas hambriento!");
                        }
                        else
                        {
                            Session.GetRoleplay().Hunger -= MinusHunger;
                            Session.GetRoleplay().SaveQuickStat("hunger", "" + Session.GetRoleplay().Hunger);
                            Session.SendWhisper("Tu nivel de hambre ahora es " + Session.GetRoleplay().Hunger + "!");
                        }
                        if (Session.GetRoleplay().CurHealth + PlusHealth >= Session.GetRoleplay().MaxHealth)
                        {
                            Session.GetRoleplay().CurHealth = Session.GetRoleplay().MaxHealth;
                            Session.GetRoleplay().SaveQuickStat("curhealth", "" + Session.GetRoleplay().CurHealth);
                            Session.SendWhisper("Tu vida esta completa!");
                        }
                        else
                        {
                            Session.GetRoleplay().CurHealth += PlusHealth;
                            Session.GetRoleplay().SaveQuickStat("curhealth", "" + Session.GetRoleplay().CurHealth);
                            Session.SendWhisper("Tienes " + Session.GetRoleplay().CurHealth + " de vida!");
                        }
                        Session.GetRoleplay().MultiCoolDown["carrot_cooldown"] = 120;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        Session.GetRoleplay().Carrots -= 1;
                        Session.GetRoleplay().SaveQuickStat("carrots", "" + Session.GetRoleplay().Carrots);
                        #endregion

                        return true;

                    }
                #endregion

                #endregion

                #region Gangs


                #region :turflist
                case "territorios":
                    {
                        string Turfs = "---- Territorios \n";
                        foreach (Turf Turf in GangManager.TurfData.Values)
                        {
                            if (!GangManager.GangData.ContainsKey(Turf.GangId))
                                continue;

                            Turfs += "[Sala: " + Turf.TurfId + "] Territorio de " + GangManager.GangData[Turf.GangId].Name + "\n";
                        }

                        Session.SendNotifWithScroll(Turfs);

                        return true;
                    }
                #endregion
                #region :gform
                case "mcrear":
                    {

                        #region Variables/Params

                        string Name = "";

                        #endregion

                        #region Conditions
                        Name = Params[1];

                        if (Params.Length < 1)
                        {
                            Session.SendWhisper("Comando invalido: :mcrear <Nombre>");
                            return true;
                        }
                        else
                        {
                            Name = MergeParams(Params, 1);
                        }
                        if (Session.GetRoleplay().GangRank > 0 && GangManager.validGang(Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank))
                        {
                            if (GangManager.GangData[Session.GetRoleplay().GangId].Owner == Convert.ToInt32(Session.GetHabbo().Id))
                            {
                                Session.SendWhisper("No puedes salirte de la mafia que tu creaste!");
                                return true;
                            }
                            Session.SendWhisper("Ya perteneces a una mafia!");
                            return true;
                        }
                        if (GangManager.GangExists(Name))
                        {
                            Session.SendWhisper("Ya existe una mafia con este nombre!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            try
                            {
                                dbClient.SetQuery("INSERT INTO rp_gangs(name,owner,kills,deaths,points) VALUES(@name,'" + Session.GetHabbo().Id + "',0,0,0)");
                                dbClient.AddParameter("name", Name);
                                dbClient.RunQuery();

                                GangManager.init();
                                dbClient.RunFastQuery("INSERT INTO rp_gangs_ranks(gangid,rankid,name,pwr_recruit,pwr_demote,pwr_promote,pwr_kick,pwr_alert) VALUES('" + GangManager.GetGangId(Name) + "','1','Reclutado',0,0,0,0,1)");
                                dbClient.RunFastQuery("INSERT INTO rp_gangs_ranks(gangid,rankid,name,pwr_recruit,pwr_demote,pwr_promote,pwr_kick,pwr_alert) VALUES('" + GangManager.GetGangId(Name) + "','2','Fundador',1,1,1,1,1)");
                                GangManager.init();
                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(e.ToString());
                            }
                        }

                        RoleplayManager.Shout(Session, "*Acaba de crear la mafia '" + Name + "'*", 3);
                        Session.GetRoleplay().GangId = GangManager.GetGangId(Name);
                        Session.GetRoleplay().GangRank = 2;
                        Session.GetRoleplay().SaveGangComponents();

                        #endregion

                        return true;
                    }

                #endregion
                #region :gleave
                case "msalir":
                    {

                        #region Conditions
                        if (Session.GetRoleplay().GangId <= 0)
                        {
                            Session.SendWhisper("No perteneces a ningun grupo criminal!");
                            return true;
                        }
                        else
                        {
                            if (GangManager.GangData[Session.GetRoleplay().GangId].Owner == Convert.ToInt32(Session.GetHabbo().Id))
                            {
                                Session.SendWhisper("No puedes salir del grupo criminal por que tu lo creaste!");
                                return true;
                            }
                        }
                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Haz salido de la mafia '" + GangManager.GangData[Session.GetRoleplay().GangId].Name + "'*", 3);
                        Session.GetRoleplay().GangId = 0;
                        Session.GetRoleplay().GangRank = 0;
                        Session.GetRoleplay().SendToGang(Session.GetHabbo().UserName + " a dejado la mafia!", false);
                        Session.GetRoleplay().SaveGangComponents();

                        #endregion

                        return true;
                    }
                #endregion
                #region :gdisband
                case "meliminar":
                    {

                        #region Conditions
                        if (Session.GetRoleplay().GangId <= 0)
                        {
                            Session.SendWhisper("No perteneces a ning√∫na mafia!");
                            return true;
                        }
                        else
                        {
                            if (GangManager.GangData[Session.GetRoleplay().GangId].Owner != Convert.ToInt32(Session.GetHabbo().Id))
                            {
                                Session.SendWhisper("No eres el due√±o de esta mafia, asi que no la puedes eliminar!");
                                return true;
                            }
                        }
                        #endregion

                        #region Execute


                        RoleplayManager.Shout(Session, "*Elimino la mafia '" + GangManager.GangData[Session.GetRoleplay().GangId].Name + "'*", 3);
                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.RunFastQuery("DELETE FROM rp_gangs WHERE id = " + Session.GetRoleplay().GangId + "");
                            dbClient.RunFastQuery("DELETE FROM rp_gangs_badge WHERE gang_id = " + Session.GetRoleplay().GangId + "");
                            dbClient.RunFastQuery("DELETE FROM rp_gangs_ranks WHERE gangid = " + Session.GetRoleplay().GangId + "");
                            dbClient.RunFastQuery("UPDATE rp_stats SET gang_id = 0, gang_rank = 0 WHERE gang_id = " + Session.GetRoleplay().GangId + "");
                        }


                        RoleplayManager.AlertGang("La mafia fue eliminada, ya no perteneces a ella!", Session.GetRoleplay().GangId, true);


                        GangManager.init();

                        #endregion

                        return true;
                    }
                #endregion
                #region :ginvite
                case "minvitar":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().GangId <= 0)
                        {
                            Session.SendWhisper("No pertences a ninguna mafia!");
                            return true;
                        }
                        if (!GangManager.GangRankData[Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank].CanRecruit())
                        {
                            Session.SendWhisper("Tu rango en la mafia no permite hacer esto!");
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("ginvite_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("ginvite_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["ginvite_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["ginvite_cooldown"] + "/5]");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().GangId > 0)
                        {
                            RoleplayManager.Shout(Session, "*No se puede invitar a " + TargetSession.GetHabbo().UserName + " a la mafia '" + GangManager.GangData[Session.GetRoleplay().GangId].Name + "'*", 3);
                            Session.SendWhisper("Este usuario ya esta en una mafia!");
                            Session.GetRoleplay().MultiCoolDown["ginvite_cooldown"] = 5;
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Invito a " + TargetSession.GetHabbo().UserName + " para unirse a la mafia '" + GangManager.GangData[Session.GetRoleplay().GangId].Name + "'*", 6);
                        TargetSession.SendWhisper(Session.GetHabbo().UserName + " recibiste una invitacion para unirte a una mafia. Escribe :maceptar para aceptar o :mrechazar para rechazar!");
                        TargetSession.GetRoleplay().GangInvitedTo = Session.GetRoleplay().GangId;
                        TargetSession.GetRoleplay().GangInvited = true;
                        Session.GetRoleplay().MultiCoolDown["ginvite_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :gaccept
                case "maceptar":
                    {

                        #region Conditions
                        if (!Session.GetRoleplay().GangInvited)
                        {
                            Session.SendWhisper("Aun no te han invitado a alguna mafia");
                            return true;
                        }
                        if (Session.GetRoleplay().GangId > 0)
                        {
                            Session.SendWhisper("Ya perteneces a una mafia!");
                            Session.GetRoleplay().GangInvited = false;
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Acepto la invitacion para unirse a la mafia '" + GangManager.GangData[Session.GetRoleplay().GangInvitedTo].Name + "'*", 6);
                        Session.GetRoleplay().GangId = Session.GetRoleplay().GangInvitedTo;
                        Session.GetRoleplay().GangRank = 1;
                        RoleplayManager.AlertGang(Session.GetHabbo().UserName + " entro a la mafia.", Session.GetRoleplay().GangId);
                        Session.GetRoleplay().SaveGangComponents();

                        //Reset vars
                        Session.GetRoleplay().GangInvited = false;
                        Session.GetRoleplay().GangInvitedTo = 0;

                        #endregion

                        return true;
                    }
                #endregion
                #region :gdeny
                case "mrechazar":
                    {
                        #region Conditions
                        if (!Session.GetRoleplay().GangInvited)
                        {
                            Session.SendWhisper("No tienes invitaciones pendientes por aceptar.");
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Rechazo la invitacion para unirse a la mafia '" + GangManager.GangData[Session.GetRoleplay().GangInvitedTo].Name + "'*", 7);

                        //Reset vars
                        Session.GetRoleplay().GangInvited = false;
                        Session.GetRoleplay().GangInvitedTo = 0;

                        #endregion

                        return true;
                    }
                #endregion
                #region :gkick
                case "mexpulsar":
                    {
                        #region Generate Instances / Sessions
                        string Target = null;
                        GameClient TargetSession = null;

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :mexpulsar <usuario>");
                            return true;
                        }
                        else
                        {
                            Target = Convert.ToString(Params[1]);
                            TargetSession = RoleplayManager.GenerateSession(Target);
                        }
                        #endregion

                        #region Conditions

                        bool Offline = true;

                        if (!RoleplayManager.CanInteract(Session, TargetSession, false))
                        {
                            // Session.SendWhisper("El usuario no fue encontrado!");
                            Offline = true;
                            //return true;
                        }
                        else
                        {
                            Offline = false;
                        }


                        if (!Offline)
                        {
                            if (Session.GetRoleplay().GangId <= 0)
                            {
                                Session.SendWhisper("No perteneces a ninguna mafia!");
                                return true;
                            }
                            if (!GangManager.GangRankData[Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank].CanKick() || GangManager.GangData[Session.GetRoleplay().GangId].Owner == Convert.ToInt32(TargetSession.GetHabbo().Id))
                            {
                                Session.SendWhisper("Tu rango en la mafia no permite esto.");
                                return true;
                            }
                            if (TargetSession.GetRoleplay().GangId != Session.GetRoleplay().GangId)
                            {
                                Session.SendWhisper("El usuario no es parte de tu mafia!");
                                return true;
                            }
                        }
                        #endregion

                        #region Execute

                        if (!Offline)
                        {
                            RoleplayManager.Shout(Session, "*Saco a " + TargetSession.GetHabbo().UserName + " de la mafia '" + GangManager.GangData[Session.GetRoleplay().GangId].Name + "'*", 3);
                            RoleplayManager.AlertGang(TargetSession.GetHabbo().UserName + " fue expulsado de la mafia por " + Session.GetHabbo().UserName + "!", Session.GetRoleplay().GangId);
                            TargetSession.GetRoleplay().GangId = 0;
                            TargetSession.GetRoleplay().GangRank = 0;
                            TargetSession.GetRoleplay().SaveGangComponents();
                        }
                        else
                        {
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                DataRow Row = null;
                                DataRow StatsRow = null;
                                dbClient.SetQuery("SELECT id FROM users WHERE username = '" + Target + "'");
                                Row = dbClient.GetRow();

                                if (Row == null)
                                {
                                    Session.SendWhisper("El usuario no existe!");
                                    return true;
                                }

                                int Id = Convert.ToInt32(Row["id"]);

                                dbClient.SetQuery("SELECT gang_id,gang_rank FROM rp_stats WHERE id = '" + Id + "'");
                                StatsRow = dbClient.GetRow();

                                if (StatsRow == null)
                                {
                                    Session.SendWhisper("Ocurrio un error!");
                                    return true;
                                }

                                if (Convert.ToInt32(StatsRow["gang_id"]) != Session.GetRoleplay().GangId)
                                {
                                    Session.SendWhisper("Este usuario no es miembro de la mafia!");
                                    return true;
                                }

                                if (!GangManager.GangRankData[Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank].CanKick() || GangManager.GangData[Session.GetRoleplay().GangId].Owner == Id)
                                {
                                    Session.SendWhisper("No tienes permiso para hacer esto!");
                                    return true;
                                }

                                Session.Shout("*Saco " + Target.ToLower() + "[DESCONECTADO] de la mafia!*");
                                dbClient.RunFastQuery("UPDATE rp_stats SET gang_id = 0, gang_rank = 0 WHERE id = " + Id + "");
                            }
                        }



                        #endregion

                        return true;
                    }
                #endregion
                #region :gpromote
                case "msubir":
                    {
                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().GangId <= 0)
                        {
                            Session.SendWhisper("No perteneces a ninguna mafia!");
                            return true;
                        }
                        if (!GangManager.GangRankData[Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank].CanPromote() || GangManager.GangData[Session.GetRoleplay().GangId].Owner == Convert.ToInt32(TargetSession.GetHabbo().Id))
                        {
                            Session.SendWhisper("Tu rango en la mafia no permite esto.");
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en la sala!");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().GangId != Session.GetRoleplay().GangId)
                        {
                            Session.SendWhisper("El usuario no es miembro de la mafia!");
                            return true;
                        }
                        if (!GangManager.validGang(TargetSession.GetRoleplay().GangId, TargetSession.GetRoleplay().GangRank + 1))
                        {
                            Session.SendWhisper("No hay rangos mas altos!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        TargetSession.GetRoleplay().GangRank += 1;
                        RoleplayManager.Shout(Session, "*Subio de rango a " + TargetSession.GetHabbo().UserName + " a '" + GangManager.GangRankData[TargetSession.GetRoleplay().GangId, TargetSession.GetRoleplay().GangRank].Name + "' en la mafia*", 6);

                        RoleplayManager.AlertGang(TargetSession.GetHabbo().UserName + " haz sido asendido a '" + GangManager.GangRankData[TargetSession.GetRoleplay().GangId, TargetSession.GetRoleplay().GangRank].Name + "' por " + Session.GetHabbo().UserName + "", Session.GetRoleplay().GangId);
                        TargetSession.GetRoleplay().SaveGangComponents();

                        #endregion

                        return true;
                    }
                #endregion
                #region :gdemote
                case "mbajar":
                    {

                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().GangId <= 0)
                        {
                            Session.SendWhisper("No perteneces a ninguna maf√≠a!");
                            return true;
                        }
                        if (!GangManager.GangRankData[Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank].CanDemote() || GangManager.GangData[Session.GetRoleplay().GangId].Owner == Convert.ToInt32(TargetSession.GetHabbo().Id))
                        {
                            Session.SendWhisper("Tu rango dentro de la mafia no permite esto");
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en la sala!");
                            return true;
                        }
                        if (TargetSession.GetRoleplay().GangId != Session.GetRoleplay().GangId)
                        {
                            Session.SendWhisper("El usuario no es miembro de la mafia!");
                            return true;
                        }
                        if (!GangManager.validGang(TargetSession.GetRoleplay().GangId, TargetSession.GetRoleplay().GangRank - 1))
                        {
                            Session.SendWhisper("Este usuario ya tiene el rango menor!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        TargetSession.GetRoleplay().GangRank -= 1;
                        RoleplayManager.Shout(Session, "*" + TargetSession.GetHabbo().UserName + " bajo de rango a  '" + GangManager.GangRankData[TargetSession.GetRoleplay().GangId, TargetSession.GetRoleplay().GangRank].Name + "' en la mafia*", 3);

                        RoleplayManager.AlertGang(TargetSession.GetHabbo().UserName + " has sido bajado de rango a '" + GangManager.GangRankData[TargetSession.GetRoleplay().GangId, TargetSession.GetRoleplay().GangRank].Name + "' por " + Session.GetHabbo().UserName + "", Session.GetRoleplay().GangId);
                        TargetSession.GetRoleplay().SaveGangComponents();

                        #endregion

                        return true;
                    }
                #endregion
                #region :gbackup
                case "mradio":
                    {
                        #region Variables/Params
                        string Msg = "";
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().GangId <= 0)
                        {
                            Session.SendWhisper("No perteneces a ninguna mafia!");
                            return true;
                        }
                        if (Params.Length < 1)
                        {
                            Session.SendWhisper("Comando invalido. :mradio <mensaje>");
                            return true;
                        }
                        else
                        {
                            Msg = MergeParams(Params, 1);
                        }
                        if (!GangManager.GangRankData[Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank].CanAlert())
                        {
                            Session.SendWhisper("Tu rango en la mafia no permite esto");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Session.GetRoleplay().SendToGang(Msg, true);

                        #endregion

                        return true;
                    }
                #endregion
                #region :gcapture
                case "mterritorio":
                case "mcapturar":
                    {

                        #region Conditions

                        if (Session.GetRoleplay().GangCapturing)
                        {
                            Session.SendWhisper("Ya esta capturado este territorio!");
                            return true;
                        }
                        if (Session.GetRoleplay().GangId <= 0)
                        {
                            Session.SendWhisper("No perteneces a ninguna mafia!");
                            return true;
                        }
                        if (Session.GetRoleplay().IsNoob)
                        {
                            if (!Session.GetRoleplay().NoobWarned)
                            {
                                Session.SendNotif("Debes desactivar la proteccion para hacer esto!");
                                Session.GetRoleplay().NoobWarned = true;
                                return false;
                            }
                            else
                            {
                                Session.GetRoleplay().RemoveGodProtection();
                            }
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("gcapture_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("gcapture_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["gcapture_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["gcapture_cooldown"] + "/30]");
                            return true;
                        }
                        RoomUser User = null;
                        User = Session.GetHabbo().GetRoomUser();

                        if (User != null)
                        {
                            if (!GangManager.IsTurfSpot(Convert.ToInt32(Session.GetHabbo().CurrentRoomId), User.X, User.Y))
                            {
                                Session.SendWhisper("Este terreno no se puede capturar!");
                                return true;
                            }
                        }
                        else
                        {
                            Session.SendWhisper("Sucedio un error! Intenta de nuevo mas tarde.");
                            return true;
                        }

                        if (GangManager.TurfData[Convert.ToInt32(Session.GetHabbo().CurrentRoomId)].GangId == Session.GetRoleplay().GangId)
                        {
                            Session.SendWhisper("Tu mafia ya es due√±a de este territorio!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        User.ApplyEffect(59);
                        Session.GetRoleplay().GangCapturing = true;
                        Session.GetRoleplay().gangCaptureTimer = new gangCaptureTimer(Session);
                        Session.GetRoleplay().MultiCoolDown["gcapture_cooldown"] = 30;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        RoleplayManager.Shout(Session, "*Capturado territorio con el nombre de la mafia '" + GangManager.GangData[Session.GetRoleplay().GangId].Name + "'*", 24);
                        Session.SendWhisper("Restan 5 minuto(s) para capturar este territorio!");
                        if (GangManager.TurfData[Convert.ToInt32(Session.GetHabbo().CurrentRoomId)].GangId > 0)
                        {
                            RoleplayManager.AlertGang("Alguien esta capturando tu territorio en la sala ID " + Session.GetHabbo().CurrentRoomId + "! Corre!", GangManager.TurfData[Convert.ToInt32(Session.GetHabbo().CurrentRoomId)].GangId);
                        }
                        return true;

                        #endregion

                    }
                #endregion
                #region :mygang/:ginfo
                case "mafia":
                    {
                        #region Conditions
                        if (Session.GetRoleplay().GangId <= 0 || !GangManager.validGang(Session.GetRoleplay().GangId, Session.GetRoleplay().GangRank))
                        {
                            Session.SendWhisper("No perteneces a ninguna mafia!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        string info = "==============";

                        foreach (Gang Gang in GangManager.GangData.Values)
                        {
                            if (Gang.Id != Session.GetRoleplay().GangId)
                                continue;

                            info += "======================\nInformacion de '" + Gang.Name + "'\n======================\n";
                            info += "ID: " + Gang.Id + "\n";
                            info += "Nombre de Mafia: " + Gang.Name + "\n";
                            info += "Due√±o: " + RoleplayManager.ReturnOfflineInfo((uint)Gang.Owner, "username").ToString() + "\n";
                            info += "Puntos: " + Gang.Points + "\n";
                            info += "Asesinatos: " + Gang.Kills + "\n";
                            info += "Muertes: " + Gang.Deaths + "\n";
                        }

                        Session.SendNotifWithScroll(info);

                        return true;

                        #endregion


                    }
                #endregion

                #region :refrescar_mafias (debug)
                case "refrescar_mafias":
                    {                 

                        GangManager.init();
                        Session.SendWhisperBubble("Haz actualizado las mafias correctamente.", 1);

                        return true;
                    }
                #endregion

                #endregion

                #region Combat

                #region RP bots / Interactions

                #region :stopfight
                case "pararataque":
                    {

                        #region Variables

                        if (Session.GetHabbo().GetRoomUser().MyPet == null)
                        {
                            Session.SendWhisper("No puedes hacer esto por que tu mascota no esta aqui");
                            return true;
                        }

                        RoomUser Pet = Session.GetHabbo().GetRoomUser().MyPet;

                        #endregion

                        if (Pet == null)
                        {
                            Session.SendWhisper("Por que razon?");
                            return true;
                        }

                        Pet.BotAI._Victim = null;
                        // Pet.BotAI._Victim.AttackPet = Pet;
                        RoleplayManager.Shout(Session, "*Le pide a su mascota que deje de atacar y vuelva con el*", 6);
                        FightPetManager.WalkToPlayer(Pet, Session.GetHabbo().GetRoomUser());
                        return true;

                    }
                #endregion

                #region :givepet <username> <petname>
                /*case "givepet":
                    {

                        #region Variables

                        if (!Session.GetRoleplay().UsingPet) return false;
                        GameClient User = null;
                        if (Params[1] != null)
                        {
                            User = RoleplayManager.GenerateSession(Params[1].ToString());
                        }*/

                #endregion

                #region

                /*
                using (IQueryAdapter dbClient = Azure.GetDatabaseManager().GetQueryReactor())
                {
                    dbClient.SetQuery("SELECT * FROM bots WHERE user_id = '" + session.GetHabbo().Id + "'");
                    DataTable Data = dbClient.GetTable();

                    foreach (DataRow PetRow in Data.Rows)
                    {

                    }
                }*/
                #endregion


                /*return true;
            }*/
                #endregion

                #region :killpet <name>
                case "matarmascota":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }
                        if (Params.Length == 1)
                        {
                            Session.GetHabbo().GetRoomUser().LastBubble = 34;
                            Session.SendWhisper("Comando incorrecto :matarmascota <nombre>");
                            Session.GetHabbo().GetRoomUser().LastBubble = 0;
                            return true;
                        }
                        string Username = Params[1].ToString();

                        foreach (RoomUser User in Session.GetHabbo().CurrentRoom.GetRoomUserManager().UserList.Values)
                        {

                            if (!User.IsBot)
                            {
                                continue;
                            }
                            if (!User.IsPet)
                            {
                                continue;
                            }
                            if (User.BotData.Name.ToLower() != Username.ToLower())
                            {
                                continue;
                            }
                            Session.GetHabbo().CurrentRoom.GetRoomUserManager().RemoveBot(User.VirtualId, true);
                        }
                        Session.GetHabbo().GetRoomUser().LastBubble = 23;
                        Session.Shout("*Uso sus poderes divinos para matar a " + Username.ToLower() + "*");
                        Session.GetHabbo().GetRoomUser().LastBubble = 0;
                        return true;
                    }
                #endregion

                #region :setaitype <newaitype>

                case "setaitype":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return false;
                        }

                        string Aitype;

                        Aitype = Convert.ToString(Params[1]);
                        RoomUser Pet = null;

                        foreach (RoomUser User in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetBots())
                        {
                            if (User == null)
                                continue;

                            Pet = User;
                        }


                        if (Pet == null)
                        {
                            Session.SendWhisper("No hay mascotas aqui!");
                            return true;
                        }

                        AIType type = AIType.FightPet;
                        switch (Aitype.ToLower())
                        {
                            case "fight_pet":
                            case "fightpet":
                                type = AIType.FightPet;
                                break;

                            case "pet":
                                type = AIType.Pet;
                                break;
                        }

                        Session.Shout("*Uso sus poderes divinos para cambiar " + Pet.BotData.Name + " a " + Aitype.ToLower() + "!");
                        Pet.BotData.AiType = type;
                        RoomUser TempPet = Pet;

                        Session.GetHabbo().CurrentRoom.GetRoomUserManager().RemoveBot(Pet.VirtualId, true);
                        Session.GetHabbo().CurrentRoom.GetRoomUserManager().DeployBot(TempPet.BotData, TempPet.PetData);

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.RunFastQuery("UPDATE bots SET ai_type = '" + Aitype.ToLower() + "' WHERE id = " + Pet.PetData.PetId + "");
                        }




                        return true;
                    }

                #endregion

                #region :attack <user>
                case "ataca":
                    {

                        #region Variables

                        if (Session.GetHabbo().GetRoomUser().MyPet == null)
                        {
                            Session.SendWhisper("No puedes hacer eso por que tu mascota no esta aqui!");
                            return true;
                        }

                        RoomUser Pet = Session.GetHabbo().GetRoomUser().MyPet;
                        GameClient User = null;
                        if (Params[1] != null)
                        {
                            User = RoleplayManager.GenerateSession(Params[1].ToString());
                        }

                        #endregion

                        if (User == null)
                            return true;
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOHIT") && !RoleplayManager.BypassRights(Session))
                            return true;

                        if (Pet == null) return true;

                        #region Conditions
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("SAFEZONE"))
                        {
                            Session.GetHabbo().GetRoomUser().LastBubble = 34;
                            Session.SendWhisper("Lo sentimos esta es una zona segura!");
                            Session.GetHabbo().GetRoomUser().LastBubble = 0;
                            return true;
                        }
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOPET"))
                        {
                            Session.GetHabbo().GetRoomUser().LastBubble = 34;
                            Session.SendWhisper("En esta sala no se permiten mascotas!");
                            Session.GetHabbo().GetRoomUser().LastBubble = 0;
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.GetHabbo().GetRoomUser().LastBubble = 34;
                            Session.SendWhisper("No se puede completar esta accion por que estas muerto");
                            Session.GetHabbo().GetRoomUser().LastBubble = 0;
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.GetHabbo().GetRoomUser().LastBubble = 34;
                            Session.SendWhisper("No se puede completar esta accion por que estas en prision");
                            Session.GetHabbo().GetRoomUser().LastBubble = 0;
                            return true;
                        }
                        if (User.GetRoleplay().Dead)
                        {
                            Session.GetHabbo().GetRoomUser().LastBubble = 34;
                            Session.SendWhisper("No se puede completar esta accion por que el usuario esta muerto!");
                            Session.GetHabbo().GetRoomUser().LastBubble = 0;
                        }
                        if (User.GetRoleplay().Jailed)
                        {
                            Session.GetHabbo().GetRoomUser().LastBubble = 34;
                            Session.SendWhisper("No se puede completar esta accion por que el usuario esta en prision!");
                            Session.GetHabbo().GetRoomUser().LastBubble = 0;
                        }
                        if (User.GetHabbo().GetRoomUser().IsAsleep)
                        {
                            Session.GetHabbo().GetRoomUser().LastBubble = 34;
                            Session.SendWhisper("No se puede completar esta accion por que el usuario no esta aqui!");
                            Session.GetHabbo().GetRoomUser().LastBubble = 0;
                        }
                        #endregion


                        Pet.BotAI._Victim = User.GetHabbo().GetRoomUser();
                        Pet.BotAI._Victim.AttackPet = Pet;
                        RoleplayManager.Shout(Session, "*Le ordeno a su mascota que ataque a " + User.GetHabbo().UserName + "*", 27);
                        return true;

                    }
                #endregion

                #region :ffight <user>
                case "sataque":
                    {
                        if (!RoleplayManager.BypassRights(Session)) { Session.SendWhisper("No puedes hacer esto!"); return true; }
                        string Username = null;
                        GameClient User = null;

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Parametros invalidos!");
                            return true;
                        }
                        else
                        {
                            Username = Convert.ToString(Params[1]);
                            User = RoleplayManager.GenerateSession(Username);
                        }

                        if (!RoleplayManager.CanInteract(Session, User, true))
                        {
                            Session.SendWhisper("Usuario no encontrado!");
                            return true;
                        }

                        List<RoomUser> RoomBots = new List<RoomUser>();

                        lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetBots())
                        {
                            foreach (RoomUser Users in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetBots())
                            {
                                if (Users == null)
                                    continue;
                                if (!Users.IsBot)
                                    continue;
                                if (Users.BotAI == null)
                                    continue;
                                RoomBots.Add(Users);
                            }
                        }

                        foreach (RoomUser Bott in RoomBots)
                        {
                            Bott.BotAI = new FightPet(Bott.VirtualId);
                            Bott.BotAI._Victim = User.GetHabbo().GetRoomUser();
                        }

                        RoleplayManager.Shout(Session, "*Uso sus poderes divinos para mandar a atacar a " + User.GetHabbo().UserName + "*");
                        return true;

                    }
                #endregion

                #region :setpetstat <petname> <stat> <newvalue>
                case "setbotstat":
                case "setbotdata":
                case "setpetstat":
                case "setpetdata":
                    {

                        #region Params
                        string BotName = null;
                        string Stat = null;
                        object NewValue = null;
                        RoomUser Bot = null;
                        #endregion

                        #region Conditions
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("No puedes hacer esto!");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 3))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :setbotstat <botname> <stat> <newvalue>");
                            return true;
                        }
                        else
                        {
                            BotName = Convert.ToString(Params[1]);
                            Stat = Convert.ToString(Params[2]);
                            NewValue = Params[3];
                        }

                        if (RoleplayManager.GetBot(BotName, Session.GetHabbo().CurrentRoom) == null)
                        {
                            Session.SendWhisper("El bot " + BotName + " no esta en la sala!");
                            return true;
                        }

                        Bot = RoleplayManager.GetBot(BotName, Session.GetHabbo().CurrentRoom);

                        #endregion

                        #region Execute
                        switch (Stat.ToLower())
                        {


                            default:


                                string Notice = "Como " + Stat.ToLower() + ".. \nEstadisticas modificables:\n";
                                // Notice += "type";
                                Notice += "strength/str\n";
                                Notice += "follow_interval\n";
                                Notice += "curhealth\n";
                                Notice += "maxhealth\n";
                                Notice += "cooldown\n";

                                Session.SendNotif(Notice);

                                break;

                            case "type":

                                Bot.BotData.Type = Convert.ToString(NewValue);

                                break;

                            case "strength":
                            case "str":

                                Bot.BotData.Str = Convert.ToInt32(NewValue);
                                break;

                            case "curhealth":

                                Bot.BotData.CurHealth = Convert.ToInt32(NewValue);

                                break;

                            case "maxhealth":

                                Bot.BotData.MaxHealth = Convert.ToInt32(NewValue);
                                Bot.BotData.InitRPStats();

                                break;

                            case "cooldown":

                                Bot.BotData.Cooldown = Convert.ToInt32(NewValue);
                                Bot.BotData.InitRPStats();

                                break;

                            case "follow_interval":

                                Bot.BotData.FollowInterval = Convert.ToInt32(NewValue);
                                Bot.BotData.InitRPStats();

                                break;
                        }


                        Bot.BotData.SaveRPStats();


                        Session.SendWhisper("Actualizo las estadisticas del bot " + Bot.BotData.Name + " de " + Stat + " a " + NewValue);

                        #endregion


                        return true;
                    }
                #endregion

                #region :refreshpets
                case "refreshpets":
                    {


                        #region Refresh roleplay pets
                        Dictionary<string, uint> Pets = new Dictionary<string, uint>();

                        try
                        {
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                dbClient.SetQuery("SELECT * FROM bots WHERE user_id = '" + Session.GetHabbo().Id + "'");
                                DataTable Data = dbClient.GetTable();


                                foreach (DataRow PetRow in Data.Rows)
                                {
                                    if (!Pets.ContainsKey(Convert.ToString(PetRow["name"]).ToLower()))
                                        Pets.Add(Convert.ToString(PetRow["name"]).ToLower(), Convert.ToUInt32(PetRow["id"]));
                                }
                            }

                            lock (Session.GetRoleplay().MyPets)
                            {
                                Session.GetRoleplay().MyPets.Clear();
                                Session.GetRoleplay().MyPets = Pets;
                            }
                        }
                        catch (Exception e)
                        {

                        }

                        #endregion

                        Session.GetHabbo().GetInventoryComponent().UpdateItems(true);
                        Session.GetHabbo().GetInventoryComponent().SerializePetInventory();
                        Session.SendWhisper("Actualizaste las mascotas!");

                        return true;
                    }
                #endregion

                #region :callpet <petname>
                case "llamarmascota":
                    {

                        #region Variables
                        string BotName = null;
                        bool BotDeployed = false;


                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :llamarmascota <nombre>");
                            return true;
                        }
                        else
                        {
                            BotName = Convert.ToString(Params[1].ToLower());
                        }

                        #endregion

                        #region Checks

                        using (var queryReactor =Plus.GetDatabaseManager().GetQueryReactor())
                        {



                            if (!Session.GetRoleplay().MyPets.ContainsKey(BotName.ToLower()))
                            {
                                Session.SendWhisper("No tienes ninguna mascota '" + BotName.ToLower() + "'");
                                return true;
                            }

                            uint PetId = Session.GetRoleplay().MyPets[BotName];

                            FightPetManager Manager = new FightPetManager();

                            RoomBot Pet = Manager.DeployBotToRoom(Session, BotName, Session.GetHabbo().CurrentRoomId);


                            if (Pet == null)
                            {
                                Session.SendWhisper("Por alguna razon no se puede hacer esta accion!");
                                return true;
                            }


                            Pet.RoomUser.Chat(null, "Hola amo mio!", true, 0, 0);
                        }


                        #endregion




                        return true;
                    }
                #endregion

                #region :sellpet
                case "vendermascota":
                    {

                        #region Conditions
                        if (!Session.GetRoleplay().JobHasRights("sellpet") && !RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("Tu empleo no permite vender mascotas!");
                            return true;
                        }
                        if (!Session.GetRoleplay().Working && !RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("Debes estar trabajando para hacer esta accion!");
                            return true;
                        }
                        #endregion


                        #region Variables

                        GameClient TargetSession = null;
                        string User = null;
                        string PetType = null;
                        string Petname = null;

                        #endregion

                        #region More Conditions
                        if (!RoleplayManager.ParamsMet(Params, 3))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :vendermascota <usuario> <(dog/cat/dragon)> <nombre>");
                            return true;
                        }
                        #endregion

                        #region More Variables
                        User = Convert.ToString(Params[1].ToLower());
                        TargetSession = RoleplayManager.GenerateSession(User);
                        PetType = Convert.ToString(Params[2].ToLower());
                        Petname = Convert.ToString(Params[3].ToLower());
                        List<string> PetTypes = new List<string>();
                        //PetTypes.Add()
                        #endregion

                        #region More Conditions
                        if (!RoleplayManager.CanInteract(Session, TargetSession, true))
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala!");
                            return true;
                        }


                        #endregion


                        if (!FightPetManager.PetData.ContainsKey(PetType.ToLower()))
                        {
                            Session.SendWhisper("El tipo de mascota '" + PetType.ToLower() + "' no existe!");
                            return true;
                        }

                        RPPet Pet = FightPetManager.PetData[PetType.ToLower()];
                        bool PayOnlyPet = Pet.Special_Pet == 0 ? false : true;
                        int PetPrice = Pet.Price_Coins;

                        #region Target Conditions
                        if (PayOnlyPet)
                        {
                            Session.SendWhisper("La mascota que intenta ofrecer es una mascota VIP, por favor informe al usuario!");
                            return true;
                        }
                        if (TargetSession.GetHabbo().Credits - PetPrice < 0)
                        {
                            Session.SendWhisper("Este usuario no puede comprar esta mascota por que su precio es de " + PetPrice + " billetes!");
                            return true;
                        }
                        if (RoleplayManager.PetExists(Petname.ToLower()))
                        {
                            Session.SendWhisper("El nombre de la mascota ['" + Petname.ToLower() + "'] informele al usuario y digale que seleccione otro nombre!");
                            return true;
                        }
                        #endregion

                        if (TargetSession.GetRoleplay().OfferData.ContainsKey("pet"))
                        {
                            TargetSession.GetRoleplay().OfferData.Remove("pet");
                        }

                        TargetSession.GetRoleplay().OfferData.Add("pet", new Offer(Session, Petname + ":" + Pet.Type, 1, PetPrice));


                        TargetSession.SendWhisper(Session.GetHabbo().UserName + " oferto una mascota con el nombre '" + Petname + "' por [$" + PetPrice + "]. Escribe #aceptar para aceptar o #rechazar para rechazar! ");
                        RoleplayManager.Shout(Session, "*Oferto a " + TargetSession.GetHabbo().UserName + " la mascota con el nombre '" + Petname + "' por [$" + PetPrice + "]*", 6); 

                        return true;
                    }
                #endregion

                #endregion

                #region Special Weapons

                #region Freeze Ray

                #region :freezehelp
                case "freezehelp":
                    {

                        #region Execute

                        string Cmds = "";
                        Cmds += "List of Freeze Ray Commands:\n";
                        Cmds += ":freezehelp\n";
                        Cmds += ":freezecharge\n";
                        Cmds += ":freezerelease\n";
                        Cmds += ":<this command is hidden/for admins only>";


                        Session.SendNotifWithScroll(Cmds);

                        #endregion

                        return true;
                    }
                #endregion

                #region :freezecharge
                case "freezecharge":
                    {
                        #region Conditions
                        if (Session.GetRoleplay().Equiped != "freezeray")
                        {
                            Session.SendWhisper("You must have a freeze ray to do this!");
                            return true;
                        }
                        if (Session.GetRoleplay().FreezeRay.Charging)
                        {
                            Session.SendWhisper("Your freeze ray is already charging up!");
                            return true;
                        }
                        if (Session.GetRoleplay().FreezeRay.Releasing)
                        {
                            Session.SendWhisper("You are already releasing your mega blast!");
                            return true;
                        }
                        /*
                         if(Session.GetRoleplay().FreezeRay.ReleaseCdMins > 0)
                         {
                             Session.SendWhisper("Cooldown [" + Session.GetRoleplay().FreezeRay.ReleaseCdMins + " mins left]");
                             return true;
                         }*/
                        #endregion

                        #region Execute

                        Session.GetRoleplay().FreezeRay.ChargingMins = Convert.ToInt32(RoleplayData.Data["freeze.ray.default.chargetime"]);
                        Session.GetRoleplay().FreezeRay.ChargingSeconds = 60;
                        Session.GetRoleplay().FreezeRay.Charging = true;


                        if (RoleplayData.Data["freeze.ray.show.shoutcharge"] == "true")
                        {
                            Session.Shout("*Begins charging up their freeze ray to release a mega blast*");
                        }
                        else
                        {
                            Session.SendWhisper("Okay, your freeze ray is now charging to release a blast. It will be complete in " + Session.GetRoleplay().FreezeRay.ChargingMins + " minutes!");
                        }

                        #endregion

                        return true;
                    }
                #endregion

                #region :freezerelease
                case "freezerelease":
                    {


                        #region Conditions
                        if (Session.GetRoleplay().Equiped != "freezeray")
                        {
                            Session.SendWhisper("You must have a freeze ray to do this!");
                            return true;
                        }
                        if (Session.GetRoleplay().FreezeRay.Charging)
                        {
                            Session.SendWhisper("Your freeze ray is already charging up!");
                            return true;
                        }
                        if (!Session.GetRoleplay().FreezeRay.Charged)
                        {
                            Session.SendWhisper("Your freeze ray is not charged!");
                            return true;
                        }
                        if (Session.GetRoleplay().FreezeRay.Releasing)
                        {
                            Session.SendWhisper("You are already releasing your mega blast!");
                            return true;
                        }

                        if (Session.GetRoleplay().FreezeRay.ReleaseCdMins > 0)
                        {
                            Session.SendWhisper("Cooldown [" + Session.GetRoleplay().FreezeRay.ReleaseCdMins + " mins left]");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Session.GetRoleplay().FreezeRay.Releasing = true;
                        Session.GetRoleplay().FreezeRay.ReleasingSeconds = new Random().Next(5, 30);
                        Session.Shout("*Emits a freeze blast from their super charged freeze ray*");

                        Session.GetRoleplay().MultiCoolDown["equip_cooldown"] = 60;

                        #endregion

                        return true;
                    }
                #endregion

                #region :freezesrelease
                case "freezesrelease":
                    {


                        #region Params

                        #endregion

                        #region Conditions

                        #endregion

                        #region Execute

                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #endregion

                #region Boxing
                case "1vs1":
                    {
                        if (Session.GetHabbo().CurrentRoom.SoloQueue != null)
                        {
                            var SQueue = Session.GetHabbo().CurrentRoom.SoloQueue;
                            SQueue.AddToQueue(Session);
                        }
                        return true;
                    }
                #endregion

                #region :hit x
                case "golpear":
                    {
                        if (Session.GetHabbo().CurrentRoom.SoloQueue != null)
                        {
                            if (!Session.GetRoleplay().IsBoxing)
                            {
                                Session.SendWhisper("Tienes que estar dentro del ring para hacer esto!");
                                return true;
                            }
                        }
                        #region Melee Weapons
                        if (Session.GetRoleplay().Equiped != null && WeaponManager.WeaponsData[Session.GetRoleplay().Equiped].Type.ToLower().Contains("melee"))
                        {
                            if (!RoleplayManager.ParamsMet(Params, 1))
                            {
                                Session.SendWhisper("Comando inv√°lido digite: :golpear <usuario>");
                                return true;
                            }
                            #region Generate Instances / Sessions
                            GameClient TargetSession = null;
                            if (Session.GetRoleplay().StaffDuty == true)
                            {
                                Session.SendWhisper("No puedes hacer esto si estas en servicio!");
                                return true;
                            }
                            if (Session.GetRoleplay().LastHit != null)
                            {
                                TargetSession = Session.GetRoleplay().LastHit;
                            }
                            string Target = Convert.ToString(Params[1]);
                            TargetSession = RoleplayManager.GenerateSession(Target);

                            if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                            {
                                Session.SendWhisper("El usuario no se encuentra en esta sala.");
                                return true;
                            }

                            Session.GetRoleplay().LastHit = TargetSession;
                            Session.GetRoleplay().ActionLast = "melee";
                            #endregion
                            #region Execute

                            if (TargetSession.GetRoleplay().StaffDuty == true && !RoleplayManager.BypassRights(Session))
                            {
                                Session.SendWhisper("No puedes hacer esto con un STAFF que esta en servicio!");
                                return true;
                            }
                            if (MeleeCombat.CanExecuteAttack(Session, TargetSession))
                            {
                                MeleeCombat.ExecuteAttack(Session, TargetSession);
                            }

                            #endregion
                        }
                        #endregion

                        #region Punching
                        else
                        {
                            #region Generate Instances / Sessions

                            bool bypass = false;
                            GameClient TargetSession = null;

                            if (Session.GetRoleplay().StaffDuty == true)
                            {
                                Session.SendWhisper("No puedes golpear durante el trabajo!");
                                return true;
                            }
                            if (Session.GetRoleplay().LastHit != null)
                            {
                                TargetSession = Session.GetRoleplay().LastHit;
                            }

                            if (!bypass)
                            {
                                if (!RoleplayManager.ParamsMet(Params, 1))
                                {
                                    Session.SendWhisper("Comando inv√°lido digite: :golpear <usuario>");
                                    return true;
                                }

                                string Target = Convert.ToString(Params[1]);
                                RoomUser T = null;

                                foreach (RoomUser User in Session.GetHabbo().CurrentRoom.GetRoomUserManager().UserList.Values)
                                {
                                    if (User.IsBot && User.BotData.Name.ToLower() == Target.ToLower())
                                        T = User;
                                }

                                if (T != null)
                                {
                                    HabboHotel.Roleplay.Combat.HandCombat.ExecuteAttackBot(Session, T, T.PetData, T.BotData);
                                    return true;
                                }

                                TargetSession = RoleplayManager.GenerateSession(Target);

                                if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                                {
                                    Session.SendWhisper("El usuario no se encuentra en esta sala.");
                                    return true;
                                }

                                if (TargetSession.GetRoleplay().StaffDuty == true && !RoleplayManager.BypassRights(Session))
                                {
                                    Session.SendWhisper("No puedes golpear a un staff!");
                                    return true;
                                }
                                else
                                {
                                    Session.GetRoleplay().LastHit = TargetSession;
                                    Session.GetRoleplay().ActionLast = "hit";
                                }
                            }
                            #endregion

                            #region Execute
                            HabboHotel.Roleplay.Combat.HandCombat.ExecuteAttack(Session, TargetSession);
                            #endregion
                        }
                        #endregion
                        return true;
                    }
                #endregion
                #region :shoot x
                case "disparar":
                    {
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :disparar <usuario>");
                            return true;
                        }

                        #region Generate Instances / Sessions
                        GameClient TargetSession = null;
                        if (Session.GetRoleplay().StaffDuty == true)
                        {
                            Session.SendWhisper("No puedes disparar mientras estas en servicio!");
                            return true;
                        }
                        if (Session.GetRoleplay().Equiped == null)
                        {
                            Session.SendWhisper("No haz equipado ninguna arma!");
                            return true;
                        }
                        if (Session.GetRoleplay().LastHit != null)
                        {
                            TargetSession = Session.GetRoleplay().LastHit;
                        }
                        string Targ = Convert.ToString(Params[1]);
                        TargetSession = RoleplayManager.GenerateSession(Targ);

                        #region Null Checks
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo() == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().GetRoomUser() == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().GetRoomUser().RoomId != Session.GetHabbo().GetRoomUser().RoomId)
                        {
                            Session.SendWhisper("El usuario no fue encontrado en esta sala!");
                            return true;
                        }
                        #endregion

                        Session.GetRoleplay().LastHit = TargetSession;
                        Session.GetRoleplay().ActionLast = "shoot";
                        #endregion

                        #region Execute

                        if (TargetSession.GetRoleplay().StaffDuty == true && !RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("No le puedes disparar a un staff!");
                            return true;
                        }


                        Room Room = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);

                        RoomUser Me = Session.GetHabbo().GetRoomUser();
                        RoomUser Target = TargetSession.GetHabbo().GetRoomUser();

                        if (Target == null)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }

                        if (Target.Frozen)
                        {
                            Session.SendWhisper("No puedes hacerle esto a un usuario paralizado!");
                            return true;
                        }

                        if (Me == null)
                        {
                            return true;
                        }

                        if (CombatManager.CanAttack(Session, TargetSession, true))
                        {
                            GunCombat.ExecuteAttack(Session, TargetSession, Room, Me, Target);
                        }

                        #endregion

                        return true;
                    }
                #endregion
                #region :bomb x
                case "bomba":
                    {
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :bomba <usuario>");
                            return true;
                        }

                        #region Generate Instances / Sessions
                        GameClient TargetSession = null;

                        if (Session.GetRoleplay().StaffDuty == true)
                        {
                            Session.SendWhisper("No puedes lanzarle una bomba a un staff!");
                            return true;
                        }
                        if (Session.GetRoleplay().LastHit != null)
                        {
                            TargetSession = Session.GetRoleplay().LastHit;
                        }
                        string Target = Convert.ToString(Params[1]);
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        Session.GetRoleplay().LastHit = TargetSession;
                        Session.GetRoleplay().ActionLast = "bomb";
                        #endregion

                        #region Execute

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en la sala.");
                            return true;
                        }

                        if (TargetSession.GetRoleplay().StaffDuty == true)
                        {
                            Session.SendWhisper("No puedes lanzarle una bomba a un staff!");
                            return true;
                        }
                        if (BombCombat.CanExecuteAttack(Session, TargetSession))
                        {
                            BombCombat.ExecuteAttack(Session, TargetSession);
                        }
                        #endregion

                        return true;
                    }
                #endregion
                #region :equip
                case "equip":
                case "equipar":
                    {

                        #region Params/Variables
                        int MyJobId = Session.GetRoleplay().JobId;
                        int MyJobRank = Session.GetRoleplay().JobRank;
                        string Wep = "";
                        RoomUser User = Session.GetHabbo().GetRoomUser();
                        #endregion

                        #region Conditions
                        if (Params.Length < 2)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :equip <arma>");
                        }
                        else
                        {
                            Wep = Params[1].ToString();
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("equip_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("equip_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["equip_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["equip_cooldown"] + "/5]");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead || Session.GetRoleplay().Jailed)
                        {
                            return true;
                        }
                        Dictionary<string, Weapon> Weaponss = new Dictionary<string, Weapon>();
                        foreach (KeyValuePair<string, Weapon> Weapon in Session.GetRoleplay().Weapons)
                        {
                            Weaponss.Add(WeaponManager.GetWeaponName(Weapon.Key), Weapon.Value);
                        }
                        if (!Weaponss.ContainsKey(Wep) && !Wep.ToLower().Contains("police") && !Wep.ToLower().Contains("npa"))
                        {
                            Session.SendWhisper("No tienes " + Wep + "!");
                            return true;
                        }
                        if (Session.GetRoleplay().RayFrozen)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas congelado!");
                        }
                        if (Wep.ToLower().Contains("police"))
                        {
                            if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                            {
                                Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                                return true;
                            }

                            if (Session.GetRoleplay().JobHasRights("police")
                                || Session.GetRoleplay().JobHasRights("swat")
                                || Session.GetRoleplay().JobHasRights("gov"))
                            {
                                if (Session.GetRoleplay().Working)
                                {
                                    Session.GetRoleplay().Equiped = WeaponManager.WeaponsData[Wep].Name;
                                    RoleplayManager.Shout(Session, "*Equipo su " + WeaponManager.WeaponsData[Wep].DisplayName + "*", 6);
                                    Session.GetRoleplay().MultiCoolDown["equip_cooldown"] = 5;
                                    Session.GetRoleplay().CheckingMultiCooldown = true;
                                    User.ApplyEffect(101);
                                    return true;
                                }
                                else
                                {
                                    Session.SendWhisper("Debes estar trabajando para usar esta arma!");
                                    return true;
                                }
                            }
                            else
                            {
                                Session.SendWhisper("Tu trabajo no cumple las normas de la ley!");
                                return true;
                            }
                        }
                        if (Wep.ToLower().Contains("npa"))
                        {

                            if (!JobManager.validJob(Session.GetRoleplay().JobId, Session.GetRoleplay().JobRank))
                            {
                                Session.SendWhisper("Tu empleo no permite esto!", false, 34);
                                return true;
                            }

                            if (Session.GetRoleplay().JobHasRights("npa"))
                            {
                                if (Session.GetRoleplay().Working)
                                {
                                    Session.GetRoleplay().Equiped = WeaponManager.WeaponsData[Wep].Name;
                                    RoleplayManager.Shout(Session, "*Equipo su " + WeaponManager.WeaponsData[Wep].DisplayName + "*", 6);
                                    Session.GetRoleplay().MultiCoolDown["equip_cooldown"] = 5;
                                    Session.GetRoleplay().CheckingMultiCooldown = true;
                                    User.ApplyEffect(101);
                                    return true;
                                }
                                else
                                {
                                    Session.SendWhisper("Debes estar trabajando para usar esta arma!");
                                    return true;
                                }
                            }
                            else
                            {
                                Session.SendWhisper("Tu empleo no permite esto!");
                                return true;
                            }
                        }
                        #endregion

                        #region Execute


                        Session.GetRoleplay().Equiped = WeaponManager.WeaponsData[Wep].Name;


                        string EquipMSG = "";

                        EquipMSG = WeaponManager.WeaponsData[Wep].Equip_Msg.Replace("%weapon_name%", WeaponManager.WeaponsData[Wep].Name);
                        Session.GetHabbo().GetRoomUser().LastBubble = 6;
                        Session.Shout(EquipMSG);
                        Session.GetHabbo().GetRoomUser().LastBubble = 0;
                        User.ApplyEffect(WeaponManager.WeaponsData[Wep].Effect_Id);
                        User.CarryItem(WeaponManager.WeaponsData[Wep].HandItem);
                        Session.GetRoleplay().MultiCoolDown["equip_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        switch (Session.GetRoleplay().Equiped)
                        {
                            case "freezeray":
                                {

                                    if (Session.GetRoleplay().FreezeRay == null)
                                    {
                                        Session.GetRoleplay().FreezeRay = new FreezeRay(Session);
                                        Session.GetRoleplay().FreezeRay.On = true;

                                        if (RoleplayData.Data["freeze.debug.show.msgs"] == "true")
                                        {
                                            Session.SendWhisper("Relajate!");
                                        }

                                    }
                                    else
                                    {

                                        if (RoleplayData.Data["freeze.debug.show.msgs"] == "true")
                                        {
                                            Session.SendWhisper("Relajate!");
                                        }

                                        Session.GetRoleplay().FreezeRay.On = true;
                                        Session.GetRoleplay().FreezeRay.PreparingMsg = false;
                                    }

                                }
                                break;
                        }

                        #endregion

                        return true;
                    }
                #endregion
                #region :unequip
                case "unequip":
                    {

                        #region Params/Variables
                        string Wep = "";
                        RoomUser User = Session.GetHabbo().GetRoomUser();
                        #endregion

                        #region Conditions
                        if (Params.Length < 2)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :unequip <arma>");
                            return true;
                        }
                        else
                        {
                            Wep = Params[1].ToString();
                        }
                        if (Session.GetRoleplay().Dead || Session.GetRoleplay().Jailed)
                        {
                            return true;
                        }
                        Dictionary<string, Weapon> Weaponss = new Dictionary<string, Weapon>();
                        foreach (KeyValuePair<string, Weapon> Weapon in Session.GetRoleplay().Weapons)
                        {
                            Weaponss.Add(WeaponManager.GetWeaponName(Weapon.Key), Weapon.Value);
                        }
                        if (!Weaponss.ContainsKey(Wep) && !Wep.ToLower().Contains("police") && !Wep.ToLower().Contains("npa"))
                        {
                            Session.SendWhisper("No tienes: " + Wep + "!");
                            return true;
                        }
                        if (Wep.ToLower().Contains("police"))
                        {
                            User.ApplyEffect(0);
                            RoleplayManager.Shout(Session, "*Des equipo " + Session.GetRoleplay().Equiped + "*", 6);
                            Session.GetRoleplay().Equiped = null;
                            return true;
                        }
                        if (Wep.ToLower().Contains("npa"))
                        {
                            User.ApplyEffect(0);
                            RoleplayManager.Shout(Session, "*Des equipo " + Session.GetRoleplay().Equiped + "*", 6);
                            Session.GetRoleplay().Equiped = null;
                            return true;
                        }
                        if (Session.GetRoleplay().Equiped != Wep)
                        {
                            Session.SendWhisper("No puedes desequipar esta arma, por que no la tenias equipada!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Session.GetRoleplay().UnEquip();

                        #endregion

                        return true;
                    }
                #endregion
                #region :buybullets
                case "comprarbalas":
                    {

                        try
                        {
                            #region Params
                            int Amnt = 0;
                            if (!RoleplayManager.ParamsMet(Params, 1))
                            {
                                Session.SendWhisper("Comando inv√°lido digite: :comprarbalas <cantidad>");
                                return true;
                            }
                            else
                            {
                                Amnt = Convert.ToInt32(Params[1]);
                            }
                            #endregion

                            #region Conditions

                            double dub = Amnt / 2 + Amnt / 5;
                            double Conv = Math.Round(dub, 0);
                            int Pay = Convert.ToInt32(Conv);

                            if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("AMMUNATION"))
                            {
                                Session.SendWhisper("No te encuentras en la tienda de armas para realizar esta accion!");
                                return true;
                            }
                            if (Amnt < 50)
                            {
                                Session.SendWhisper("El minimo de balas que puedes comprar es de 50!");
                                return true;
                            }
                            if (Amnt > 10000)
                            {
                                Session.SendWhisper("El m√°ximo de balas que puedes comprar es 10000");
                                return true;
                            }
                            if (Session.GetHabbo().Credits < Pay)
                            {
                                Session.SendWhisper("Necesitas $" + Pay + " para comprar " + Amnt + " balas!");
                                return true;
                            }
                            #endregion

                            #region Execute
                            RoleplayManager.Shout(Session, "*Compraste " + Amnt + " balas por $" + Pay + " [-$" + Pay + "]*", 6);
                            Session.GetRoleplay().Bullets += Amnt;
                            Session.GetRoleplay().SaveQuickStat("bullets", "" + Session.GetRoleplay().Bullets);
                            RoleplayManager.GiveMoney(Session, -Pay);
                            #endregion
                        }
                        catch (Exception e)
                        {

                        }

                        return true;
                    }
                #endregion
                #region :armas
                case "armas":
                    {

                        #region Condiciones
                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("AMMUNATION"))
                        {
                            Session.SendWhisper("No te encuentras en la tienda de armas!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("armas_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("armas_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["armas_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["armas_cooldown"] + "/10]");
                            return true;
                        }
                        #endregion

                        #region Ejecutamos
                        Session.SendNotif("<b>Armas Disponibles Actualmente:</b><br>Martillo - Da√±o: 1 - 5 - $1200<br>Glock / Da√±o: 5 - 10 / $5,000<br>Glock32 / Da√±o: 6 - 11 / $6,000<br>Revolver / Da√±o: 10 - 15 / $7,000<br>Mosquete / Da√±o: 10 - 20 / $10,000<br>Uzi / Da√±o: 15 - 30 / $25,000<br>AK-47 / 20 - 40 / $40,000<br>RPG Lanza Cohetes / Da√±o: Tira aviones / $25,000");
                        return true;
                        #endregion
                    }
                #endregion
                #region :buybombs
                case "comprarbombas":
                    {

                        #region Params
                        int Amnt = 0;
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :comprarbombas <cantidad>");
                            return true;
                        }
                        else
                        {
                            Amnt = Convert.ToInt32(Params[1]);
                        }
                        #endregion

                        #region Conditions

                        double dub = Amnt / 2 + Amnt / 5;
                        double Conv = Math.Round(dub, 0);
                        int Pay = Convert.ToInt32(Conv) * 5;

                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("AMMUNATION"))
                        {
                            Session.SendWhisper("Debes dirigirte a la tienda de armas para comprar bombas!");
                            return true;
                        }
                        if (Amnt < 25)
                        {
                            Session.SendWhisper("El minimo de bombas que puedes comprar es 25!");
                            return true;
                        }
                        if (Amnt > 10000)
                        {
                            Session.SendWhisper("El m√°ximo de bombas que puedes comprar es 10000");
                            return true;
                        }
                        if (Session.GetHabbo().Credits < Pay)
                        {
                            Session.SendWhisper("Necesitas $" + Pay + " para comprar " + Amnt + " bombas!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Compraste " + Amnt + " bombas pagando $" + Pay + " [-$" + Pay + "]*", 6);
                        Session.GetRoleplay().Bombs += Amnt;
                        Session.GetRoleplay().SaveQuickStat("bombs", "" + Session.GetRoleplay().Bombs);
                        RoleplayManager.GiveMoney(Session, -Pay);
                        #endregion

                        return true;
                    }
                #endregion
                #region :buyarmor
                case "comprarchaleco":
                case "comprarproteccion":
                case "comprarantibalas":
                    {

                        #region Params
                        int Amnt = 0;
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :comprarchaleco [cantidad]");
                            return true;
                        }
                        else
                        {
                            Amnt = Convert.ToInt32(Params[1]);
                        }
                        #endregion

                        #region Conditions
                        int Pay = 0;
                        if (Session.GetHabbo().Rank >= 2)
                        {
                            Pay = Amnt * 500;
                        }
                        if (Session.GetHabbo().Rank <= 1)
                        {
                            Pay = Amnt * 1000;
                        }

                        if (!Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("AMMUNATION"))
                        {
                            Session.SendWhisper("Debes estar en la Tienda de Armas [Sala ID: 19] para comprar chalecos!");
                            return true;
                        }
                        if (Session.GetHabbo().Credits < Pay && Amnt > 1)
                        {
                            Session.SendWhisper("Necesitas $" + Pay + " para comprar " + Amnt + " chalecos!");
                            return true;
                        }
                        if (Amnt > 10000)
                        {
                            Session.SendWhisper("El m√°ximo de protecci√≥n que puedes comprar es 10000");
                            return true;
                        }
                        if (Session.GetHabbo().Credits < Pay && Amnt == 1)
                        {
                            Session.SendWhisper("Necesitas $" + Pay + " para un chaleco!");
                            return true;
                        }
                        if (Amnt < 1)
                        {
                            Session.SendWhisper("Estas borracho?");
                            return true;
                        }
                        #endregion

                        #region Execute
                        if (Amnt == 1)
                        {
                            RoleplayManager.Shout(Session, "*Comprando 1 chaleco por $" + Pay + " [-$" + Pay + "]*");
                            Session.GetRoleplay().Vests += Amnt;
                            Session.GetRoleplay().SaveQuickStat("vests", "" + Session.GetRoleplay().Vests);
                            RoleplayManager.GiveMoney(Session, -Pay);
                            return true;
                        }
                        else
                        {
                            RoleplayManager.Shout(Session, "*Comprando " + Amnt + " chalecos por $" + Pay + " [-$" + Pay + "]*");
                            Session.GetRoleplay().Vests += Amnt;
                            Session.GetRoleplay().SaveQuickStat("vests", "" + Session.GetRoleplay().Vests);
                            RoleplayManager.GiveMoney(Session, -Pay);
                            return true;
                        }                  
                        #endregion
                    }
                #endregion
                #region :reload

                case "recargar":
                    {

                        #region Conditions

                        if (Session.GetRoleplay().Equiped == null)
                        {
                            Session.SendWhisper("No tienes ninguna arma equipada para recargar!");
                            return true;
                        }
                        if (Session.GetRoleplay().GunShots <= 0)
                        {
                            Session.SendWhisper("La arma que tienes equipada, no necesita ser recargada!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto mientras estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("reload_gun"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("reload_gun", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["reload_gun"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["reload_gun"] + "/10]");
                            return true;
                        }

                        #endregion

                        #region Execute

                        Session.GetRoleplay().GunShots = 0;
                        RoleplayManager.Shout(Session, "*Recargando mi " + WeaponManager.WeaponsData[Session.GetRoleplay().Equiped].DisplayName + " (" + WeaponManager.WeaponsData[Session.GetRoleplay().Equiped].Reload_Time + ")*", 3);

                        Session.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + 5;
                        ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                        Session.GetHabbo().GetRoomUser().IsGunReloaded = true;
                        Session.GetHabbo().GetRoomUser().ReloadExpiryTime = Plus.GetUnixTimeStamp() + 5;
                        Packet.AppendInteger(5);
                        Session.SendMessage(Packet);

                        Session.GetRoleplay().MultiCoolDown["reload_gun"] = 10;
                        Session.GetRoleplay().CheckingMultiCooldown = true;


                        #endregion


                        return true;
                    }

                #endregion
                    
                #region :slap x
                case "bofetada":
                    {
                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :bofetada <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return false;
                        }
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return false;
                        }
                        if (Session.GetRoleplay().Energy < 1)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("slap_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("slap_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["slap_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["slap_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Session.GetRoleplay().Energy -= 1;
                        RoleplayManager.Shout(Session, "*Le dio una bofetada a " + TargetSession.GetHabbo().UserName + " [-1 Energia]*", 27);
                        string username = Params[1];
                        GameClient client = Plus.GetGame().GetClientManager().GetClientByUserName(username);
                        RoleplayManager.Shout(client, "*Comienza a sobarse por la bofetada de " + Session.GetHabbo().UserName + "*", 3);
                        Session.GetRoleplay().MultiCoolDown["slap_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        return true;

                        #endregion

                    }
                #endregion
                #region :violargfa x
                case "violargfa":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :violargfa <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetHabbo().UserName == TargetSession.GetHabbo().UserName)
                        {
                            Session.SendWhisper("No puedes violar a tu gfa!");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) > 3)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("violargfa_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("violargfa_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["violargfa_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["violargfa_cooldown"] + "/25]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Energy < 25)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.GetRoleplay().Energy -= 25;
                        TargetSession.GetRoleplay().EffectSeconds = 7;
                        RoleplayManager.Shout(Session, "*Violo a la gfa de " + TargetSession.GetHabbo().UserName + " [-25 Energia]*", 13);
                        RoleplayManager.Shout(TargetSession, "*Se molesta y le dan ganas de golpear a " + Session.GetHabbo().UserName + "*", 3);
                        Session.GetRoleplay().MultiCoolDown["violargfa_cooldown"] = 25;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :rape x
                case "violar":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :violar <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetHabbo().UserName == TargetSession.GetHabbo().UserName)
                        {
                            Session.SendWhisper("No te puedes violarte a ti mismo!");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) > 3)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("rape_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("rape_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["rape_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["rape_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Energy < 5)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.GetRoleplay().Energy -= 5;
                        TargetSession.GetRoleplay().EffectSeconds = 7;
                        RoleplayManager.Shout(Session, "*Violo a " + TargetSession.GetHabbo().UserName + " & le da duro contra el muro [-5 Energ√≠a]*", 13);
                        Session.GetRoleplay().MultiCoolDown["rape_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :tocarteta x
                case "tocarteta":
                case "tocartetas":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :tocartrasero <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) > 3)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("slapass_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("slapass_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["slapass_cooldown"] > 0)
                        {
                            Session.SendWhisper("Realajate! [" + Session.GetRoleplay().MultiCoolDown["slapass_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Energy < 2)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.GetRoleplay().Energy -= 2;
                        TargetSession.GetRoleplay().EffectSeconds = 7;
                        RoleplayManager.Shout(Session, "*Le agarr√≥ las tetas a " + TargetSession.GetHabbo().UserName + " & comienza a masajearlas [-2 Energ√≠a]*", 15);
                        RoleplayManager.Shout(TargetSession, "*Se excita por que " + Session.GetHabbo().UserName + " le esta tocando las tetas*", 15);
                        TargetSession.GetHabbo().GetRoomUser().ApplyEffect(4);
                        Session.GetRoleplay().MultiCoolDown["slapass_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :slapass x
                case "tocartrasero":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :tocartrasero <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) > 3)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("slapass_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("slapass_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["slapass_cooldown"] > 0)
                        {
                            Session.SendWhisper("Realajate! [" + Session.GetRoleplay().MultiCoolDown["slapass_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Energy < 2)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        Session.GetRoleplay().Energy -= 2;
                        TargetSession.GetRoleplay().EffectSeconds = 7;
                        RoleplayManager.Shout(Session, "*Toco el trasero de " + TargetSession.GetHabbo().UserName + " [-2 Energia]*", 3);
                        RoleplayManager.Shout(TargetSession, "*Se sonroja por que " + Session.GetHabbo().UserName + " le toco el trasero*", 3);
                        TargetSession.GetHabbo().GetRoomUser().ApplyEffect(4);
                        Session.GetRoleplay().MultiCoolDown["slapass_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :kiss x
                case "besar":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :besar <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        /*
                        if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o estas muerto!");
                            return true;
                        }*/

                        if (RoleplayManager.UserDistance(Session, TargetSession) > 2)
                        {
                            Session.SendWhisper("Debe estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("kiss_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("kiss_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["kiss_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["kiss_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debe estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Se inclina hacia " + TargetSession.GetHabbo().UserName + " y le da un peque√±o beso en los labios.", 12);
                        RoleplayManager.Shout(TargetSession, "*Sonrojado por la verguenza " + Session.GetHabbo().UserName + " se aleja.*", 16);
                        TargetSession.GetRoleplay().EffectSeconds = 7;
                        Session.GetRoleplay().EffectSeconds = 7;
                        Session.GetHabbo().GetRoomUser().ApplyEffect(9);
                        TargetSession.GetHabbo().GetRoomUser().ApplyEffect(9);
                        Session.GetRoleplay().MultiCoolDown["kiss_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :sex x
                case "sexo":
                    {
                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :sexo <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Energy < 5)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return false;
                        }
                        if (Session.GetRoleplay().Married_To != TargetSession.GetHabbo().Id)
                        {
                            Session.SendWhisper("Solo puedes tener relacion sexuales con tu esposo/a!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("sex_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("sex_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["sex_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["sex_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar cerca del usuario!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        TargetSession.GetRoleplay().EffectSeconds = 7;
                        Session.GetRoleplay().Energy -= 5;
                        if (Session.GetHabbo().Gender.ToLower().StartsWith("m") && TargetSession.GetHabbo().Gender.ToLower().StartsWith("f"))
                        {
                            RoleplayManager.Shout(Session, "*Toma a " + TargetSession.GetHabbo().UserName + " hacia abajo, para quitarle la ropa. [-5 Energia]*", 16);
                            RoleplayManager.Shout(TargetSession, "*Gemidos cuando " + Session.GetHabbo().UserName + " se sube sobre el.*", 16);
                        }
                        else if (Session.GetHabbo().Gender.ToLower().StartsWith("f") && TargetSession.GetHabbo().Gender.ToLower().StartsWith("m"))
                        {
                            RoleplayManager.Shout(Session, "*Emujo a " + TargetSession.GetHabbo().UserName + " al suelo, subiendose a el y quitandole la ropa. [-5 Energia]*", 16);
                            RoleplayManager.Shout(TargetSession, "*Gemidos de placer " + Session.GetHabbo().UserName + "*", 16);
                        }
                        else if (Session.GetHabbo().Gender.ToLower().StartsWith("m") && TargetSession.GetHabbo().Gender.ToLower().StartsWith("m"))
                        {
                            RoleplayManager.Shout(Session, "*Toma a " + TargetSession.GetHabbo().UserName + " hacia abajo, para quitarle la ropa. [-5 Energia]*", 16);
                            RoleplayManager.Shout(TargetSession, "*Gemidos de placer " + Session.GetHabbo().UserName + "*", 16);
                        }
                        else if (Session.GetHabbo().Gender.ToLower().StartsWith("f") && TargetSession.GetHabbo().Gender.ToLower().StartsWith("f"))
                        {
                            RoleplayManager.Shout(Session, "*Empujo a " + TargetSession.GetHabbo().UserName + " al suelo, subiendose a ella y quitandole la ropa. [-5 Energia]*", 16);
                            RoleplayManager.Shout(TargetSession, "*Gemidos cuando " + Session.GetHabbo().UserName + " se sube sobre el.*", 16);
                        }
                        else
                        {
                            RoleplayManager.Shout(Session, "*Haciendo el amor con " + TargetSession.GetHabbo().UserName + ".*");
                            RoleplayManager.Shout(TargetSession, "*Gemidos de " + Session.GetHabbo().UserName + "*");
                        }
                        TargetSession.GetHabbo().GetRoomUser().ApplyEffect(4);
                        Session.GetRoleplay().MultiCoolDown["sex_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :oral x
                case "oral":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :oral <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o estas muerto!");
                            return true;
                        }

                        if (Session.GetHabbo().UserName == TargetSession.GetHabbo().UserName)
                        {
                            Session.SendWhisper("No te puedes hacer un oral a ti mismo!");
                            return true;
                        }

                        if (Session.GetRoleplay().Energy < 5)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("suck_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("suck_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["suck_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["suck_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        if (TargetSession.GetHabbo().Gender.ToLower().StartsWith("m"))
                        {
                            RoleplayManager.Shout(Session, "*Bajo el cierre del pantalo de " + TargetSession.GetHabbo().UserName + " y comenzo a chupar su pene [-5 Energia]*", 12);
                            string username = Params[1];
                            GameClient client = Plus.GetGame().GetClientManager().GetClientByUserName(username);
                            Session.GetRoleplay().Energy -= 5;
                            RoleplayManager.Shout(client, "*Gemidos de placer de " + Session.GetHabbo().UserName + "*", 12);
                            Session.GetRoleplay().MultiCoolDown["suck_cooldown"] = Convert.ToInt32(RoleplayData.Data["suck_cooldown"]);
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }
                        else
                        {
                            RoleplayManager.Shout(Session, "*Bajo el pantalon a " + TargetSession.GetHabbo().UserName + " y comenzo a lamer su clitoris [-5 Energia]*", 12);
                            string username = Params[1];
                            GameClient client = Plus.GetGame().GetClientManager().GetClientByUserName(username);
                            Session.GetRoleplay().Energy -= 5;
                            RoleplayManager.Shout(client, "*Gemidos de placer de " + Session.GetHabbo().UserName + "*", 12);
                            Session.GetRoleplay().MultiCoolDown["suck_cooldown"] = Convert.ToInt32(RoleplayData.Data["suck_cooldown"]);
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }

                        #endregion

                        return true;
                    }
                #endregion
                #region :lickfeet x
                case "lamerpies":
                    {

                        #region Generate Instances / Sessions
                        Random Rand = new Random();
                        int Chance = Rand.Next(1, 11);

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :lamerpies <usuario>");
                            return true;
                        }

                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (!RoleplayManager.CanInteract(Session, TargetSession, true))
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o estas muerto!");
                            return true;
                        }

                        if (Session.GetRoleplay().Energy < 5)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("lickfeet_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("lickfeet_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["lickfeet_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["lickfeet_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        RoleplayManager.Shout(Session, "*Se pone en cunclillas y comienza a lamerle los pies a " + TargetSession.GetHabbo().UserName + "[-5 Energia]*", 12);
                        Session.GetRoleplay().Energy -= 5;
                        RoleplayManager.Shout(TargetSession, "*Se rie un poco por que " + Session.GetHabbo().UserName + " le esta lamiendo los pies*", 12);
                        Session.GetRoleplay().MultiCoolDown["lickfeet_cooldown"] = Convert.ToInt32(RoleplayData.Data["lickfeet_cooldown"]);
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        if (Chance >= 7)
                        {
                            if ((Session.GetRoleplay().CurHealth - 10) <= 0)
                            {
                                RoleplayManager.Shout(Session, "*Comienza a asfixiarse y cae muerto por que se trago bastantes bacterias de " + TargetSession.GetHabbo().UserName + "*", 32);
                                Session.GetRoleplay().DeadFigSet = false;
                                Session.GetRoleplay().DeadSeconds = 60;
                                Session.GetRoleplay().DeadTimer = 2;
                                Session.GetRoleplay().Dead = true;
                                Session.GetRoleplay().SaveStatusComponents("dead");
                                Session.GetRoleplay().Deaths++;
                                RoleplayManager.HandleDeath(Session);
                            }
                            else
                            {
                                RoleplayManager.Shout(Session, "*Se traga algunas bacterias de" + TargetSession.GetHabbo().UserName + " [-10 Vida]*", 32);
                                Session.GetRoleplay().CurHealth -= 10;
                                Session.GetRoleplay().SaveQuickStat("curhealth", "" + Session.GetRoleplay().CurHealth);
                            }
                        }

                        #endregion

                        return true;
                    }
                #endregion
                #region :anal x
                case "anal":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :anal <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o estas muerto!");
                            return true;
                        }

                        if (Session.GetRoleplay().Energy < 5)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("anal_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("anal_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["anal_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["anal_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        if (Session.GetHabbo().Gender.ToLower().StartsWith("m"))
                        {
                            RoleplayManager.Shout(Session, "*Mete su boca en el pene de " + TargetSession.GetHabbo().UserName + " y comienza a hacerle un anal  [-5 Energia]*", 11);
                        }
                        else if (Session.GetHabbo().Gender.ToLower().StartsWith("f"))
                        {
                            RoleplayManager.Shout(Session, "*Mete su boca en el dildo de " + TargetSession.GetHabbo().UserName + " y comienza a hacerle un anal [-5 Energial]*", 11);
                        }
                        else
                        {
                            RoleplayManager.Shout(Session, "*Mete su boco en el pene de " + TargetSession.GetHabbo().UserName + " y comienza a hacer un anal [-5 Energia]*", 11);
                        }
                        string username = Params[1];
                        GameClient client = Plus.GetGame().GetClientManager().GetClientByUserName(username);
                        TargetSession.GetRoleplay().EffectSeconds = 7;
                        Session.GetRoleplay().Energy -= 5;
                        RoleplayManager.Shout(client, "*Geminos por el anal que " + Session.GetHabbo().UserName + " le esta haciendo*", 11);
                        TargetSession.GetHabbo().GetRoomUser().ApplyEffect(4);
                        Session.GetRoleplay().MultiCoolDown["anal_cooldown"] = Convert.ToInt32(RoleplayData.Data["anal_cooldown"]);
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :masturbate & :masturbate x
                case "masturbacion":
                case "masturbarme":
                    {
                        #region Conditions
                        bool SelfMasturbate = false;
                        GameClient TargetSession = null;
                        string Target = null;

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            SelfMasturbate = true;
                        }
                        if (RoleplayManager.ParamsMet(Params, 1))
                        {
                            Target = Convert.ToString(Params[1]);
                            TargetSession = RoleplayManager.GenerateSession(Target);

                            if (TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId && TargetSession != null)
                            {
                                Session.SendWhisper("El usuario no se encuentra en esta sala.");
                                return true;
                            }
                        }

                        if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Energy < 2)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return false;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("masturbate_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("masturbate_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["masturbate_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["masturbate_cooldown"] + "/3]");
                            return true;
                        }
                        #endregion

                        #region Execute

                        #region Self Masturbation
                        if (SelfMasturbate == true)
                        {
                            if (Session.GetHabbo().Gender.ToLower().StartsWith("m"))
                            {
                                RoleplayManager.Shout(Session, "*Bajo su pantalon y comenzo a masturbarse rapidamente [-2 Energia]*", 11);
                            }
                            else if (Session.GetHabbo().Gender.ToLower().StartsWith("f"))
                            {
                                RoleplayManager.Shout(Session, "*Bajo su pantalon y comenzo a masturbarse rapidamente [-2 Energia]*", 11);
                            }
                            else
                            {
                                RoleplayManager.Shout(Session, "*Bajo su pantalon y comenzo a masturbarse rapidamente [-2 Energia]*", 11);
                            }
                            Session.GetRoleplay().EffectSeconds = 7;
                            Session.GetRoleplay().Energy -= 2;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(4);
                            Session.GetRoleplay().MultiCoolDown["masturbate_cooldown"] = Convert.ToInt32(RoleplayData.Data["masturbate_cooldown"]);
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }
                        #endregion

                        #region Partner Masturbation
                        else
                        {
                            if (TargetSession.GetHabbo().Gender.ToLower().StartsWith("m"))
                            {
                                RoleplayManager.Shout(Session, "*Pone su mano sobre el pene de " + TargetSession.GetHabbo().UserName + " y comienza a masturbarlo rapidamente [-2 Energia]*", 11);
                                RoleplayManager.Shout(TargetSession, "*Oh si, si, sigue asi, me encanta*", 11);
                            }
                            else if (TargetSession.GetHabbo().Gender.ToLower().StartsWith("f"))
                            {
                                RoleplayManager.Shout(Session, "*Ingresa dos dedos en el interior de su vagina " + TargetSession.GetHabbo().UserName + " y comienza a girar sus dedos al rededor [-2 Energia]*", 11);
                                RoleplayManager.Shout(TargetSession, "*Oh si, si, sigue asi, me encanta*", 11);
                            }
                            else
                            {
                                RoleplayManager.Shout(Session, "*Comienza a tocar la entrepierna de" + TargetSession.GetHabbo().UserName + " [-2 Energia]*", 11);
                                RoleplayManager.Shout(TargetSession, "Oh si " + Session.GetHabbo().UserName + " continua tocandome asi bebe.", 11);
                            }
                            Session.GetRoleplay().EffectSeconds = 7;
                            TargetSession.GetRoleplay().EffectSeconds = 7;
                            Session.GetRoleplay().Energy -= 2;
                            Session.GetHabbo().GetRoomUser().ApplyEffect(4);
                            TargetSession.GetHabbo().GetRoomUser().ApplyEffect(4);
                            Session.GetRoleplay().MultiCoolDown["masturbate_cooldown"] = Convert.ToInt32(RoleplayData.Data["masturbate_cooldown"]);
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }
                        #endregion

                        #endregion
                        return true;
                    }
                #endregion
                #region :facial x
                case "facial":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :facial <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o estas muerto!");
                            return true;
                        }

                        if (Session.GetRoleplay().Energy < 5)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("facial_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("facial_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["facial_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["facial_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        if (Session.GetHabbo().Gender.ToLower().StartsWith("m"))
                        {
                            RoleplayManager.Shout(Session, "*Baja su pantalon, saca su pene y despues de una masturbacion deja caer todo su semen en la cara de " + TargetSession.GetHabbo().UserName + " [-5 Energia]*", 11);
                            string username = Params[1];
                            GameClient client = Plus.GetGame().GetClientManager().GetClientByUserName(username);
                            Session.GetRoleplay().Energy -= 5;
                            RoleplayManager.Shout(client, "*" + Session.GetHabbo().UserName + " se unta todo el semen en su cara*", 12);
                            Session.GetRoleplay().MultiCoolDown["facial_cooldown"] = Convert.ToInt32(RoleplayData.Data["facial_cooldown"]);
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }
                        else
                        {
                            RoleplayManager.Shout(Session, "*Baja su pantalon, toca su clitoris y despues de masturbarce deja caer todo su semen en la cara de " + TargetSession.GetHabbo().UserName + " [-5 Energia]*", 11);
                            string username = Params[1];
                            GameClient client = Plus.GetGame().GetClientManager().GetClientByUserName(username);
                            Session.GetRoleplay().Energy -= 5;
                            RoleplayManager.Shout(client, "*" + Session.GetHabbo().UserName + " se unta todo el semen en su cara*", 12);
                            Session.GetRoleplay().MultiCoolDown["facial_cooldown"] = Convert.ToInt32(RoleplayData.Data["facial_cooldown"]);
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }

                        #endregion

                        return true;
                    }
                #endregion
                #region :hug x
                case "abrazo":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :abrazo <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        /*
                        if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o esta muerto!");
                            return true;
                        }*/
                        if (RoleplayManager.UserDistance(Session, TargetSession) > 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (Session.GetHabbo().UserName == TargetSession.GetHabbo().UserName)
                        {
                            Session.SendWhisper("No te puedes abrazar a ti mismo!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("hug_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("hug_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["hug_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["hug_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Envuelve sus brazos al rededor de " + TargetSession.GetHabbo().UserName + " para regalarle un gran abrazo!*", 12);
                        TargetSession.GetRoleplay().EffectSeconds = 7;
                        Session.GetRoleplay().EffectSeconds = 7;
                        Session.GetHabbo().GetRoomUser().ApplyEffect(9);
                        TargetSession.GetHabbo().GetRoomUser().ApplyEffect(9);
                        Session.GetRoleplay().MultiCoolDown["hug_cooldown"] = Convert.ToInt32(RoleplayData.Data["hug_cooldown"]);
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :patada x
                case "patada":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :padata <usuario>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        /*if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o estas muerto!");
                            return true;
                        }*/

                        if (Session.GetHabbo().UserName == TargetSession.GetHabbo().UserName)
                        {
                            Session.SendWhisper("No te puedes patear a ti mismo!");
                            return true;
                        }

                        if (Session.GetRoleplay().Energy < 5)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("patada_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("patada_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["patada_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["patada_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debes estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute

                        if (TargetSession.GetHabbo().Gender.ToLower().StartsWith("m"))
                        {
                            RoleplayManager.Shout(Session, "*Le dio una patada en sus huevos a " + TargetSession.GetHabbo().UserName + " [-5 Energia]*", 27);
                            string username = Params[1];
                            GameClient client = Plus.GetGame().GetClientManager().GetClientByUserName(username);
                            Session.GetRoleplay().Energy -= 5;
                            RoleplayManager.Shout(client, "*Se tira al suelo y comienza a retorserse por la patada de " + Session.GetHabbo().UserName + "*", 3);
                            Session.GetRoleplay().MultiCoolDown["patada_cooldown"] = Convert.ToInt32(RoleplayData.Data["patada_cooldown"]);
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }
                        else
                        {
                            RoleplayManager.Shout(Session, "*Le dio una patada en su vagina a " + TargetSession.GetHabbo().UserName + " [-5 Energia]*", 27);
                            string username = Params[1];
                            GameClient client = Plus.GetGame().GetClientManager().GetClientByUserName(username);
                            Session.GetRoleplay().Energy -= 5;
                            RoleplayManager.Shout(client, "*Se tira al suelo y comienza a retorserse por la patada de " + Session.GetHabbo().UserName + "*", 3);
                            Session.GetRoleplay().MultiCoolDown["patada_cooldown"] = Convert.ToInt32(RoleplayData.Data["patada_cooldown"]);
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }

                        #endregion

                        return true;
                    }
                #endregion
                #region :escupir & escupir x
                case "escupir":
                    {
                        #region Conditions
                        bool SelfMasturbate = false;
                        GameClient TargetSession = null;
                        string Target = null;

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            SelfMasturbate = true;
                        }
                        if (RoleplayManager.ParamsMet(Params, 1))
                        {
                            Target = Convert.ToString(Params[1]);
                            TargetSession = RoleplayManager.GenerateSession(Target);

                            if (TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId && TargetSession != null)
                            {
                                Session.SendWhisper("El usuario no se encuentra en esta sala.");
                                return true;
                            }
                        }
                        /*if (Session.GetRoleplay().Jailed)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision!");
                            return true;
                        }*/
                        if (Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas muerto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Energy < 1)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return false;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("escupir_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("escupir_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["escupir_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["escupir_cooldown"] + "/25]");
                            return true;
                        }
                        #endregion

                        #region Execute

                        #region Al suelo
                        if (SelfMasturbate == true)
                        {
                            if (Session.GetHabbo().Gender.ToLower().StartsWith("m"))
                            {
                                RoleplayManager.Shout(Session, "*Genera un poco de saliva y escupe hacia el suelo [-1 Energia]*", 11);
                            }
                            else if (Session.GetHabbo().Gender.ToLower().StartsWith("f"))
                            {
                                RoleplayManager.Shout(Session, "*Genera un poco de saliva y escupe hacia el suelo [-1 Energia]*", 11);
                            }
                            else
                            {
                                RoleplayManager.Shout(Session, "*Genera un poco de saliva y escupe hacia el suelo [-1 Energia]*", 11);
                            }
                            Session.GetRoleplay().Energy -= 2;
                            Session.GetRoleplay().MultiCoolDown["escupir_cooldown"] = 25;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }
                        #endregion

                        #region Hacia alguien
                        else
                        {
                            if (TargetSession.GetHabbo().Gender.ToLower().StartsWith("m"))
                            {
                                RoleplayManager.Shout(Session, "*Genera un poco de saliva y le escupe a " + TargetSession.GetHabbo().UserName + " [-1 Energia]*", 11);
                                RoleplayManager.Shout(TargetSession, "*Se molesta y se limpia la saliva de su cara*", 3);                            }
                            else if (TargetSession.GetHabbo().Gender.ToLower().StartsWith("f"))
                            {
                                RoleplayManager.Shout(Session, "*Genera un poco de saliva y le escupe a " + TargetSession.GetHabbo().UserName + " [-1 Energia]*", 11);
                                RoleplayManager.Shout(TargetSession, "*Se molesta y se limpia la saliva de su cara*", 3);
                            }
                            else
                            {
                                RoleplayManager.Shout(Session, "*Genera un poco de saliva y le escupe a " + TargetSession.GetHabbo().UserName + " [-1 Energia]*", 11);
                                RoleplayManager.Shout(TargetSession, "Se molesta y se limpia la saliva de su cara", 3);
                            }
                            Session.GetRoleplay().Energy -= 2;
                            Session.GetRoleplay().MultiCoolDown["escupir_cooldown"] = 25;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                        }
                        #endregion

                        #endregion
                        return true;
                    }
                #endregion
                #region :acariciar x
                case "acariciar":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :acariciar <ciudadano>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        /*
                        if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o estas muerto!");
                            return true;
                        }*/

                        if (RoleplayManager.UserDistance(Session, TargetSession) > 1)
                        {
                            Session.SendWhisper("Debe estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("acariciar_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("acariciar_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["acariciar_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["acariciar_cooldown"] + "/3]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debe estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Pone su mano en el rostro de " + TargetSession.GetHabbo().UserName + " y comienza a acariciarlo", 12);
                        RoleplayManager.Shout(TargetSession, "*Sonrojado por que " + Session.GetHabbo().UserName + " acaricio su rostro*", 16);
                        TargetSession.GetRoleplay().EffectSeconds = 7;
                        Session.GetRoleplay().EffectSeconds = 7;
                        Session.GetHabbo().GetRoomUser().ApplyEffect(9);
                        TargetSession.GetHabbo().GetRoomUser().ApplyEffect(9);
                        Session.GetRoleplay().MultiCoolDown["acariciar_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :declararamor x
                case "declararamor":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :declararamor <ciudadano>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        /*
                        if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o estas muerto!");
                            return true;
                        }*/

                        if (RoleplayManager.UserDistance(Session, TargetSession) > 1)
                        {
                            Session.SendWhisper("Debe estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("damor_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("damor_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["damor_cooldown"] > 0)
                        {
                            Session.SendWhisper("Deja de andar de perro/a ya declaraste mucho t√∫ amor! [" + Session.GetRoleplay().MultiCoolDown["damor_cooldown"] + "/15]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 2)
                        {
                            Session.SendWhisper("Debe estar mas cerca para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Se pone de rodillas frente a " + TargetSession.GetHabbo().UserName + " y le declara su amor con una rosa", 12);
                        RoleplayManager.Shout(TargetSession, "*Se sonroja y toma la rosa que le obsequio " + Session.GetHabbo().UserName + "*", 16);
                        TargetSession.GetRoleplay().EffectSeconds = 5;
                        Session.GetRoleplay().EffectSeconds = 5;
                        Session.GetHabbo().GetRoomUser().ApplyEffect(9);
                        TargetSession.GetHabbo().GetRoomUser().CarryItem(1000);
                        Session.GetRoleplay().MultiCoolDown["damor_cooldown"] = 15;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion
                #region :callar x
                case "callar":
                    {

                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :callar <ciudadano>");
                            return true;
                        }
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        /*
                        if (Session.GetRoleplay().Jailed || Session.GetRoleplay().Dead)
                        {
                            Session.SendWhisper("No puedes hacer esto por que estas en prision o estas muerto!");
                            return true;
                        }*/

                        if (RoleplayManager.UserDistance(Session, TargetSession) > 5)
                        {
                            Session.SendWhisper("Debe estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("callar_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("callar_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["callar_cooldown"] > 0)
                        {
                            Session.SendWhisper("Tranquilo viejo! [" + Session.GetRoleplay().MultiCoolDown["callar_cooldown"] + "/60]");
                            return true;
                        }
                        if (RoleplayManager.UserDistance(Session, TargetSession) >= 6)
                        {
                            Session.SendWhisper("Debe estar mas cerca para hacer esto!");
                            return true;
                        }
                        if (Session.GetRoleplay().Energy < 50)
                        {
                            Session.SendWhisper("No tienes la energia suficiente para hacer esto!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        RoleplayManager.Shout(Session, "*Mando a callar a " + TargetSession.GetHabbo().UserName + " [-50 Energia]*", 27);
                        RoleplayManager.Shout(TargetSession, "*Se molesta y piensa como reaccionarte ante " + Session.GetHabbo().UserName + "*", 27);
                        TargetSession.GetRoleplay().EffectSeconds = 5;
                        Session.GetRoleplay().Energy -= 50;
                        Session.GetRoleplay().EffectSeconds = 5;
                        Session.GetHabbo().GetRoomUser().ApplyEffect(113);
                        TargetSession.GetHabbo().GetRoomUser().ApplyEffect(113);
                        Session.GetRoleplay().MultiCoolDown["callar_cooldown"] = 16;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }
                #endregion

                #endregion

                #region Bounties

                #region :blist

                case "recompensas":
                    {

                        string BountyList = "---- Lista de Recompensas ----\n";

                        if (Bounties.BountyUsers.Count > 0)
                        {
                            foreach (string Username in Bounties.BountyUsers.Keys)
                            {
                                BountyList += "[-] " + Username + " - Cantidad: $" + Bounties.BountyUsers[Username] + "\n";
                            }
                        }
                        else
                        {
                            BountyList += "La lista de recompensas esta vacia actualmente!";
                        }

                        Session.SendNotifWithScroll(BountyList);

                        return true;
                    }

                #endregion
                #region :sbounty <user> <amount>

                case "recompensa":
                    {

                        #region Params
                        string Username = "";
                        GameClient Target = null;
                        int Amount = 100;
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :recompensa <usuario> <cantidad>");
                            return true;
                        }
                        else
                        {
                            Username = Params[1].ToString();
                            Amount = Convert.ToInt32(Params[2]);
                            Target = RoleplayManager.GenerateSession(Username);
                        }
                        if (Target == null)
                        {
                            Session.SendWhisper("El usuario " + Username + " no fue encontrado!");
                            return true;
                        }
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("Necesitas ser VIP para hacer esto.");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :recompensa <usuario> <cantidad>");
                            return true;
                        }
                        if (!Plus.IsNum(Convert.ToString(Amount)))
                        {
                            Session.SendWhisper("Cantidad invalida.");
                            return true;
                        }
                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("recompensa_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("recompensa_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["recompensa_cooldown"] > 0)
                        {
                            Session.SendWhisper("Parece que te agrada que otros hagan el trabajo sucio! [" + Session.GetRoleplay().MultiCoolDown["recompensa_cooldown"] + "/60]");
                            return true;
                        }
                        if (Session.GetHabbo().Rank == 5)
                        {
                            Session.SendWhisper("No tienes permisos para agregar una recompensa.");
                            return true;
                        }
                        if (Amount < 100)
                        {
                            Session.SendWhisper("La recompensa minima es de $100 billetes!");
                            return true;
                        }
                        if (Amount > 100000)
                        {
                            Session.SendWhisper("La recompensa m√°xima es de $100,000 d√≥lares!");
                            return true;
                        }
                        if (Session.GetHabbo().Credits < Amount)
                        {
                            Session.SendWhisper("No tienes $" + Amount + " billetes para ofrecer esta recompensa.");
                            return true;
                        }
                        if (Bounties.BountyUsers.ContainsKey(Target.GetHabbo().UserName))
                        {
                            Session.SendWhisper("Ya estan solicitando recompensa por este usuario.");
                            return true;
                        }
                        #endregion

                        #region Execute

                        Bounties.SetBounty(Target.GetHabbo().UserName, Amount);
                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient mClient in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (mClient == null)
                                    continue;
                                if (mClient.GetHabbo() == null)
                                    continue;
                                if (mClient.GetHabbo().CurrentRoom == null)
                                    continue;
                                if (mClient.GetConnection() == null)
                                    continue;
                                mClient.SendWhisperBubble("Se agreg√≥ una nueva recompensa de $" + Amount + " por " + Target.GetHabbo().UserName + "!", 33);
                            }
                        }             
                        Session.Shout("*Dar√° una recompensa de $" + Amount + " por " + Target.GetHabbo().UserName + "*");
                        Roleplay.Misc.RoleplayManager.GiveMoney(Session, -Amount);
                        Session.GetRoleplay().MultiCoolDown["recompensa_cooldown"] = 60;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        #endregion

                        return true;
                    }

                #endregion

                #endregion

                #region Special Items

                #region :sleepingbag
                case "dormir":
                    {
                        if (Session == null)
                            return true;

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("bag_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("bag_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["bag_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["bag_cooldown"] + "/20]");
                            return true;
                        }

                        UserItem BagInv = Session.GetHabbo().GetInventoryComponent().GetBag();

                        if (BagInv != null)
                        {
                            RoomUser Me = Session.GetHabbo().GetRoomUser();

                            if (Me == null)
                                return true;

                            if (Session.GetRoleplay().Bag == null)
                            {
                                if (Me.IsWalking)
                                {
                                    Session.SendWhisper("Vamos a descansar");
                                    Me.IsWalking = false;
                                    Me.ClearMovement();
                                }

                                Session.GetRoleplay().Bag = RoleplayManager.PlaceItemToRoomReturn(BagInv.BaseItemId, Me.X, Me.Y, Me.Z, 0, false, Session.GetHabbo().CurrentRoomId, false);
                                Me.AddStatus("lay", TextHandling.GetString(Session.GetRoleplay().Bag.GetBaseItem().Height));
                                Me.Z = Session.GetRoleplay().Bag.Z;
                                Me.RotBody = Session.GetRoleplay().Bag.Rot;

                                Me.CanWalk = false;

                                Session.SendWhisper("Ganaras energia aleatoria cada 20 segundos mientras te encuentres en el saco de dormir!");

                                TimerCallback TCB = new TimerCallback(Session.GetRoleplay().BagTimerDone);

                                Session.GetRoleplay().BagTimer = new Timer(TCB, null, 20000, Timeout.Infinite);
                                Session.Shout("*Saco su saco de dormir*");

                            }
                            else
                            {
                                RoleplayManager.PickRock(Session.GetRoleplay().Bag, Session.GetRoleplay().Bag.RoomId);
                                Me.RemoveStatus("lay");
                                Session.GetRoleplay().Bag = null;
                                Session.Shout("*Se puso su saco de dormir*");
                                Session.GetRoleplay().MultiCoolDown["bag_cooldown"] = 20;
                                Session.GetRoleplay().CheckingMultiCooldown = true;

                                Me.CanWalk = true;
                            }

                            Me.UpdateNeeded = true;

                        }

                        return true;
                    }
                #endregion

                #endregion

                #endregion

                #region Non Roleplay Commands

                #region User Commands

                #region About (:about)
                case "servidor":
                    {
                        Session.SendNotif("<b>Versi√≥n:</b> 1.0\n" +
                            "<b>Actuales Desarolladores</b>\n" +
                            "CokeSK8\n" +
                            "l3lackS" +
                            "Habbo Archive\n" +
                            "(www.facebook.com/habboarchivecom)\n" +
                            "<b>Antiguos Desarolladores</b>\n" +
                            "Jerry, Ying, Jack-Mayhem\n" +
                            "<b>Plus Desarolladores</b>\n" +
                            "Francis, Tweeney, Joopie\n" +
                            "<b>Desarolladores de Buttlerfly</b>\n" +
                            "<b>SWF Versi√≥n:</b> PRODUCTION-201510261212-858675875", "Cekef Emulador");
                        return true;
                    }
                #endregion

                #region Sit (:sit)
                case "sentarse":
                    {
                        if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOSIT"))
                        {
                            Session.SendWhisper("No te puedes sentar en esta sala!");
                            return true;
                        }
                        RoomUser user = null;
                        Room room = Session.GetHabbo().CurrentRoom;

                        if (Params.Length == 2 && Session.GetHabbo().HasFuse("fuse_admin"))
                        {
                            GameClient Client = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            if (Client != null)
                                user = room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);

                            if (user == null)
                                user = room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                        }
                        else
                        {
                            user = room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                        }

                        //Session.GetHabbo().GetAvatarEffectsInventoryComponent().ApplyCustomEffect(0);



                        if (user.Statusses.ContainsKey("lie") || user.IsLyingDown || user.RidingHorse || user.IsWalking)
                        {
                            return true;
                        }

                        if (!user.Statusses.ContainsKey("sit"))
                        {
                            if ((user.RotBody % 2) == 0)
                            {
                                if (user == null)
                                    return true;

                                try
                                {
                                    user.Statusses.Add("sit", "1.0");
                                    user.Z -= 0.35;
                                    user.IsSitting = true;
                                    user.UpdateNeeded = true;
                                }
                                catch { }
                            }
                            else
                            {
                                user.RotBody--;
                                user.Statusses.Add("sit", "1.0");
                                user.Z -= 0.35;
                                user.IsSitting = true;
                                user.UpdateNeeded = true;
                            }
                        }
                        else if (user.IsSitting == true)
                        {
                            user.Z += 0.35;
                            user.Statusses.Remove("sit");
                            user.Statusses.Remove("1.0");
                            user.IsSitting = false;
                            user.UpdateNeeded = true;
                        }
                        return true;
                    }
                #endregion

                #region Pickall (:pickall)
                case "pickall":
                    {
                        if (RoleplayManager.BypassRights(Session) || Session.GetHabbo().CurrentRoom.RoomData.Owner == Session.GetHabbo().UserName)
                        {
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;

                            if (TargetRoom != null && TargetRoom.CheckRights(Session, true))
                            {

                                List<RoomItem> RemovedItems = TargetRoom.GetRoomItemHandler().RemoveAllFurniture(Session);

                                if (Session.GetHabbo().GetInventoryComponent() != null)
                                {
                                    Session.GetHabbo().GetInventoryComponent().AddItemArray(RemovedItems);
                                    Session.GetHabbo().GetInventoryComponent().UpdateItems(true);
                                }
                            }
                            else
                            {
                                Session.SendNotif("Ocurrio un error, por favor contacta con un administrador.");
                            }
                        }
                        return true;
                    }
                #endregion

                #region Update Bots (:ubots)
                case "ubots":
                case "initbots":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        Session.GetHabbo().CurrentRoom.InitUserBots();
                        Session.SendWhisper("Bots actualizados!");

                        return true;
                    }
                #endregion

                #region Unload (:unload)
                case "unload":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_builder"))
                        {
                            return false;
                        }
                        var roomId = Session.GetHabbo().CurrentRoom.RoomId;
                        var users = new List<RoomUser>(Session.GetHabbo().CurrentRoom.GetRoomUserManager().UserList.Values);

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            Session.GetHabbo().CurrentRoom.GetRoomItemHandler().SaveFurniture(dbClient);

                        Plus.GetGame().GetRoomManager().UnloadRoom(Session.GetHabbo().CurrentRoom, "Unload command");

                        Plus.GetGame().GetRoomManager().LoadRoom(roomId);

                        var roomFwd = new ServerMessage(LibraryParser.OutgoingRequest("RoomForwardMessageComposer"));
                        roomFwd.AppendInteger(roomId);

                        var data = roomFwd.GetReversedBytes();

                        foreach (var user in users.Where(user => user != null && user.GetClient() != null))
                        {
                            user.GetClient().SendMessage(data);
                            user.GetClient().SendNotifWithScroll("La sala en la que estabas fue recargada!\n\nEstas siendo transportado a la sala anterior.");
                        }
                        return true;
                    }
                #endregion

                #region User Info (:userinfo)
                case "userinfo":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            string username = null;
                            bool UserOnline = true;

                            if (!RoleplayManager.ParamsMet(Params, 1))
                            {
                                Session.SendNotif("Comando inv√°lido digite: :userinfo <user>");
                                return true;
                            }


                            username = Convert.ToString(Params[1]);

                            GameClient tTargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(username);

                            if (!RoleplayManager.CanInteract(Session, tTargetClient, false))
                            {
                                DataRow Row;
                                using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                                {
                                    dbClient.SetQuery("SELECT username, rank, online, id, motto, credits FROM users WHERE username=@user LIMIT 1");
                                    dbClient.AddParameter("user", username);
                                    Row = dbClient.GetRow();

                                    int Rank = Convert.ToInt32(Row[1]) == 12 ? 1 : Convert.ToInt32(Row[1]);

                                    Session.SendNotif("Informacion de " + username + ":\r" +
                                "Rango: " + Rank + " \r" +
                                "Usuario Id: " + Row[3].ToString() + " \r" +
                                "Mision: " + Row[4].ToString() + " \r" +
                                "Billetes: " + Row[5].ToString() + " \r");
                                }
                                return true;
                            }
                            Habbo User = tTargetClient.GetHabbo();

                            //Habbo User = Plus.GetGame().GetClientManager().GetClientByUserId(username).GetHabbo();
                            StringBuilder RoomInformation = new StringBuilder();

                            if (User.CurrentRoom != null)
                            {
                                RoomInformation.Append(" INFORMACION DE LA SALA [" + User.CurrentRoom.RoomId + "] - \r");
                                RoomInformation.Append("Due√±o: " + User.CurrentRoom.RoomData.Owner + "\r");
                                RoomInformation.Append("Nombre de la Sala: " + User.CurrentRoom.RoomData.Name + "\r");
                                RoomInformation.Append("Usuarios en la Sala: " + User.CurrentRoom.UserCount + "/" + User.CurrentRoom.RoomData.UsersMax);
                            }
                            uint Rankk = User.Rank == 12 ? 1 : User.Rank;
                            Session.SendNotif("Informacion del usuario: " + username + ":\r" +
                                "Rango: " + Rankk.ToString() + " \r" +
                                "Estado: " + UserOnline.ToString() + " \r" +
                                "ID: " + User.Id + " \r" +
                                "Sala Actual: " + User.CurrentRoomId + " \r" +
                                "Mision: " + User.Motto + " \r" +
                                "Billetes: " + User.Credits + " \r" +
                                "Muteado: " + User.Muted.ToString() + "\r" +
                                "\r\r" + RoomInformation.ToString());

                        }
                        return true;
                    }
                #endregion

                #region Disable Diagonal (:disablediagonal)
                case "disablediagonal":
                case "disablediag":
                case "togglediagonal":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            TargetRoom = Session.GetHabbo().CurrentRoom;

                            if (TargetRoom != null && TargetRoom.CheckRights(Session, true))
                            {
                                if (TargetRoom.GetGameMap().DiagonalEnabled)
                                    TargetRoom.GetGameMap().DiagonalEnabled = false;
                                else
                                    TargetRoom.GetGameMap().DiagonalEnabled = true;

                            }
                        }
                        return true;
                    }
                #endregion

                #region Freeze (:freeze)
                case "freeze":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_builder"))
                        {
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            RoomUser Target = Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUserByHabbo(Params[1]);
                            if (Target != null)
                            {
                                Target.ClearMovement();
                                Target.CanWalk = false;
                                Target.Frozen = true;
                                Target.ApplyEffect(12);
                                RoleplayManager.Shout(Session, "*Uso poderes divinos para congelar a " + Target.GetUserName() + "*");
                            }
                        }
                        return true;
                    }
                #endregion

                #region Unfreeze (:unfreeze)
                case "unfreeze":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_builder"))
                        {
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            RoomUser Target = Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUserByHabbo(Params[1]);
                            if (Target != null)
                            {
                                Target.CanWalk = true;
                                Target.Frozen = false;
                                Target.ApplyEffect(0);
                                RoleplayManager.Shout(Session, "*Uso poderes divinos para des congelar a " + Target.GetUserName() + "*");
                            }
                        }
                        return true;
                    }
                #endregion

                #region SaveFurni (:savefurni)
                case "savefurni":
                case "save":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            Session.GetHabbo().CurrentRoom.GetRoomItemHandler().SaveFurniture(dbClient);
                        Session.SendWhisper("La sala fue guardada, recuerda recargar la sala antes de irte!");
                        return true;
                    }
                #endregion

                #region Set Speed (:setspeed)
                case "setspeed":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        Room TargetRoom = Session.GetHabbo().CurrentRoom;
                        TargetRoom = Session.GetHabbo().CurrentRoom;
                        if (TargetRoom != null && TargetRoom.CheckRights(Session, true))
                        {
                            uint speed;
                            if (uint.TryParse(Params[1], out speed)) Session.GetHabbo().CurrentRoom.GetRoomItemHandler().SetSpeed(speed);
                            else Session.SendWhisper(Plus.GetLanguage().GetVar("command_setspeed_error_numbers"));
                        }

                        return true;
                    }
                #endregion

                #region Regenerate maps (:regenmaps)
                case "regenmaps":
                case "reloadmaps":
                case "fixroom":
                    {
                        #region Conditions

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("fixroom_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("fixroom_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["fixroom_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["fixroom_cooldown"] + "/60]");
                            return true;
                        }

                        #endregion

                        #region Execute

                        Session.GetHabbo().CurrentRoom.GetGameMap().GenerateMaps();
                        Session.GetHabbo().CurrentRoom.GetRoomUserManager().ToSet.Clear();
                        lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                        {
                            foreach (RoomUser User in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {
                                if (User == null)
                                    continue;

                                User.ClearMovement();
                            }
                        }
                        Session.SendWhisper("La sala fue reparada!");
                        Session.GetRoleplay().MultiCoolDown["fixroom_cooldown"] = 60;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        return true;

                        #endregion
                    }
                #endregion

                #region Empty Pets (:emptypets)
                case "emptypets":
                case "removepets":
                    {
                        Session.SendWhisper("El comando aun no esta terminado.");
                        return true;
                    }
                #endregion

                #region Mute Bots (:mutebots)
                case "mutebots":
                case "mutepets":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_senior"))
                        {
                            if (Session.GetHabbo().CurrentRoom.CheckRights(Session, true))
                            {
                                Room Room = Session.GetHabbo().CurrentRoom;
                                if (Room.MutedBots)
                                    Room.MutedBots = false;
                                else
                                    Room.MutedBots = true;

                                SendChatMessage(Session, "Los bots fueron muteados.");
                            }
                        }
                        return true;
                    }
                #endregion

                #region Dance (:dance)
                case "dance":
                    {

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisperBubble("Comando inv√°lido digite: :dance <id>");
                            return true;
                        }
                        ushort result;
                        ushort.TryParse(Params[1], out result);

                        if (result > 4)
                        {
                            Session.SendWhisper(Plus.GetLanguage().GetVar("command_dance_false"));
                            result = 0;
                        }
                        var message = new ServerMessage();
                        message.Init(LibraryParser.OutgoingRequest("DanceStatusMessageComposer"));
                        message.AppendInteger(Session.CurrentRoomUserId);
                        message.AppendInteger(result);
                        Session.GetHabbo().CurrentRoom.SendMessage(message);

                        return true;
                    }
                #endregion

                #region Say All (:sayall)
                case "sayall":
                    if (Session.GetHabbo().Rank == 23)
                    {
                        Room currentRoom2 = Session.GetHabbo().CurrentRoom;
                        if (currentRoom2 != null)
                        {
                            string Message3 = ChatCommandHandler.MergeParams(Params, 1);
                            if (Message3 != "")
                            {
                                lock (currentRoom2.GetRoomUserManager().GetRoomUsers())
                                {
                                    foreach (RoomUser roomUser2 in currentRoom2.GetRoomUserManager().GetRoomUsers())
                                        roomUser2.Chat(roomUser2.GetClient(), Message3, false, 0);
                                }
                            }
                        }
                        return true;
                    }
                    else
                        return true;

                #endregion

                #endregion

                #region Comandos VIP
                #region Moonwalk (:moonwalk)
                case "moonwalk":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Room room = Session.GetHabbo().CurrentRoom;
                            if (room == null)
                                return true;

                            RoomUser roomuser = room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                            roomuser.IsMoonwalking = !roomuser.IsMoonwalking;

                            if (roomuser.IsMoonwalking)
                                SendChatMessage(Session, "Caminata lunar activada!");
                            else
                                SendChatMessage(Session, "Caminata lunar desactivada!");
                        }
                        else
                        {
                            Session.SendWhisper("No puedes hacer esto.");
                        }
                        return true;
                    }
                #endregion

                #region Push (:push)
                case "push":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_vip") && !Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOPUSH"))
                        {
                            Room TargetRoom;
                            RoomUser TargetRoomUser;
                            RoomUser TargetRoomUser1;
                            TargetRoom = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);

                            if (TargetRoom == null)
                            {
                                return true;
                            }

                            if (Params.Length == 1)
                            {
                                SendChatMessage(Session, "Comando inv√°lido digite: :push <usuario>");
                                return true;
                            }

                            TargetRoomUser = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Convert.ToString(Params[1]));

                            if (TargetRoomUser == null)
                            {
                                SendChatMessage(Session, "El usuario no se encontro!");
                                return true;
                            }

                            if (TargetRoomUser.GetUserName() == Session.GetHabbo().UserName)
                            {
                                SendChatMessage(Session, "No te puedes empujar a ti mismo!");
                                return true;
                            }

                            if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("push_cooldown"))
                            {
                                Session.GetRoleplay().MultiCoolDown.Add("push_cooldown", 0);
                            }
                            if (Session.GetRoleplay().MultiCoolDown["push_cooldown"] > 0)
                            {
                                Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["push_cooldown"] + "/3]");
                                return true;
                            }

                            TargetRoomUser1 = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);

                            if (TargetRoomUser1 == null || TargetRoomUser.TeleportEnabled)
                            {
                                return true;
                            }

                            Session.GetRoleplay().MultiCoolDown["push_cooldown"] = 3;
                            Session.GetRoleplay().CheckingMultiCooldown = true;
                            //if ((TargetRoomUser.X == TargetRoomUser1.X - 1) || (TargetRoomUser.X == TargetRoomUser1.X + 1) || (TargetRoomUser.Y == TargetRoomUser1.Y - 1) || (TargetRoomUser.Y == TargetRoomUser1.Y + 1))
                            if (!((Math.Abs((int)(TargetRoomUser.X - TargetRoomUser1.X)) >= 2) || (Math.Abs((int)(TargetRoomUser.Y - TargetRoomUser1.Y)) >= 2)))
                            {
                                if (TargetRoomUser1.RotBody == 4)
                                { TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 1); }

                                if (TargetRoomUser1.RotBody == 0)
                                { TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 1); }

                                if (TargetRoomUser1.RotBody == 6)
                                { TargetRoomUser.MoveTo(TargetRoomUser.X - 1, TargetRoomUser.Y); }

                                if (TargetRoomUser1.RotBody == 2)
                                { TargetRoomUser.MoveTo(TargetRoomUser.X + 1, TargetRoomUser.Y); }

                                if (TargetRoomUser1.RotBody == 3)
                                {
                                    TargetRoomUser.MoveTo(TargetRoomUser.X + 1, TargetRoomUser.Y);
                                    TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 1);
                                }

                                if (TargetRoomUser1.RotBody == 1)
                                {
                                    TargetRoomUser.MoveTo(TargetRoomUser.X + 1, TargetRoomUser.Y);
                                    TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 1);
                                }

                                if (TargetRoomUser1.RotBody == 7)
                                {
                                    TargetRoomUser.MoveTo(TargetRoomUser.X - 1, TargetRoomUser.Y);
                                    TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 1);
                                }

                                if (TargetRoomUser1.RotBody == 5)
                                {
                                    TargetRoomUser.MoveTo(TargetRoomUser.X - 1, TargetRoomUser.Y);
                                    TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 1);
                                }

                                TargetRoomUser.UpdateNeeded = true;
                                TargetRoomUser1.UpdateNeeded = true;
                                TargetRoomUser1.SetRot(Rotation.Calculate(TargetRoomUser1.X, TargetRoomUser1.Y, TargetRoomUser.GoalX, TargetRoomUser.GoalY));
                                Session.Shout("*Empujo a " + TargetRoomUser.GetClient().GetHabbo().UserName + " [-5 Energia]*");
                                Session.GetRoleplay().Energy -= 5;
                            }
                            else
                            {
                                SendChatMessage(Session, Params[1] + " Necesitas estar mas cerca.");
                            }
                        }
                        else if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOPUSH"))
                        {
                            Session.SendWhisper("En esta sala no se puede hacer eso.");
                            return true;
                        }
                        else
                            Session.SendWhisper("No eres un usuario VIP.");
                        return true;
                    }
                #endregion

                #region Pull (:pull)
                case "pull":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_vip") && !Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOPULL"))
                        {
                            Room room = Session.GetHabbo().CurrentRoom;
                            if (room == null)
                            {
                                return true;
                            }


                            RoomUser roomuser = room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                            if (roomuser == null)
                            {
                                return true;
                            }
                            if (Params.Length == 1)
                            {
                                SendChatMessage(Session, "No se encontro el usuario!");
                                return true;
                            }

                            GameClient Target = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            if (Target == null)
                                return true;

                            if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("pull_cooldown"))
                            {
                                Session.GetRoleplay().MultiCoolDown.Add("pull_cooldown", 0);
                            }
                            if (Session.GetRoleplay().MultiCoolDown["pull_cooldown"] > 0)
                            {
                                Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["pull_cooldown"] + "/5]");
                                return true;
                            }


                            if (Target.GetHabbo().Id == Session.GetHabbo().Id)
                            {
                                SendChatMessage(Session, "No te puedes halar a ti mismo!");
                                return true;
                            }
                            RoomUser TargetUser = room.GetRoomUserManager().GetRoomUserByHabbo(Target.GetHabbo().Id);
                            if (TargetUser == null)
                                return true;


                            if (TargetUser.TeleportEnabled)
                                return true;

                            Session.GetRoleplay().MultiCoolDown["pull_cooldown"] = 5;
                            Session.GetRoleplay().CheckingMultiCooldown = true;

                            if (!((Math.Abs((int)(roomuser.X - TargetUser.X)) >= 3) || (Math.Abs((int)(roomuser.Y - TargetUser.Y)) >= 3)))
                            {
                                Session.Shout("*Atrajo " + Params[1] + " [-5 Energia]*");
                                Session.GetRoleplay().Energy -= 5;
                                if (roomuser.RotBody % 2 != 0)
                                    roomuser.RotBody--;

                                if (roomuser.RotBody == 0)
                                    TargetUser.MoveTo(roomuser.X, roomuser.Y - 1);
                                else if (roomuser.RotBody == 2)
                                    TargetUser.MoveTo(roomuser.X + 1, roomuser.Y);
                                else if (roomuser.RotBody == 4)
                                    TargetUser.MoveTo(roomuser.X, roomuser.Y + 1);
                                else if (roomuser.RotBody == 6)
                                    TargetUser.MoveTo(roomuser.X - 1, roomuser.Y);

                            }
                            else
                            {
                                SendChatMessage(Session, "El usuario esta muy lejos!");
                                return true;
                            }
                        }
                        else if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOPULL"))
                        {
                            Session.SendWhisper("En esta sala no se puede hacer esto.");
                            return true;
                        }
                        else
                            Session.SendWhisper("Necesitas ser usuario VIP para hacer esto.");
                        return true;
                    }
                #endregion

                #region Enable (:enable)
                case "enable":
                case "effect":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            if (Params.Length == 1)
                            {
                                SendChatMessage(Session, "Ingresa una ID");
                                return true;
                            }
                            RoomUser TargetRoomUser = Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().UserName);
                            if (TargetRoomUser.RidingHorse)
                            {
                                SendChatMessage(Session, "No puedes activar efectos mientras estas montado en un caballo!");
                                return true;
                            }
                            else if (TargetRoomUser.IsLyingDown)
                                return true;

                            string Effect = Params[1];
                            double EffectID;
                            bool isNum = double.TryParse(Effect, out EffectID);
                            if (isNum)
                            {
                                //if(EffectID != 97)
                                Session.GetHabbo().GetAvatarEffectsInventoryComponent().ActivateCustomEffect(int.Parse(EffectID.ToString()));
                            }
                            else
                            {
                                SendChatMessage(Session, "Solo usa numeros por favor!");
                                return true;
                            }
                        }
                        else
                        {
                            Session.SendWhisper("Acceso denegado.");
                        }
                        return true;
                    }
                #endregion

                #region Empty (:empty)
                case "emptyitems":
                case "empty":
                    {
                        if (Params.Length == 1)
                        {
                            Session.SendNotif("Deseas vaciar tu inventario? Recuerda que se perderan todos tus furnis!\n" +
                             "Si deseas confirmar esto, escribe \":emptyitems confirmar\". \n\nNinguna de tus pertenecias volveran a tu inventario!\n(Si no desea vaciar su inventario, ignore este mensaje!)\n\n" +
                             "NOTA! Recuerda que si tienes mas de 2800 furnis, los furnis ocultos, tambien seran borrados.");
                            return true;
                        }
                        else
                        {
                            if (Params.Length == 2)
                            {
                                if (Params[1].ToString() == "confirmar")
                                {
                                    //GameClient Client = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                                    Session.GetHabbo().GetInventoryComponent().ClearItems();
                                    Session.SendNotif("Tu inventario fue vaciado!");
                                    return true;
                                }
                            }
                        }
                        return true;
                    }
                #endregion

                #region Flag Me (:flagme)
                case "flagme":
                    {
                        #region Params

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :flagme <nombre>");
                            return true;
                        }

                        string NewName = Convert.ToString(Params[1]);

                        #endregion

                        #region Conditions
                        
                        if (Session.GetHabbo().BelCredits < 1)
                        {
                            Session.SendWhisper("Necesitas un Diamante para hacer esto!");
                            return true;
                        }

                        if (Params.Length <= 1)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :flagme <nombre>");
                            return true;
                        }

                        Regex r = new Regex("^[a-zA-Z]*$");
                        if (!r.IsMatch(NewName))
                        {
                            Session.SendWhisper("Caracteres invalidos!");
                            return true;
                        }
                        if (NewName.Length > 50 || NewName.Length < 3)
                        {
                            Session.SendWhisper("Tu nombre debe contener entre 4 y 50 caracteres!");
                            return true;
                        }

                        #endregion

                        #region Execute
                        DataRow Row;
                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("SELECT `id` FROM `users` WHERE `username` = '" + NewName + "'");
                            Row = dbClient.GetRow();
                        }
                        if (Row != null)
                        {
                            Session.SendWhisper("El nombre '" + NewName + "' ya esta en uso!");
                            return true;
                        }
                        else
                        {
                            RoleplayManager.Shout(Session, "*Cambiaste tu nombre a: " + NewName + "*");
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                Session.GetHabbo().BelCredits -= 1;
                                Session.GetHabbo().UpdateActivityPointsBalance();
                                dbClient.RunFastQuery("UPDATE `users` SET `username` = '" + NewName + "' WHERE `id` = '" + Session.GetHabbo().Id + "'");
                                // Change owner's rooms (in-case they own an apartment)
                                dbClient.SetQuery("UPDATE `rooms_data` SET `owner` = @newowner WHERE `owner` = @oldowner");
                                dbClient.AddParameter("newowner", NewName);
                                dbClient.AddParameter("oldowner", Session.GetHabbo().UserName);
                                dbClient.RunQuery();

                                Session.SendWhisper("Felicidades, haz cambiado tu nombre! Reinicia el hotel para ver los cambios.");

                            }
                            return true;
                        }
                        #endregion

                    }

                #endregion

                #endregion

                #region Moderation Commands

                #region Room Mute (:roommute) / Room unmute (:roomunmute)
                case "roommute":
                    {
                        if ((Session.GetHabbo().HasFuse("fuse_events") && !Session.GetHabbo().HasFuse("fuse_builder") && Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("EVENTS")) || Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            var room = Session.GetHabbo().CurrentRoom;
                            if (room.RoomMuted)
                            {
                                Session.SendWhisper("La sala fue muteada");
                                return true;
                            }

                            string Msg = MergeParams(Params, 1);

                            room.RoomMuted = true;

                            lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {
                                foreach (RoomUser client in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                                {

                                    if (client == null)
                                        continue;
                                    if (client.GetClient() == null)
                                        continue;
                                    if (client.GetClient().GetHabbo() == null)
                                        continue;
                                    if (client.GetClient().GetHabbo().CurrentRoom == null)
                                        continue;
                                    if (client.GetClient().GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                                        continue;

                                    client.GetClient().SendWhisperBubble("La sala fue muteada por la siguiente razon: " + Msg, 34);
                                }
                            }

                            Plus.GetGame()
                                .GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty,
                                    "Room Mute", "Room muted");
                            return true;
                        }
                        return true;
                    }
                case "roomunmute":
                    {
                        if ((Session.GetHabbo().HasFuse("fuse_events") && !Session.GetHabbo().HasFuse("fuse_builder") && Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("EVENTS")) || Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            var room = Session.GetHabbo().CurrentRoom;
                            if (!Session.GetHabbo().CurrentRoom.RoomMuted)
                            {
                                Session.SendWhisper("Actualmente la sala esta muteada.");
                                return true;
                            }

                            Session.GetHabbo().CurrentRoom.RoomMuted = false;

                            lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {
                                foreach (RoomUser client in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                                {
                                    if (client == null)
                                        continue;
                                    if (client.GetClient().GetHabbo() == null)
                                        continue;
                                    if (client.GetClient().GetHabbo().CurrentRoom == null)
                                        continue;

                                    if (client.GetClient().GetHabbo().CurrentRoom == Session.GetHabbo().CurrentRoom)
                                    {
                                        client.GetClient().SendWhisperBubble("La sala fue des muteada!", 34);
                                    }
                                }
                            }

                            Plus.GetGame()
                                .GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty,
                                    "Room Unmute", "Room UnMuted");
                        }
                        return true;
                    }
                #endregion

                #region Mute (:mute)
                case "muteu":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            string TargetUser = null;
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            TargetUser = Params[1];
                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(TargetUser);

                            if (TargetClient == null || TargetClient.GetHabbo() == null)
                            {
                                Session.SendWhisper("Usuario no encontrado.");
                                return true;
                            }

                            if (TargetClient.GetHabbo().Rank >= 6)
                            {
                                Session.SendWhisper("No puedes (des)silenciar este usuario.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Muteo a " + TargetClient.GetHabbo().UserName + "*", 33);

                            Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, TargetClient.GetHabbo().UserName, "Mute", "Muted user");
                            TargetClient.GetHabbo().Mute();
                        }
                        return true;
                    }
                #endregion

                #region Unmute (:unmute)
                case "unmuteu":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            string TargetUser = null;
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            TargetUser = Params[1];
                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(TargetUser);

                            if (TargetClient == null || TargetClient.GetHabbo() == null)
                            {
                                Session.SendWhisper("Usuario no encontrado.");
                                return true;
                            }

                            if (TargetClient.GetHabbo().Rank >= 6)
                            {
                                Session.SendWhisper("No puedes (des)silenciar este usuario.");
                                return true;
                            }
                            RoleplayManager.Shout(Session, "*Des muteo a " + TargetClient.GetHabbo().UserName + "*", 33);

                            Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, TargetClient.GetHabbo().UserName, "Unmute", "Unmuted user");
                            TargetClient.GetHabbo().UnMute();
                        }
                        return true;
                    }
                #endregion
                    
                #region Flood (:flood) *NEW*

                case "flood":
                    {
                        #region Generate Instances / Sessions
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :flood x <reason>");
                            return true;
                        }

                        string Target = Convert.ToString(Params[1]);
                        string Reason = Convert.ToString(Params[2]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            return false;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :flood x <reason>");
                            return true;
                        }
                        if (TargetSession.GetHabbo().Rank >= Session.GetHabbo().Rank)
                        {
                            Session.SendWhisper("You are not allowed to mute that user.");
                            return true;
                        }
                        #endregion

                        #region Execute

                        switch (Reason)
                        {
                            case "racism":
                                {
                                    #region Racism

                                    //FLOODS THE PLAYER
                                    int racism = 300;
                                    TargetSession.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + Convert.ToInt32(racism);
                                    ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                                    Packet.AppendInteger(Convert.ToInt32(racism));
                                    TargetSession.SendMessage(Packet);

                                    //SESSION CALLS OUT THE PLAYER OH SHIT
                                    RoleplayManager.Shout(Session, "*Floods " + TargetSession.GetHabbo().UserName + " for " + TimeSpan.FromSeconds(racism).TotalMinutes + " minutes for racism*", 33);

                                    #endregion
                                }
                                break;

                            case "harassment":
                            case "harass":
                            case "assault":
                                {
                                    #region Harassment

                                    //FLOODS THE PLAYER
                                    int harass = 120;
                                    TargetSession.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + Convert.ToInt32(harass);
                                    ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                                    Packet.AppendInteger(Convert.ToInt32(harass));
                                    TargetSession.SendMessage(Packet);

                                    //SESSION CALLS OUT THE PLAYER OH SHIT
                                    RoleplayManager.Shout(Session, "*Floods " + TargetSession.GetHabbo().UserName + " for " + TimeSpan.FromSeconds(harass).TotalMinutes + " minutes for harassment*", 33);

                                    #endregion
                                }
                                break;

                            case "language":
                            case "foul":
                            case "offensive":
                                {
                                    #region Language

                                    //FLOODS THE PLAYER
                                    int olang = 300;
                                    TargetSession.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + Convert.ToInt32(olang);
                                    ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                                    Packet.AppendInteger(Convert.ToInt32(olang));
                                    TargetSession.SendMessage(Packet);

                                    //SESSION CALLS OUT THE PLAYER OH SHIT
                                    RoleplayManager.Shout(Session, "*Floods " + TargetSession.GetHabbo().UserName + " for " + TimeSpan.FromSeconds(olang).TotalMinutes + " minutes for offensive language*", 33);

                                    #endregion
                                }
                                break;

                            case "advertising":
                            case "advertise":
                                {
                                    #region Advertising

                                    //FLOODS THE PLAYER
                                    int adv = 31536000;
                                    TargetSession.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + Convert.ToInt32(adv);
                                    ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                                    Packet.AppendInteger(Convert.ToInt32(adv));
                                    TargetSession.SendMessage(Packet);

                                    //SESSION CALLS OUT THE PLAYER OH SHIT
                                    RoleplayManager.Shout(Session, "*Floods " + TargetSession.GetHabbo().UserName + " for " + TimeSpan.FromSeconds(adv).TotalMinutes + " minutes for advertising other websites*", 33);

                                    #endregion
                                }
                                break;

                            case "spam":
                            case "spamming":
                                {
                                    #region Spamming

                                    //FLOODS THE PLAYER
                                    int spam = 60;
                                    TargetSession.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + Convert.ToInt32(spam);
                                    ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                                    Packet.AppendInteger(Convert.ToInt32(spam));
                                    TargetSession.SendMessage(Packet);

                                    //SESSION CALLS OUT THE PLAYER OH SHIT
                                    RoleplayManager.Shout(Session, "*Floods " + TargetSession.GetHabbo().UserName + " for " + TimeSpan.FromSeconds(spam).TotalMinutes + " minute for spamming*", 33);

                                    #endregion
                                }
                                break;

                            case "feet":
                            case "foot":
                                {
                                    #region Feet (Troll xD)

                                    //FLOODS THE PLAYER
                                    int feet = 31536000;
                                    Session.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + Convert.ToInt32(feet);
                                    ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                                    Packet.AppendInteger(Convert.ToInt32(feet));
                                    Session.SendMessage(Packet);

                                    //SESSION CALLS OUT THE PLAYER OH SHIT
                                    RoleplayManager.Shout(Session, "*Floods myself for " + TimeSpan.FromSeconds(feet).TotalMinutes + " minutes for trying to mute " + TargetSession.GetHabbo().UserName + " for 'feet'*", 33);

                                    #endregion
                                }
                                break;

                            case "other":
                                {
                                    #region Other

                                    //FLOODS THE PLAYER
                                    int ot = 180;
                                    TargetSession.GetHabbo().FloodTime = Plus.GetUnixTimeStamp() + Convert.ToInt32(ot);
                                    ServerMessage Packet = new ServerMessage(LibraryParser.OutgoingRequest("FloodFilterMessageComposer"));
                                    Packet.AppendInteger(Convert.ToInt32(ot));
                                    TargetSession.SendMessage(Packet);

                                    //SESSION CALLS OUT THE PLAYER OH SHIT
                                    RoleplayManager.Shout(Session, "*Floods " + TargetSession.GetHabbo().UserName + " for " + TimeSpan.FromSeconds(ot).TotalMinutes + " minutes for other*", 33);
                                    Session.SendWhisper("Please alert that user (:alert x <msg>) on why you have muted that user..");

                                    #endregion
                                }
                                break;



                            default:
                                {
                                    Session.SendWhisper("Motivo no encontrado. Motivos: racismo, lenguaje, avertencias, spam y otras.");
                                }
                                break;
                        }

                        return true;
                    }

                        #endregion

                #endregion

                #region Summon (:summon)
                case "summon":
                case "come":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_builder"))
                        {
                            var userName = Params[1];
                            if (String.Equals(userName, Session.GetHabbo().UserName,
                                StringComparison.CurrentCultureIgnoreCase))
                            {
                                Session.SendNotif(Plus.GetLanguage().GetVar("summon_yourself"));
                                return true;
                            }
                            var client = Plus.GetGame().GetClientManager().GetClientByUserName(userName);
                            if (client == null)
                            {
                                Session.SendNotif(Plus.GetLanguage().GetVar("user_not_found"));
                                return true;
                            }
                            if (Session.GetHabbo().CurrentRoom != null &&
                                Session.GetHabbo().CurrentRoomId != client.GetHabbo().CurrentRoomId)
                                client.GetMessageHandler()
                                    .PrepareRoomForUser(Session.GetHabbo().CurrentRoom.RoomId,
                                        Session.GetHabbo().CurrentRoom.RoomData.PassWord);
                            
                            Session.Shout("*Trajo a " + client.GetHabbo().UserName + "*");
                            return true;
                        }
                        return true;
                    }
                #endregion

                #region Follow (:follow)
                case "follow":
                case "stalk":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_builder"))
                        {
                            GameClient TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);

                            if (TargetClient == null || TargetClient.GetHabbo() == null)
                            {
                                Session.SendWhisper("El usuario no fue encontrado");
                                return true;
                            }

                            if (TargetClient == null || TargetClient.GetHabbo().CurrentRoom == null || TargetClient.GetHabbo().CurrentRoom == Session.GetHabbo().CurrentRoom)
                            {
                                Session.SendWhisper("No se encuentra el usuario o esta en la misma sala que tu.");
                                return true;
                            }

                            //Session.SendMessage(new RoomForwardComposer(false, TargetClient.GetHabbo().CurrentRoom.RoomId));

                            Session.GetMessageHandler().PrepareRoomForUser(TargetClient.GetHabbo().CurrentRoom.RoomId, "");
                            return true;
                        }
                        return true;
                    }
                #endregion

                #region Room kick (:roomkick)
                case "roomkick":
                    {
                        #region Conditions
                        if (!Session.GetHabbo().HasFuse("fuse_owner"))
                        {
                            return true;
                        }
                        #endregion

                        #region Execute
                        lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                        {
                            foreach (RoomUser client in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {
                                if (client == null)
                                    continue;
                                if (client.GetClient() == null)
                                    continue;
                                if (client.GetClient().GetHabbo() == null)
                                    continue;
                                if (client.GetClient().GetHabbo().CurrentRoom == null)
                                    continue;
                                if (client.GetClient().GetHabbo().CurrentRoom != Session.GetHabbo().CurrentRoom)
                                    continue;
                                if (client.GetClient() == Session)
                                    continue;
                                if (client.GetClient().GetMessageHandler() == null)
                                    continue;

                                client.GetClient().GetMessageHandler().PrepareRoomForUser(1, "");
                                client.GetClient().SendNotif("Un administrador saco a todos de la sala!");
                            }
                        }

                        RoleplayManager.Shout(Session, "*Expulso a toda la sala*", 33);

                        #endregion
                        return true;
                    }
                #endregion

                #region Super ban (:superban)
                case "superban":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            string Username = Params[1];
                            string Reason = "Razon no espesificada.";

                            if (Params.Length >= 2)
                            {
                                Reason = MergeParams(Params, 2);
                            }
                            else
                            {
                                Reason = "Razon no espesificada.";
                            }

                            GameClient TargetUser = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1].ToString());
                            if (TargetUser == null)
                            {
                                Session.SendWhisper("Ocurrio un error al buscar el usuario!");
                                return true;
                            }
                            if (TargetUser.GetHabbo().Rank >= Session.GetHabbo().Rank)
                            {
                                Session.SendWhisper("No puedes banear este usuario.");
                                return true;
                            }
                            try
                            {
                                RoleplayManager.Shout(Session, "*Uso sus poderes divinos para banear al usuario '" + TargetUser.GetHabbo().UserName + "' por siempre*", 33);
                                Plus.GetGame().GetBanManager().BanUser(TargetUser, Session.GetHabbo().UserName, Support.ModerationBanType.USERNAME, TargetUser.GetHabbo().UserName, Reason, 360000000.0);
                                string Message = Session.GetHabbo().UserName + " baneo " + TargetUser.GetHabbo().UserName + " de por vida";
                                RoleplayManager.sendStaffAlert(Message, true);
                            }
                            catch (Exception e) { Console.WriteLine(e); }
                        }
                        return true;
                    }
                #endregion

                #region Ban (:ban)

                case "ban":
                case "banuser":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            string Reason = "Razon no espesificadoa.";

                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);

                            if (TargetClient == null)
                            {
                                Session.SendWhisper("El usuario no fue encontrado.");
                                return true;
                            }

                            if (TargetClient.GetHabbo().Rank >= Session.GetHabbo().Rank)
                            {
                                Session.SendNotif("No puedes banear este usuario.");
                                return true;
                            }

                            if (Params.Length >= 3)
                            {
                                Reason = MergeParams(Params, 3);
                            }
                            else
                            {
                                Reason = "Razon no espesificada.";
                            }

                            double BanTime = 10;

                            try
                            {
                                BanTime = TimeSpan.FromMinutes(Convert.ToDouble(Params[2])).TotalSeconds;
                            }
                            catch (FormatException) { return true; }

                            if (BanTime < 10)
                            {
                                Session.SendNotif("El tiempo minimo es de 10 minutos.");
                                return true;
                            }
                            else
                            {
                                Session.Shout("*Uso sus poderes divinos para banear a '" + TargetClient.GetHabbo().UserName + "' por " + Params[2] + " minuto(s)*", 33);
                                Plus.GetGame().GetBanManager().BanUser(TargetClient, Session.GetHabbo().UserName, Support.ModerationBanType.USERNAME, TargetClient.GetHabbo().UserName, Reason, BanTime);
                                Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, TargetClient.GetHabbo().UserName, "Ban", "Ban for " + BanTime + " seconds with message " + Reason);
                                string Message = Session.GetHabbo().UserName + " baneo " + TargetClient.GetHabbo().UserName + " por " + Params[2] + " minuto";
                                RoleplayManager.sendStaffAlert(Message, true);
                            }
                        }

                        return true;
                    }

                #endregion

                #region staff hub (:staffhub x)
                case "staffhub":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            uint StaffHubId = 88;

                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);

                            if (TargetClient == null)
                            {
                                Session.SendWhisper("El usuario no fue encontrado.");
                                return true;
                            }

                            if (TargetClient.GetHabbo().Rank >= Session.GetHabbo().Rank && TargetClient.GetHabbo().Rank != 12)
                            {
                                Session.SendNotif("No tienes permiso para hacer eso.");
                                return true;
                            }

                            TargetClient.SendNotif(Session.GetHabbo().UserName + " enviado a la sala staff");
                            RoleplayManager.Shout(Session, "*Uso sus poderes divinos para enviar a " + TargetClient.GetHabbo().UserName + " a la sala staff*", 33);
                            Room Room = RoleplayManager.GenerateRoom(StaffHubId);
                            TargetClient.GetRoleplay().RequestedTaxi_WaitTime = 0;
                            TargetClient.GetRoleplay().RequestedTaxi_Arrived = false;
                            TargetClient.GetRoleplay().RecentlyCalledTaxi = true;
                            TargetClient.GetRoleplay().RecentlyCalledTaxi_Timeout = 0;
                            TargetClient.GetRoleplay().RequestedTaxiDestination = Room;
                            TargetClient.GetRoleplay().RequestedTaxi = true;
                            TargetClient.GetRoleplay().taxiTimer = new taxiTimer(TargetClient);
                            string Message = Session.GetHabbo().UserName + " envio " + TargetClient.GetHabbo().UserName + " a la sala staff";
                            RoleplayManager.sendStaffAlert(Message, true);

                        }
                        return true;
                    }


                #endregion

                #region Pornban (:pornban)
                case "pb":
                case "pornban":
                    {
                        if (RoleplayManager.BypassRights(Session))
                        {
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            string Link = "http://pornhub.com/";

                            if (!RoleplayManager.ParamsMet(Params, 2))
                            {
                                Session.SendWhisper("Comando inv√°lido digite: :pornban <usuario> <link>");
                                return true;
                            }

                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            Link = Params[2];

                            if (TargetClient == null)
                            {
                                Session.SendWhisper("El usuario no fue encontrado.");
                                return true;
                            }

                            if (TargetClient.GetHabbo().Rank >= Session.GetHabbo().Rank)
                            {
                                Session.SendNotif("No puedes hacer esto.");
                                return true;
                            }

                            if (Link == null || Link == "")
                            {
                                Session.SendNotif("Comando invalido");
                                return true;
                            }




                            string Ip = "";

                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                dbClient.SetQuery("SELECT ip_last FROM users WHERE username = '" + TargetClient.GetHabbo().UserName + "'");
                                DataRow User = dbClient.GetRow();
                                Ip = Convert.ToString(User["ip_last"]);
                            }


                            if (Ip == "")
                            {
                                Session.SendWhisper("No se encontro el usuario por ip");
                                return true;
                            }


                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                dbClient.RunFastQuery("INSERT INTO porn_bans(value,link,admin_msg) VALUES('" + Ip + "','" + Link + "','[" + Session.GetHabbo().UserName + " porn banned " + TargetClient.GetHabbo().UserName + " via client]')");
                            }

                            Session.SendWhisper("Usuario '" + TargetClient.GetHabbo().UserName + "' baneado correctamente!");


                        }

                        return true;
                    }
                #endregion

                #region alert (:alert)
                case "alertar":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            string Message = "";
                            string TargetUser = null;

                            if (!RoleplayManager.ParamsMet(Params, 2))
                            {
                                Session.SendWhisper("Uso del comando no valido: :alertar <usuario> <mensaje>");
                                return true;
                            }
                            else
                            {
                                TargetUser = Params[1];
                                Message = MergeParams(Params, 2);
                            }


                            GameClient TargetClient = null;
                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(TargetUser);


                            if (!RoleplayManager.CanInteract(Session, TargetClient, false))
                            {
                                Session.SendWhisper("Usuario no encontrado.");
                                return true;
                            }

                            Room TargetRoom = TargetClient.GetHabbo().CurrentRoom;

                            Session.SendWhisper("El usuario " + TargetClient.GetHabbo().UserName + " fue alertado correctamente!");
                            Plus.GetGame().GetClientManager().SendSuperNotif("Mensaje del hotel - Cuidado", Message, "frank10", TargetClient, "event:", "ok", false, false);
                            //TargetClient.SendNotif(Params[2] + " -" + Session.GetHabbo().UserName);
                        }
                        return true;
                    }
                #endregion
                #endregion

                #region Administration Commands

                #region Fast Walk
                case "fastwalk":
                    {
                        if (!RoleplayManager.BypassRights(Session))
                        {
                            Session.SendWhisper("No puedes hacer esto.");
                            return true;
                        }

                            Room Room = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);
                            RoomUser User = Room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);

                            if (!User.FastWalking)
                            {
                                User.FastWalking = true;
                            }
                            else
                            {
                                User.FastWalking = false;
                            }
                        

                        return true;
                    }
                #endregion

                #region Flagother (:flagu x)
                case "flagu":
                case "flagother":
                    {
                        #region Params

                        GameClient Target = null;
                        string Username = Params[1].ToString();
                        string NewName = Convert.ToString(Params[2]);

                        #endregion

                        #region Conditions

                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return true;
                        }
                        if (Params.Length <= 1)
                        {
                            Session.SendWhisper("Comando: :flagother <usuario> <nuevo usuario>");
                            return true;
                        }
                        else
                        {
                            Target = RoleplayManager.GenerateSession(Username);
                        }
                        if (NewName.Contains("'") || Enumerable.Contains<char>((IEnumerable<char>)NewName, '"') || (NewName.Contains(">") || NewName.Contains("<")) || (NewName.Contains("|") || NewName.Contains("`") || (NewName.Contains(";") || NewName.Contains("="))) || (NewName.Contains("+") || NewName.Contains("/") || (NewName.Contains("?") || NewName.Contains("/")) || (NewName.Contains(".") || NewName.Contains(",") || (NewName.Contains(")") || NewName.Contains("(")))) || (NewName.Contains("*") || NewName.Contains("&") || (NewName.Contains("^") || NewName.Contains("%")) || (NewName.Contains("$") || NewName.Contains("$") || (NewName.Contains("!") || NewName.Contains("@"))) || (NewName.Contains("#") || NewName.Contains("~") || (NewName.Contains("]") || NewName.Contains("[")) || (NewName.Contains("}") || NewName.Contains("{")))) || NewName.Contains(":"))
                        {
                            Session.SendWhisper("Caracteres invalidos!");
                            return true;
                        }
                        if (Target == null)
                        {
                            Session.SendWhisper("El usuario " + Username + ", no fue encontrado!");
                            return true;
                        }
                        #endregion

                        #region Execute
                        DataRow Row;
                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("SELECT `id` FROM `users` WHERE `username` = '" + NewName + "'");
                            Row = dbClient.GetRow();
                        }
                        if (Row != null)
                        {
                            Session.SendWhisper("El nombre '" + NewName + "' ya esta en uso!");
                            return true;
                        }
                        else
                        {
                            RoleplayManager.Shout(Session, "*Usando poderes divinos para cambiar el nombre de " + Target.GetHabbo().UserName + "' - De " + Target.GetHabbo().UserName + " a " + NewName + "*");
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                dbClient.RunFastQuery("UPDATE `users` SET `username` = '" + NewName + "' WHERE `username` = '" + Target.GetHabbo().UserName + "'");
                            }
                            return true;
                        }
                        #endregion

                    }

                #endregion

                #region Flag user (:flag x)

                case "flag":
                case "flaguser":
                    {
                        #region Generate Instances / Sessions

                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        #endregion

                        #region Conditions

                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return false;
                        }
                        if (Params.Length <= 1)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :flag <usuario>");
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }
                        if (TargetSession.GetHabbo().Rank >= Session.GetHabbo().Rank)
                        {
                            Session.SendWhisper("No se puede completar esto!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("UPDATE `rp_stats` SET `flagged` = '1' WHERE `id` = '" + TargetSession.GetHabbo().Id + "'");
                            dbClient.RunQuery();
                        }
                        RoleplayManager.Shout(Session, "*Usando poderes divinos para cambiar a " + TargetSession.GetHabbo().UserName + "*", 33);
                        Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, TargetSession.GetHabbo().UserName, "Flag", "Cambio el usuario [" + TargetSession.GetHabbo().UserName + "]");
                        TargetSession.Disconnect("Es un usuario invalido!");

                        #endregion

                        return true;
                    }

                #endregion

                #region Give Diamonds (:diamonds x)
                case "givecrystals":
                case "crystals":
                case "tokens":
                case "givetokens":
                case "diamonds":
                case "givediamonds":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;

                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            if (TargetClient != null)
                            {
                                int creditsToAdd;
                                if (int.TryParse(Params[2], out creditsToAdd))
                                {
                                    TargetClient.GetHabbo().BelCredits += creditsToAdd;
                                    TargetClient.GetHabbo().UpdateActivityPointsBalance();
                                    TargetClient.SendWhisper(Session.GetHabbo().UserName + (" te dio ") + creditsToAdd.ToString() + (" Diamantes!"));
                                    Session.SendWhisper(("Diamantes actualizados."));
                                    return true;
                                }
                                else
                                {
                                    Session.SendWhisper("Solo numeros!");
                                    return true;
                                }
                            }
                            else
                            {
                                Session.SendWhisper("Usuario no encontrado.");
                                return true;
                            }
                        }
                        return true;
                    }
                #endregion

                #region Mass Enable (:massenable)
                case "massenable":
                    {
                        if (RoleplayManager.BypassRights(Session))
                        {
                            Room room28 = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);
                            room28.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                            lock (room28.GetRoomUserManager().GetRoomUsers())
                            {
                                foreach (RoomUser user24 in room28.GetRoomUserManager().GetRoomUsers())
                                {
                                    if (!user24.RidingHorse)
                                    {
                                        user24.ApplyEffect(Convert.ToInt32(Params[1]));
                                    }
                                }
                            }
                        }
                        return true;
                    }
                #endregion

                #region Give Credits (:credits)
                case "givecredits":
                case "credits":
                case "coins":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {

                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;

                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            if (TargetClient != null)
                            {
                                int creditsToAdd;
                                if (int.TryParse(Params[2], out creditsToAdd))
                                {
                                    TargetClient.GetHabbo().Credits = TargetClient.GetHabbo().Credits + creditsToAdd;
                                    TargetClient.GetHabbo().UpdateCreditsBalance();
                                    TargetClient.SendWhisper("Un administrador te dio $" + creditsToAdd + "!");
                                    Session.SendWhisper("Le diste a " + TargetClient.GetHabbo().UserName + " $" + creditsToAdd);
                                    return true;
                                }
                                else
                                {
                                    Session.SendNotif("Solo numeros!");
                                    return true;
                                }
                            }
                            else
                            {
                                Session.SendNotif("Usuario no encontrado.");
                                return true;
                            }
                        }
                        return true;
                    }
                #endregion

                #region Give Pixels (:pixels)
                case "pixels":
                case "givepixels":
                case "duckets":
                case "giveduckets":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {

                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;

                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            if (TargetClient != null)
                            {
                                int creditsToAdd;
                                if (int.TryParse(Params[2], out creditsToAdd))
                                {
                                    TargetClient.GetHabbo().ActivityPoints = TargetClient.GetHabbo().ActivityPoints + creditsToAdd;
                                    Session.GetHabbo().NotifyNewPixels(creditsToAdd);
                                    TargetClient.GetHabbo().UpdateActivityPointsBalance();
                                    TargetClient.SendNotif(Session.GetHabbo().UserName + " te dio " + creditsToAdd.ToString() + " pixeles/duckets.");
                                    Session.SendWhisper("hi");
                                    return true;
                                }
                                else
                                {
                                    Session.SendNotif("Solo numeros!");
                                    return true;
                                }
                            }
                            else
                            {
                                Session.SendNotif("Usuario no encontrado.");
                                return true;
                            }
                        }
                        return true;
                    }
                #endregion

                #region Give Vests (:givevests)
                case "givevests":
                case "givevest":
                case "vests":
                case "vest":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {

                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;

                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            if (TargetClient != null)
                            {
                                int vestsToAdd;
                                if (int.TryParse(Params[2], out vestsToAdd))
                                {
                                    TargetClient.GetRoleplay().Vests += vestsToAdd;
                                    TargetClient.GetRoleplay().SaveQuickStat("vests", "" + TargetClient.GetRoleplay().Vests);
                                    TargetClient.SendWhisper("Un administrador te dio " + vestsToAdd + " chalecos antibalas!");
                                    Session.SendWhisper("Le diste " + TargetClient.GetHabbo().UserName + " " + vestsToAdd + " chalecos antibalas");
                                    return true;
                                }
                                else
                                {
                                    Session.SendNotif("Solo numeros!");
                                    return true;
                                }
                            }
                            else
                            {
                                Session.SendNotif("Usuario no encontrado.");
                                return true;
                            }
                        }
                        return true;
                    }
                #endregion

                #region Hotel Alert (:ha)
                case "ha":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return false;
                        }

                        string Notice = MergeParams(Params, 1);
                        ServerMessage HotelAlert = new ServerMessage(LibraryParser.OutgoingRequest("BroadcastNotifMessageComposer"));
                        HotelAlert.AppendString(Notice + "\r\n" + "- " + Session.GetHabbo().UserName);


                        Plus.GetGame().GetClientManager().QueueBroadcaseMessage(HotelAlert);

                        Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty, "HotelAlert", "Hotel alert [" + Notice + "]");
                    }
                    return true;
                #endregion

                #region Whisper Hotel Alert (:wha)

                case "wha":
                case "walert":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return false;
                        }

                        string Notice = MergeParams(Params, 1);

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient mClient in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (mClient == null)
                                    continue;
                                if (mClient.GetHabbo() == null)
                                    continue;
                                if (mClient.GetHabbo().CurrentRoom == null)
                                    continue;
                                if (mClient.GetConnection() == null)
                                    continue;
                                mClient.SendWhisperBubble("[Hotel Alerta][" + Session.GetHabbo().UserName + "]: " + Notice, 33);
                            }
                        }

                        return true;
                    }

                #endregion

                #region :vha <msg>

                case "vipaha":
                case "vipwha":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return false;
                        }

                        string Notice = MergeParams(Params, 1);

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient mClient in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (mClient == null)
                                    continue;
                                if (mClient.GetHabbo() == null)
                                    continue;
                                if (mClient.GetHabbo().CurrentRoom == null)
                                    continue;
                                if (mClient.GetConnection() == null)
                                    continue;
                                if (!mClient.GetHabbo().HasFuse("fuse_vip"))
                                    continue;
                                mClient.SendWhisperBubble("[VIP][" + Session.GetHabbo().UserName + "]: " + Notice, 19);
                            }
                        }

                        return true;
                    }

                #endregion

                #region Hotel Alert (:haviso)
                case "haviso":
                    {
                        string Notice = MergeParams(Params, 1);
                        ServerMessage HotelAlert = new ServerMessage(LibraryParser.OutgoingRequest("BroadcastNotifMessageComposer"));
                        HotelAlert.AppendString(Notice + "\r\n" + "- " + Session.GetHabbo().UserName);


                        Plus.GetGame().GetClientManager().QueueBroadcaseMessage(HotelAlert);

                        Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty, "HotelAlert", "Hotel alert [" + Notice + "]");
                    }
                    return true;
                #endregion

                #region Disconnect (:dc)
                case "disconnect":
                case "dc":
                    {
                        if (Session.GetHabbo().Rank > 5)
                        {
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);

                            if (TargetClient == null)
                            {
                                Session.SendWhisper("Usuario no encontrado.");
                                return true;
                            }

                            if (TargetClient.GetHabbo().Rank >= Session.GetHabbo().Rank)
                            {
                                Session.SendNotif("No puedes desconectar a este usuario.");
                                return true;
                            }
                            Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, TargetClient.GetHabbo().UserName, "Disconnect", "User disconnected by user");

                            TargetClient.Disconnect("Desconectado por un STAFF");
                            Session.SendWhisper("Se desconecto correctamente a " + TargetClient.GetHabbo().UserName);
                        }
                        return true;
                    }
                #endregion

                #region Position (:coords)
                case "coord":
                case "coords":
                case "position":
                    {
                        Room TargetRoom = Session.GetHabbo().CurrentRoom;
                        RoomUser TargetRoomUser = null;
                        TargetRoom = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);

                        if (TargetRoom == null)
                        {
                            return true;
                        }

                        TargetRoomUser = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);

                        if (TargetRoomUser == null)
                        {
                            return true;
                        }

                        Session.SendNotif("X: " + TargetRoomUser.X + "\n - Y: " + TargetRoomUser.Y + "\n - Z: " + TargetRoomUser.Z + "\n - Rot: " + TargetRoomUser.RotBody + ", sqState: " + TargetRoom.GetGameMap().GameMap[TargetRoomUser.X, TargetRoomUser.Y].ToString() + "\n\n - RoomID: " + Session.GetHabbo().CurrentRoomId);
                        return true;
                    }
                #endregion

                #region Teleport (:teleport)
                case "teleport":
                case "tele":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            RoomUser TargetRoomUser = null;

                            TargetRoom = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);

                            TargetRoomUser = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                            if (TargetRoomUser.RidingHorse)
                            {
                                SendChatMessage(Session, "No puedes usar este comando arriba de un caballo!");
                                return true;
                            }
                            if (TargetRoomUser == null)
                                return true;

                            TargetRoomUser.TeleportEnabled = !TargetRoomUser.TeleportEnabled;

                            if (!TargetRoomUser.TeleportEnabled)
                            {
                                Session.SendWhisper("Teleport desactivado!");
                            }
                            else if (TargetRoomUser.TeleportEnabled)
                            {
                                Session.SendWhisper("Teleport activado!");
                            }

                            TargetRoom.GetGameMap().GenerateMaps();
                        }
                        return true;
                    }
                #endregion

                #region Update (:update_x)
                #region Update Catalog
                case "update_catalog":
                case "reload_catalog":
                case "recache_catalog":
                case "refresh_catalog":
                case "update_catalogue":
                case "reload_catalogue":
                case "recache_catalogue":
                case "refresh_catalogue":
                case "updatecatalog":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                Plus.GetGame().GetCatalog().Initialize(dbClient);
                            }
                            Plus.GetGame().GetClientManager().QueueBroadcaseMessage(new ServerMessage(LibraryParser.OutgoingRequest("PublishShopMessageComposer")));

                            Session.SendWhisper("El catalogo fue actualizado!");
                            return true;
                        }
                        return true;
                    }
                #endregion

                #region Update Items
                case "update_items":
                case "reload_items":
                case "recache_items":
                case "refresh_items":
                case "updateitems":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                Plus.GetGame().GetItemManager().LoadItems(dbClient);
                            }
                            Session.SendWhisper("La definicion de los items fue actualizada!");
                        }

                        return true;
                    }
                #endregion

                #region Update Youtube TVs
                case "update_youtube":
                case "refresh_youtube":
                case "updatetvs":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        Session.SendWhisper("Por favor carga un video de Youtube al playlist...");
                        Session.GetHabbo().GetYoutubeManager().RefreshVideos();
                        Session.SendWhisper("La playlist fue actualizada con exito.");
                        return true;
                    }
                #endregion

                #region Update Clothing
                case "update_clothing":
                case "refresh_clothing":
                case "updateclothing":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        Session.SendWhisper("Actualizando, por favor espera!");
                        using (IQueryAdapter adapter5 = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            Plus.GetGame().GetClothingManager().Initialize(adapter5);
                        }
                        Session.SendWhisper("La ropa fue actualizada con exito!");
                        return true;
                    }
                #endregion

                #region Update Polls
                case "reload_polls":
                case "refresh_polls":
                case "update_polls":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        using (IQueryAdapter adapter5 = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            Plus.GetGame().GetPollManager().Init(adapter5);
                        }
                        return true;
                    }
                #endregion

                #region Update Breeds
                case "update_breeds":
                case "refresh_petbreeds":
                case "updatebreeds":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        using (IQueryAdapter adapter6 = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            PetRace.Init(adapter6);
                        }
                        return true;
                    }
                #endregion

                #region Update Filter
                case "update_filter":
                case "refresh_bannedhotels":
                case "updatefilter":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }

                        using (var dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            Security.AntiPublicistas.Load(dbClient);
                        }

                        Session.SendWhisper(Plus.GetLanguage().GetVar("command_refresh_banned_hotels"));
                        return true;
                    }
                #endregion

                #region Update Songs
                case "update_songs":
                case "refresh_songs":
                case "updatesongs":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        HabboHotel.SoundMachine.SongManager.Initialize();
                        Session.SendWhisper("Los sonidos fueron actualizados.");

                        return true;
                    }
                #endregion

                #region Update Achievements
                case "update_achievements":
                case "refresh_achievements":
                case "updateachievements":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return true;
                        }
                        Plus.GetGame().GetAchievementManager().LoadAchievements(Plus.GetDatabaseManager().GetQueryReactor());
                        Session.SendWhisper("Las recompensas fueron actualizadas.");

                        return true;
                    }
                #endregion

                #region Update Navigator
                case "update_navigator":
                case "reload_navigator":
                case "recache_navigator":
                case "refresh_navigator":
                case "updatenavigator":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                Plus.GetGame().GetNavigator().Initialize(dbClient);
                            }
                            Session.SendWhisper("El navegador fue actualizado!");
                        }
                        return true;
                    }
                #endregion

                #region Update Ranks
                case "update_ranks":
                case "reload_ranks":
                case "recache_ranks":
                case "refresh_ranks":
                case "updateranks":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                Plus.GetGame().GetRoleManager().LoadRights(dbClient);
                            }
                            Session.SendWhisper("Rangos actualizados!");
                        }
                        return true;
                    }
                #endregion

                #region Update Settings
                case "update_settings":
                case "reload_settings":
                case "recache_settings":
                case "refresh_settings":
                case "updatesettings":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                                Plus.ConfigData = new ConfigData(dbClient);
                        }
                        return true;
                    }
                #endregion

                #region Update Groups
                case "update_groups":
                case "reload_groups":
                case "recache_groups":
                case "refresh_groups":
                case "updategroups":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Plus.GetGame().GetGroupManager().InitGroups();
                            Session.SendWhisper("Grupos actualizados!");
                        }

                        return true;
                    }
                #endregion

                #region Update Bans
                case "update_bans":
                case "updatebans":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Plus.GetGame().GetBanManager().ReCacheBans();
                            Session.SendWhisper("Baneos actualizados!");
                        }
                        return true;
                    }
                #endregion

                #region Update Quests
                case "update_quests":
                case "updatequests":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Plus.GetGame().GetQuestManager().Initialize(Plus.GetDatabaseManager().GetQueryReactor());
                            Session.SendWhisper("Misiones actualizadas!");
                        }
                        return true;
                    }
                #endregion
                #endregion

                #region Super Pull (:spull)
                case "spull":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_builder"))
                        {
                            Room room = Session.GetHabbo().CurrentRoom;
                            if (room == null)
                            {
                                SendChatMessage(Session, "Error al encontrar el usuario!");
                                return true;
                            }


                            RoomUser roomuser = room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                            if (roomuser == null)
                            {
                                SendChatMessage(Session, "No se encontro el usuario!");
                                return true;
                            }
                            if (Params.Length == 1)
                            {
                                SendChatMessage(Session, "No se encontro el usuario!");
                                return true;
                            }


                            GameClient Target = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            RoomUser TargetUser = room.GetRoomUserManager().GetRoomUserByHabbo(Target.GetHabbo().Id);
                            if (Target.GetHabbo().Id == Session.GetHabbo().Id)
                            {
                                SendChatMessage(Session, "No puedes atraerte a ti mismo!");
                                return true;
                            }

                            if (TargetUser.TeleportEnabled)
                                return true;

                            if (roomuser.RotBody % 2 != 0)
                                roomuser.RotBody--;
                            Session.Shout("*Atrajo a " + TargetUser.GetClient().GetHabbo().UserName + "*");
                            if (roomuser.RotBody == 0)
                                TargetUser.MoveTo(roomuser.X, roomuser.Y - 1);
                            else if (roomuser.RotBody == 2)
                                TargetUser.MoveTo(roomuser.X + 1, roomuser.Y);
                            else if (roomuser.RotBody == 4)
                                TargetUser.MoveTo(roomuser.X, roomuser.Y + 1);
                            else if (roomuser.RotBody == 6)
                                TargetUser.MoveTo(roomuser.X - 1, roomuser.Y);
                        }
                        return true;
                    }
                #endregion

                #region Super Push (:spush)
                case "spush":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            Room TargetRoom;
                            RoomUser TargetRoomUser;
                            RoomUser TargetRoomUser1;
                            TargetRoom = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);

                            if (TargetRoom == null)
                            {
                                return true;
                            }

                            if (Params.Length == 1)
                            {
                                SendChatMessage(Session, "Comando inv√°lido digite: :spush <usuario>");
                                return true;
                            }

                            TargetRoomUser = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Convert.ToString(Params[1]));

                            if (TargetRoomUser == null)
                            {
                                SendChatMessage(Session, "El usuario no fue encontrado!");
                                return true;
                            }

                            if (TargetRoomUser.GetUserName() == Session.GetHabbo().UserName)
                            {
                                SendChatMessage(Session, "No puedes empujarte a ti mismo!");
                                return true;
                            }

                            TargetRoomUser1 = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);

                            if (TargetRoomUser1 == null || TargetRoomUser.TeleportEnabled)
                            {
                                return true;
                            }

                            //if ((TargetRoomUser.X == TargetRoomUser1.X - 1) || (TargetRoomUser.X == TargetRoomUser1.X + 1) || (TargetRoomUser.Y == TargetRoomUser1.Y - 1) || (TargetRoomUser.Y == TargetRoomUser1.Y + 1))
                            if (!((Math.Abs((int)(TargetRoomUser.X - TargetRoomUser1.X)) >= 2) || (Math.Abs((int)(TargetRoomUser.Y - TargetRoomUser1.Y)) >= 2)))
                            {
                                if (TargetRoomUser1.RotBody == 4)
                                { TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 5); }

                                if (TargetRoomUser1.RotBody == 0)
                                { TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 5); }

                                if (TargetRoomUser1.RotBody == 6)
                                { TargetRoomUser.MoveTo(TargetRoomUser.X - 5, TargetRoomUser.Y); }

                                if (TargetRoomUser1.RotBody == 2)
                                { TargetRoomUser.MoveTo(TargetRoomUser.X + 5, TargetRoomUser.Y); }

                                if (TargetRoomUser1.RotBody == 3)
                                {
                                    TargetRoomUser.MoveTo(TargetRoomUser.X + 5, TargetRoomUser.Y);
                                    TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 5);
                                }

                                if (TargetRoomUser1.RotBody == 1)
                                {
                                    TargetRoomUser.MoveTo(TargetRoomUser.X + 5, TargetRoomUser.Y);
                                    TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 5);
                                }

                                if (TargetRoomUser1.RotBody == 7)
                                {
                                    TargetRoomUser.MoveTo(TargetRoomUser.X - 5, TargetRoomUser.Y);
                                    TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 5);
                                }

                                if (TargetRoomUser1.RotBody == 5)
                                {
                                    TargetRoomUser.MoveTo(TargetRoomUser.X - 5, TargetRoomUser.Y);
                                    TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 5);
                                }

                                TargetRoomUser.UpdateNeeded = true;
                                TargetRoomUser1.UpdateNeeded = true;
                                TargetRoomUser1.SetRot(Rotation.Calculate(TargetRoomUser1.X, TargetRoomUser1.Y, TargetRoomUser.GoalX, TargetRoomUser.GoalY));
                                Session.Shout("*Empujo a " + TargetRoomUser.GetClient().GetHabbo().UserName + "*");
                            }
                            else
                            {
                                SendChatMessage(Session, Params[1] + " Debes estar mas cerca.");
                            }
                        }
                        else if (Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("NOPUSH"))
                        {
                            Session.SendWhisper("No se puede empujar en esta sala.");
                            return true;
                        }
                        else
                            Session.SendWhisper("No tienes permisos para hacer esto!");
                        return true;
                    }
                #endregion

                #region Give Badge (:badge)
                case "placa":
                    {
                        if (Session.GetHabbo().GotCommand("givebadge"))
                        {
                            if (Params.Length != 3)
                            {
                                Session.SendNotif("Debes incluir un usuario y la ID de la placa!");
                                return true;
                            }
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;

                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            if (TargetClient != null)
                            {
                                TargetClient.GetHabbo().GetBadgeComponent().GiveBadge(Params[2], true, TargetClient);

                                Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, TargetClient.GetHabbo().UserName, "Badge", "Badge given to user [" + Params[2] + "]");
                                TargetClient.SendNotif("Recibiste una nueva placa!");
                                return true;
                            }
                            else
                            {
                                Session.SendNotif("El usuario no fue ecnontrado");
                                return true;
                            }
                        }
                        return true;
                    }
                #endregion

                #region Give Rank (:rank)

                case "rank":
                case "giverank":
                    {
                        #region Generate Instances / Sessions

                        string Target = Convert.ToString(Params[1]);
                        int RankID = Convert.ToInt32(Params[2]);
                        GameClient TargetSession = null;
                        TargetSession = RoleplayManager.GenerateSession(Target);

                        #endregion

                        #region Conditions

                        if (!RoleplayManager.BypassRights(Session))
                        {
                            return false;
                        }
                        if (!Plus.IsNum(Convert.ToString(RankID)))
                        {
                            Session.SendWhisper("Solo numeros en el rango!");
                            return true;
                        }
                        if (Params.Length <= 2)
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :rank <usuario> <rankid>");
                            return true;
                        }
                        if (TargetSession == null)
                        {
                            Session.SendWhisper("El usuario no fue encontrado!");
                            return true;
                        }

                        #endregion

                        #region Execute

                        using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                        {
                            dbClient.SetQuery("UPDATE `users` SET `rank` = '" + RankID + "' WHERE `username` = '" + TargetSession.GetHabbo().UserName + "'");
                            dbClient.RunQuery();
                        }
                        RoleplayManager.Shout(Session, "*Usando poderes divinos para cambiar el rango de " + TargetSession.GetHabbo().UserName + " (RankID: " + RankID + ")*", 33);
                        Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, TargetSession.GetHabbo().UserName, "Rank", "Dio el rango [" + RankID + "]");
                        TargetSession.SendNotif("Un administrador cambio tu rango, por favor reinicia el client!");

                        #endregion

                        return true;
                    }

                #endregion

                #region Give Ambassador (:ambas x)
                case "giveambassador":
                case "giveambas":
                case "ambas":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {
                            if (!RoleplayManager.ParamsMet(Params, 1))
                            {
                                Session.SendWhisper("Comando inv√°lido digite: :ambas <user>");
                                return true;
                            }
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                dbClient.SetQuery("UPDATE `users` SET `rank` = '3' WHERE `username` = '" + Params[1] + "'");
                                dbClient.RunQuery();
                            }
                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            if (TargetClient != null)
                            {
                                RoleplayManager.Shout(Session, "*Dio " + Params[1] + " embajador*");
                                TargetClient.GetRoleplay().JobId = 22;
                                TargetClient.GetRoleplay().JobRank = 1;
                                TargetClient.GetRoleplay().SaveJobComponents();
                                RoleplayManager.Shout(Session, "*Poderes divinos " + Params[1] + " como embajador*");
                                Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, TargetClient.GetHabbo().UserName, "Rank", "Ambassador Rank Given to User");
                                TargetClient.SendNotif("Ahora eres un embajador, por favor reinicia el hotel.");
                                return true;
                            }
                            else
                            {
                                Session.SendNotif("El usuario no fue encontrado");
                                return true;
                            }
                        }
                        return true;
                    }
                #endregion

                #region Take Ambassador (:takeambas x)
                case "takeambassador":
                case "takeambas":
                case "tambas":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {
                            if (!RoleplayManager.ParamsMet(Params, 1))
                            {
                                Session.SendWhisper("Comando inv√°lido digite: :takeambas <user>");
                                return true;
                            }
                            GameClient TargetClient = null;
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                            {
                                if (TargetClient.GetHabbo().VIP == true)
                                {
                                    dbClient.SetQuery("UPDATE `users` SET `rank` = '2' WHERE `username` = '" + Params[1] + "'");
                                    dbClient.RunQuery();
                                }
                                else
                                {
                                    dbClient.SetQuery("UPDATE `users` SET `rank` = '1' WHERE `username` = '" + Params[1] + "'");
                                    dbClient.RunQuery();
                                }
                            }
                            TargetClient = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                            if (TargetClient != null)
                            {
                                RoleplayManager.Shout(Session, "*Le quito el embajador: " + Params[1] + "*");
                                TargetClient.GetRoleplay().JobId = 1;
                                TargetClient.GetRoleplay().JobRank = 1;
                                TargetClient.GetRoleplay().SaveJobComponents();
                                Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, TargetClient.GetHabbo().UserName, "Rank", "Rango de embajador eliminado");
                                TargetClient.GetConnection().Dispose();
                                return true;
                            }
                            else
                            {
                                Session.SendNotif("El usuario no fue encontrado.");
                                return true;
                            }
                        }
                        return true;
                    }
                #endregion

                #region Mass Badge (:massbadge)
                case "massbadge":
                    {
                        if (Session.GetHabbo().GotCommand("massbadge"))
                        {
                            if (Params.Length == 1)
                            {
                                Session.SendNotif("Ingresa el codigo!");
                                return true;
                            }
                            Room room53 = Session.GetHabbo().CurrentRoom;
                            Plus.GetGame().GetClientManager().QueueBadgeUpdate(Params[1]);
                            Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty, "Badge", "Mass badge with badge [" + Params[1] + "]");
                            new ServerMessage();
                            return true;//4D71;
                        }
                        return true;
                    }
                #endregion

                #region All eyes On Me (:alleyesonme)
                case "alleyesonme":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {
                            Room room35 = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);
                            RoomUser user30 = room35.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                            lock (room35.GetRoomUserManager().GetRoomUsers())
                            {
                                foreach (RoomUser user31 in room35.GetRoomUserManager().GetRoomUsers())
                                {
                                    if (Session.GetHabbo().Id != user31.UserId)
                                    {
                                        user31.SetRot(Rotation.Calculate(user31.X, user31.Y, user30.X, user30.Y));
                                    }
                                }
                            }
                        }
                        return true;
                    }
                #endregion

                #region IP Ban (:ipban)
                case "ipban":
                case "banip":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_mod"))
                        {
                            String IPAddress = String.Empty;
                            string Username = Params[1];
                            string Reason = "Razon no espesificada.";

                            if (Params.Length >= 2)
                            {
                                Reason = MergeParams(Params, 2);
                            }
                            else
                            {
                                Reason = "Razon no espesificada.";
                            }

                            GameClient TargetUser = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1].ToString());
                            if (TargetUser == null)
                            {
                                Session.SendWhisper("El usuario no se encontra!");
                                return true;
                            }
                            if (TargetUser.GetHabbo().Rank >= Session.GetHabbo().Rank)
                            {
                                Session.SendWhisper("No puedes banear este usuario.");
                                return true;
                            }
                            try
                            {
                                using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                                {
                                    dbClient.SetQuery("SELECT `ip_last` FROM `users` WHERE `id` = '" + TargetUser.GetHabbo().Id + "' LIMIT 1");
                                    IPAddress = dbClient.GetString();
                                }
                                RoleplayManager.Shout(Session, "*Usando poderes divinos para banear a '" + TargetUser.GetHabbo().UserName + "' por siempre*", 33);
                                if (!string.IsNullOrEmpty(IPAddress))
                                    Plus.GetGame().GetBanManager().BanUser(TargetUser, Session.GetHabbo().UserName, Support.ModerationBanType.IP, IPAddress, Reason, 360000000.0);
                                Plus.GetGame().GetBanManager().BanUser(TargetUser, Session.GetHabbo().UserName, Support.ModerationBanType.USERNAME, TargetUser.GetHabbo().UserName, Reason, 360000000.0);
                                string Message = Session.GetHabbo().UserName + " ip baneada " + TargetUser.GetHabbo().UserName + " de por vida";
                                RoleplayManager.sendStaffAlert(Message, true);
                            }
                            catch (Exception e) { Console.WriteLine(e); }


                        }
                        return true;
                    }
                #endregion

                #region Machine Ban (:machineban)
                case "machineban":
                case "banmachine":
                case "mban":
                case "macban":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_admin"))
                        {
                            if (Params.Length == 1)
                            {
                                Session.SendNotif("Debes incluir el usuario y la razon!");
                            }
                            GameClient TargetUser = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1].ToString());
                            if (TargetUser == null)
                            {
                                Session.SendNotif("El usuario no fue encontrado!");
                                return true;
                            }

                            if (string.IsNullOrWhiteSpace(TargetUser.MachineId))
                            {
                                Session.SendNotif("No se puede banear este usuario por que no tiene id de maquina.");
                                return true;
                            }

                            try
                            {
                                RoleplayManager.Shout(Session, "*Uso sus poderes divinos para banear (pc ban) " + TargetUser.GetHabbo().UserName + " por siempre*", 33);

                                Plus.GetGame().GetBanManager().BanUser(TargetUser, Session.GetHabbo().UserName, Support.ModerationBanType.USERNAME, TargetUser.GetHabbo().UserName, MergeParams(Params, 2), 360000000.0);

                                if (!string.IsNullOrEmpty(TargetUser.MachineId))
                                    Plus.GetGame().GetBanManager().BanUser(TargetUser, Session.GetHabbo().UserName, Support.ModerationBanType.MACHINE, TargetUser.MachineId, MergeParams(Params, 2), 360000000.0);

                                string Message = Session.GetHabbo().UserName + " baneado " + TargetUser.GetHabbo().UserName + " por siempre";
                                RoleplayManager.sendStaffAlert(Message, true);
                            }
                            catch (Exception e) { Console.WriteLine(e); }


                        }
                        return true;
                    }
                #endregion

                #region Machine and IP ban (:mip)
                case "mip":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_admin"))
                        {
                            String IPAddress = String.Empty;

                            if (Params.Length == 1)
                            {
                                Session.SendNotif("Debes escribir el usuario y la razon!");
                            }
                            GameClient TargetUser = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1].ToString());
                            if (TargetUser == null)
                            {
                                Session.SendNotif("No se encontro el usuario solicitado!");
                                return true;
                            }
                            try
                            {
                                using (IQueryAdapter dbClient = Plus.GetDatabaseManager().GetQueryReactor())
                                {
                                    dbClient.SetQuery("SELECT `ip_last` FROM `users` WHERE `id` = '" + TargetUser.GetHabbo().Id + "' LIMIT 1");
                                    IPAddress = dbClient.GetString();
                                }

                                if (string.IsNullOrWhiteSpace(TargetUser.MachineId))
                                {
                                    Session.SendNotif("Unable to ban this user, they don't have a machine ID");
                                    return true;
                                }
                                RoleplayManager.Shout(Session, "*Uso sus poderes divinos para banear (ip y pc ban) " + TargetUser.GetHabbo().UserName + " por siempre*", 33);

                                if (!string.IsNullOrEmpty(IPAddress))
                                    Plus.GetGame().GetBanManager().BanUser(TargetUser, Session.GetHabbo().UserName, Support.ModerationBanType.IP, IPAddress, MergeParams(Params, 2), 360000000.0);
                                Plus.GetGame().GetBanManager().BanUser(TargetUser, Session.GetHabbo().UserName, Support.ModerationBanType.USERNAME, TargetUser.GetHabbo().UserName, MergeParams(Params, 2), 360000000.0);

                                if (!string.IsNullOrEmpty(TargetUser.MachineId))
                                    Plus.GetGame().GetBanManager().BanUser(TargetUser, Session.GetHabbo().UserName, Support.ModerationBanType.MACHINE, TargetUser.MachineId, MergeParams(Params, 2), 360000000.0);

                                string Message = Session.GetHabbo().UserName + " pc & ip ban " + TargetUser.GetHabbo().UserName + " por siempre";
                                RoleplayManager.sendStaffAlert(Message, true);
                            }
                            catch (Exception e) { Console.WriteLine(e); }
                        }
                        return true;
                    }
                #endregion

                #region All around me (:allaroundme)
                case "allaroundme":
                case "alltome":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {
                            Room TargetRoom = Session.GetHabbo().CurrentRoom;
                            if (Session.GetHabbo().CurrentRoom == null)
                            {
                                Session.SendNotif("Ocurrio un error!");
                                return true;
                            }
                            Room Room = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);

                            RoomUser User = Room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                            HashSet<RoomUser> users = Room.GetRoomUserManager().GetRoomUsers();
                            lock (users)
                            {
                                foreach (RoomUser Us in users)
                                {
                                    if (Session.GetHabbo().Id == Us.UserId)
                                        continue;
                                    Us.MoveTo(User.X, User.Y, true);
                                }
                            }

                            if (Params.Length == 2)
                            {
                                if (Params[1] == "override")
                                {
                                    foreach (RoomUser Us in users)
                                    {
                                        if (Session.GetHabbo().Id == Us.UserId)
                                            continue;
                                        Us.AllowOverride = true;
                                        Us.MoveTo(User.X, User.Y, true);
                                        Us.AllowOverride = false;
                                    }
                                }
                            }
                        }
                        return true;
                    }
                #endregion

                #region Hotel alert w/link (:hal)
                case "hal":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Room room56 = Session.GetHabbo().CurrentRoom;
                            string str21 = Params[1];
                            string str22 = MergeParams(Params, 2);

                            Plus.GetGame().GetClientManager().SendSuperNotif("Mensaje del Hotel - HAL", str22, "mercury_hgsmall_july", Session, str21, "Click aqu√≠ para m√°s informaci√≥n!", true, false);
                            Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty, "HotelAlert Link", "Hotel alert Link [" + str21 + "]");
                        }
                        return true;
                    }
                #endregion

                #region Staff Alert (:sa)
                case "sa":
                case "sm":
                case "staffalert":
                    if (Session.GetHabbo().HasFuse("fuse_events"))
                    {
                        string message = "";
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :sa <mensaje>");
                            return true;
                        }
                        else
                        {
                            message = "[" + Session.GetHabbo().UserName + "] " + MergeParams(Params, 1);
                        }

                        RoleplayManager.sendStaffAlert(message, false);

                        Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty, "StaffAlert", "Staff alert [" + message + "]");
                    }
                    return true;
                #endregion

                #region Spectators Mode (:invisible)
                case "invisible":
                case "spec":
                case "spectatorsmode":
                    {
                        if (Session.GetHabbo().Rank > 20)
                        {
                            if (Session.GetHabbo().SpectatorMode == false)
                            {
                                Session.GetHabbo().SpectatorMode = true;

                                Session.SendWhisper("Recarga la sala.");

                            }
                            else
                            {
                                Session.GetHabbo().SpectatorMode = false;
                                Session.SendWhisper("Recarga la sala.");

                            }
                        }
                        return true;
                    }
                #endregion

                #region Unidle (:unidle)
                case "unidle":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_senior"))
                        {
                            Habbo Habbo = Plus.GetHabboForName(Params[1]);
                            if (Habbo == null)
                                return true;

                            RoomUser User = Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUserByHabbo(Habbo.Id);

                            if (User == null)
                                return true;

                            User.UnIdle();
                        }
                        return true;
                    }
                #endregion

                #region Mass Action (:massact)
                case "massact":
                    {
                        if (RoleplayManager.BypassRights(Session))
                        {
                            try
                            {
                                Room room40 = Session.GetHabbo().CurrentRoom;
                                HashSet<RoomUser> list7 = room40.GetRoomUserManager().GetRoomUsers();
                                int action = short.Parse(Params[1]);
                                new ServerMessage();
                                foreach (RoomUser user37 in list7)
                                {
                                    if (user37 != null)
                                    {
                                        ServerMessage ActionMsg = new ServerMessage();
                                        ActionMsg.Init(LibraryParser.OutgoingRequest("RoomUserActionMessageComposer"));
                                        ActionMsg.AppendInteger(user37.VirtualId);
                                        ActionMsg.AppendInteger(action);
                                        room40.SendMessage(ActionMsg);
                                    }
                                }
                            }
                            catch { }
                        }
                        return true;
                    }
                #endregion

                #region Blacklist (:blacklist)
                /*case "blacklist":
                    {
                        
                        #region Generate Instances / Sessions
                        string Target = Convert.ToString(Params[1]);
                        GameClient TargetSession = null;
                        TargetSession = Misc.GenerateSession(Target);
                        #endregion

                        #region Conditions
                        if (Session.GetHabbo().Rank <= 5)
                        {
                            Session.SendWhisper("Only a high ranking staff member can blacklist a user.");
                            return true;
                        }
                        if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                        {
                            Session.SendWhisper("El usuario no se encuentra en esta sala.");
                            return true;
                        }

                        #endregion

                        #region Execute

                        if (!TargetSession.GetRoleplay().Blacklist)
                        {
                            Session.Shout("*Uses their god-like powers to blacklist " + TargetSession.GetHabbo().UserName + "*");
                            TargetSession.GetRoleplay().Blacklist = true;
                            TargetSession.GetRoleplay().SaveQuickStat("blacklist", TargetSession.GetRoleplay().Blacklist + "");
                        }
                        else
                        {
                            Session.Shout("*Uses their god-like powers to un-blacklist " + TargetSession.GetHabbo().UserName + "*");
                            TargetSession.GetRoleplay().Blacklist = false;
                            TargetSession.GetRoleplay().SaveQuickStat("blacklist", TargetSession.GetRoleplay().Blacklist + "");
                        }
                        return true;

                        #endregion
                        
                        return true;
                    }*/
                #endregion

                #region Override (:override)
                case "override":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Room currentRoom = Session.GetHabbo().CurrentRoom;
                            RoomUser roomUserByHabbo = null;
                            currentRoom = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);
                            if (currentRoom != null)
                            {
                                roomUserByHabbo = currentRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                                if (roomUserByHabbo != null)
                                {
                                    if (roomUserByHabbo.AllowOverride)
                                    {
                                        roomUserByHabbo.AllowOverride = false;
                                        SendChatMessage(Session, "Todo volvio a la normalidad!");
                                    }
                                    else
                                    {
                                        roomUserByHabbo.AllowOverride = true;
                                        SendChatMessage(Session, "Ahora puedes caminar sobre cualquier cosa!");
                                    }
                                    currentRoom.GetGameMap().GenerateMaps(true);
                                }
                            }

                        }
                        return true;
                    }
                #endregion

                #region Roomalert (:roomalert)
                case "roomalert":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_events"))
                        {

                            string Alert = MergeParams(Params, 1);

                            lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {
                                foreach (RoomUser user in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                                {
                                    if (user == null)
                                        continue;
                                    if (user.IsBot)
                                        continue;
                                    if (user.GetClient() == null)
                                        continue;

                                    user.GetClient().SendNotif(Alert + "\n\n- " + Session.GetHabbo().UserName);
                                }
                            }
                        }
                    }
                    return true;
                #endregion

                #region Roomalertsec (:roomalertsec)
                case "roomalertsec":
                    {
                        if (Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            string Alert = MergeParams(Params, 1);

                            lock (Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                            {
                                foreach (RoomUser user in Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUsers())
                                {
                                    if (user == null)
                                        continue;
                                    if (user.GetClient() == null)
                                        continue;
                                    if (user.IsBot)
                                        continue;

                                    user.GetClient().SendNotif(Alert);
                                }
                            }
                        }
                    }
                    return true;
                #endregion


                #endregion

                #endregion

            #endregion

            }
            return false;

        }

        #region Extra Methods / Additional Parsers
        public static Boolean ParseColourWars(GameClient Session, string Input)
        {
            Input = Input.Substring(1);
            string[] Params = Input.Split(' ');

            switch (Params[0].ToLower())
            {


                #region Foton Minigame Commands

                #region :cwremove
                case "cwremove":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Session.SendWhisper("Este comando es solo para STAFFS!");
                            return true;
                        }
                        GameClient Target = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                        if (Target == null)
                            return true;
                        Session.Shout("*Usos sus poderes divinos para eliminar a " + Target.GetHabbo().UserName + " del juego*");
                        ColourManager.RemovePlayerFromTeam(Target, Target.GetRoleplay().ColourWarTeam, true, "Fuiste sacado del juego por un administrador!");
                        return true;
                    }
                #endregion

                #region :wha <msg>

                case "wha":
                case "walert":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return false;
                        }

                        string Notice = MergeParams(Params, 1);

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient mClient in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (mClient == null)
                                    continue;
                                if (mClient.GetHabbo() == null)
                                    continue;
                                if (mClient.GetHabbo().CurrentRoom == null)
                                    continue;
                                if (mClient.GetConnection() == null)
                                    continue;
                                mClient.SendWhisperBubble("[Alerta][" + Session.GetHabbo().UserName + "]: " + Notice, 33);
                            }
                        }

                        return true;
                    }

                #endregion

                #region :ha <msg>
                case "ha":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return false;
                        }

                        string Notice = MergeParams(Params, 1);
                        ServerMessage HotelAlert = new ServerMessage(LibraryParser.OutgoingRequest("BroadcastNotifMessageComposer"));
                        HotelAlert.AppendString(Notice + "\r\n" + "- " + Session.GetHabbo().UserName);


                        Plus.GetGame().GetClientManager().QueueBroadcaseMessage(HotelAlert);

                        Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty, "HotelAlert", "Hotel alert [" + Notice + "]");
                    }
                    return true;
                #endregion

                #region :sa <msg>
                case "sa":
                case "sm":
                case "staffalert":
                    if (Session.GetHabbo().HasFuse("fuse_events"))
                    {
                        string message = "";
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :sa <message>");
                            return true;
                        }
                        else
                        {
                            message = "[" + Session.GetHabbo().UserName + "] " + MergeParams(Params, 1);
                        }

                        RoleplayManager.sendStaffAlert(message, false);

                        Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty, "StaffAlert", "Staff alert [" + message + "]");
                    }
                    return true;
                #endregion

                #region :pull x
                case "pull":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("No eres un miembros VIP!");
                            return true;
                        }

                        Room room = Session.GetHabbo().CurrentRoom;
                        if (room == null)
                        {
                            return true;
                        }


                        RoomUser roomuser = room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                        if (roomuser == null)
                        {
                            return true;
                        }
                        if (Params.Length == 1)
                        {
                            SendChatMessage(Session, "El usuario no se encontro!");
                            return true;
                        }

                        GameClient Target = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                        if (Target == null)
                            return true;

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("pull_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("pull_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["pull_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["pull_cooldown"] + "/5]");
                            return true;
                        }


                        if (Target.GetHabbo().Id == Session.GetHabbo().Id)
                        {
                            SendChatMessage(Session, "No te puedes empujar a ti mismo!");
                            return true;
                        }
                        RoomUser TargetUser = room.GetRoomUserManager().GetRoomUserByHabbo(Target.GetHabbo().Id);
                        if (TargetUser == null)
                            return true;


                        if (TargetUser.TeleportEnabled)
                            return true;

                        Session.GetRoleplay().MultiCoolDown["pull_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        if (!((Math.Abs((int)(roomuser.X - TargetUser.X)) >= 3) || (Math.Abs((int)(roomuser.Y - TargetUser.Y)) >= 3)))
                        {
                            Session.Shout("*Empujo a " + Params[1] + " [-5E]*");
                            Session.GetRoleplay().Energy -= 5;
                            if (roomuser.RotBody % 2 != 0)
                                roomuser.RotBody--;

                            if (roomuser.RotBody == 0)
                                TargetUser.MoveTo(roomuser.X, roomuser.Y - 1);
                            else if (roomuser.RotBody == 2)
                                TargetUser.MoveTo(roomuser.X + 1, roomuser.Y);
                            else if (roomuser.RotBody == 4)
                                TargetUser.MoveTo(roomuser.X, roomuser.Y + 1);
                            else if (roomuser.RotBody == 6)
                                TargetUser.MoveTo(roomuser.X - 1, roomuser.Y);

                        }
                        else
                        {
                            SendChatMessage(Session, "El usuario esta muy lejos!");
                            return true;
                        }

                        break;
                    }

                #endregion

                #region :push x
                case "push":
                    {
                        Room TargetRoom;
                        RoomUser TargetRoomUser;
                        RoomUser TargetRoomUser1;
                        TargetRoom = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);

                        if (TargetRoom == null)
                        {
                            return true;
                        }

                        if (Params.Length == 1)
                        {
                            SendChatMessage(Session, "Comando inv√°lido digite: :push <user>");
                            return true;
                        }

                        TargetRoomUser = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Convert.ToString(Params[1]));

                        if (TargetRoomUser == null)
                        {
                            SendChatMessage(Session, "Could not find that user!");
                            return true;
                        }

                        if (TargetRoomUser.GetUserName() == Session.GetHabbo().UserName)
                        {
                            SendChatMessage(Session, "Come on, surely you don't want to push yourself!");
                            return true;
                        }

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("push_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("push_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["push_cooldown"] > 0)
                        {
                            Session.SendWhisper("Cooldown [" + Session.GetRoleplay().MultiCoolDown["push_cooldown"] + "/3]");
                            return true;
                        }

                        TargetRoomUser1 = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);

                        if (TargetRoomUser1 == null || TargetRoomUser.TeleportEnabled)
                        {
                            return true;
                        }

                        Session.GetRoleplay().MultiCoolDown["push_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        //if ((TargetRoomUser.X == TargetRoomUser1.X - 1) || (TargetRoomUser.X == TargetRoomUser1.X + 1) || (TargetRoomUser.Y == TargetRoomUser1.Y - 1) || (TargetRoomUser.Y == TargetRoomUser1.Y + 1))
                        if (!((Math.Abs((int)(TargetRoomUser.X - TargetRoomUser1.X)) >= 2) || (Math.Abs((int)(TargetRoomUser.Y - TargetRoomUser1.Y)) >= 2)))
                        {
                            if (TargetRoomUser1.RotBody == 4)
                            { TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 1); }

                            if (TargetRoomUser1.RotBody == 0)
                            { TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 1); }

                            if (TargetRoomUser1.RotBody == 6)
                            { TargetRoomUser.MoveTo(TargetRoomUser.X - 1, TargetRoomUser.Y); }

                            if (TargetRoomUser1.RotBody == 2)
                            { TargetRoomUser.MoveTo(TargetRoomUser.X + 1, TargetRoomUser.Y); }

                            if (TargetRoomUser1.RotBody == 3)
                            {
                                TargetRoomUser.MoveTo(TargetRoomUser.X + 1, TargetRoomUser.Y);
                                TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 1);
                            }

                            if (TargetRoomUser1.RotBody == 1)
                            {
                                TargetRoomUser.MoveTo(TargetRoomUser.X + 1, TargetRoomUser.Y);
                                TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 1);
                            }

                            if (TargetRoomUser1.RotBody == 7)
                            {
                                TargetRoomUser.MoveTo(TargetRoomUser.X - 1, TargetRoomUser.Y);
                                TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 1);
                            }

                            if (TargetRoomUser1.RotBody == 5)
                            {
                                TargetRoomUser.MoveTo(TargetRoomUser.X - 1, TargetRoomUser.Y);
                                TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 1);
                            }

                            TargetRoomUser.UpdateNeeded = true;
                            TargetRoomUser1.UpdateNeeded = true;
                            TargetRoomUser1.SetRot(Rotation.Calculate(TargetRoomUser1.X, TargetRoomUser1.Y, TargetRoomUser.GoalX, TargetRoomUser.GoalY));
                            Session.Shout("*Pushes " + TargetRoomUser.GetClient().GetHabbo().UserName + " [-5E]*");
                            Session.GetRoleplay().Energy -= 5;
                        }
                        else
                        {
                            SendChatMessage(Session, Params[1] + " is not close enough.");
                        }

                        return true;
                    }
                #endregion

                #region :setprize
                case "setprize":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Sorry but you aren't an events staff!");
                            return true;
                        }

                        ColourManager.Prize = Convert.ToInt32(Params[1]);
                        Session.SendWhisper("Color wars prize set to " + ColourManager.Prize + " coins!");
                        return true;
                    }
                #endregion

                #region :hit x
                case "golpear":
                    {
                        #region Punching
                        #region Generate Instances / Sessions

                        bool bypass = false;
                        GameClient TargetSession = null;
                        if (Session.GetRoleplay().LastHit != null)
                        {
                            TargetSession = Session.GetRoleplay().LastHit;
                        }

                        if (!bypass)
                        {
                            if (!RoleplayManager.ParamsMet(Params, 1))
                            {
                                Session.SendWhisper("Comando inv√°lido digite: :golpear <usuario>");
                                return true;
                            }

                            string Target = Convert.ToString(Params[1]);
                            RoomUser T = null;

                            foreach (RoomUser User in Session.GetHabbo().CurrentRoom.GetRoomUserManager().UserList.Values)
                            {
                                if (User.IsBot && User.BotData.Name.ToLower() == Target.ToLower())
                                    T = User;
                            }

                            if (T != null)
                            {
                                HabboHotel.Roleplay.Combat.HandCombat.ExecuteAttackBot(Session, T, T.PetData, T.BotData);
                                return true;
                            }

                            TargetSession = RoleplayManager.GenerateSession(Target);

                            if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                            {
                                Session.SendWhisper("El usuario no se encuentra en esta sala.");
                                return true;
                            }

                            if (TargetSession.GetRoleplay().StaffDuty == true && !RoleplayManager.BypassRights(Session))
                            {
                                Session.SendWhisper("No puedes hacer esto con un STAFF en servicio!");
                                return true;
                            }
                            else
                            {
                                Session.GetRoleplay().LastHit = TargetSession;
                                Session.GetRoleplay().ActionLast = "hit";
                            }
                        }
                        #endregion

                        #region Execute
                        HabboHotel.Roleplay.Combat.HandCombat.ExecuteAttack(Session, TargetSession);
                        #endregion
                        #endregion
                        return true;
                    }
                #endregion

                #region :leavegame
                case "salirjuego":
                    {
                        ColourManager.RemovePlayerFromTeam(Session, Session.GetRoleplay().ColourWarTeam, true);
                        return true;
                    }
                #endregion

                #region :gameinfo


                #endregion

                #region :forcewin
                case "forcewin":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }




                        if (!ColourManager.Started)
                        {
                            Session.SendWhisper("There is currently not a color wars game running!");
                            return true;
                        }

                        lock (ColourManager.Teams.Values)
                        {
                            foreach (Team team in ColourManager.Teams.Values)
                            {
                                if (team != Session.GetRoleplay().ColourWarTeam)
                                {
                                    ColourManager.EliminateTeam(team);
                                }
                                //
                            }
                        }



                        return true;
                    }
                #endregion

                #region :forcestop
                case "forcestop":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Session.SendWhisper("You must be event staff to use this command!");
                            return true;
                        }
                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {

                                if (client == null)
                                    continue;

                                if (client.GetHabbo() == null)
                                    continue;

                                if (client.GetHabbo().CurrentRoom == null)
                                    continue;

                                if (!client.GetHabbo().CurrentRoom.RoomData.Name.Contains("[CW]"))
                                {
                                    continue;
                                }

                                if (client.GetRoleplay() != null)
                                {
                                    if (client.GetRoleplay().inColourWars)
                                    {
                                        ColourManager.RemovePlayerFromTeam(client, client.GetRoleplay().ColourWarTeam, false, "An admin has stopped the game!");
                                    }
                                }


                                client.GetRoleplay().Transport(ColourManager.MainLobby, 10);

                            }
                        }

                        ColourManager.EndGame();
                        Session.Shout("*Usos sus poderes divinos para finalizar el juego*");

                        return true;
                    }
                #endregion

                #region :forcestart
                case "forcestart":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Session.SendWhisper("Este comando es solo para staffs!");
                            return true;
                        }

                        ColourManager.TryStart(true);
                        Session.Shout("*Uso sus poderes divinos para forzar el inicio del juego*");

                        return true;
                    }

                #endregion

                #region :teamalert

                case "ta":
                    {
                        string TeamAlert = "";
                        TeamAlert = MergeParams(Params, 1);
                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient client in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (client == null)
                                    continue;

                                if (client.GetRoleplay() == null)
                                    continue;

                                if (!client.GetRoleplay().inColourWars)
                                    continue;

                                if (client.GetRoleplay().ColourWarTeam == null)
                                    continue;

                                if (client.GetRoleplay().ColourWarTeam == Session.GetRoleplay().ColourWarTeam)
                                {
                                    client.SendWhisper("[TEAM Alert][" + Session.GetHabbo().UserName + "]: " + TeamAlert);
                                }
                            }
                        }
                        return true;
                    }

                #endregion

                #region :addtoteam <username> <team>
                case "addtoteam":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Session.SendWhisper("You must be event staff to use this command!");
                            return true;
                        }


                        string Username = null;
                        string Color = null;
                        GameClient TargetSession;

                        if (!RoleplayManager.ParamsMet(Params, 2))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :addtoteam <user> <equipo>");
                            return true;
                        }


                        Username = Params[1];
                        Color = Params[2];

                        if (!ColourManager.Teams.ContainsKey(Color.ToLower()))
                        {
                            Session.SendWhisper("El equipo seleccionado '" + Color.ToLower() + "' no existe!");
                        }

                        TargetSession = RoleplayManager.GenerateSession(Username.ToLower());

                        if (TargetSession == null)
                        {
                            Session.SendWhisper("Este usuario no esta conectado o no existe!");
                            return true;
                        }

                        if (TargetSession.GetHabbo() == null)
                        {
                            Session.SendWhisper("Este usuario no esta conectado o no existe!");
                            return true;
                        }

                        if (TargetSession.GetHabbo().CurrentRoom == null)
                        {
                            Session.SendWhisper("Este usuario no esta conectado o no existe!");
                            return true;
                        }

                        if (TargetSession.GetRoleplay().inColourWars)
                        {
                            Session.SendWhisper("Este usuario ya esta jugando en la guerra de colores!");
                            return true;
                        }

                        if (ColourManager.Teams[Color.ToLower()].Players.ContainsKey(TargetSession))
                        {
                            Session.SendWhisper("Este usuario ya esta en este equipo!");
                            return true;
                        }




                        Session.Shout("*Uso sus poderes divinos para agregar a " + TargetSession.GetHabbo().UserName + " en el equipo " + Color.ToUpper() + "*");

                        ColourManager.ForceAddPlayerToTeam(TargetSession, Color.ToLower());

                        return true;
                    }

                #endregion

                #region :removefromteam <username> <team>
                case "removefromteam":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Session.SendWhisper("You must be event staff to use this command!");
                            return true;
                        }


                        return true;
                    }
                #endregion

                #region :capture
                case "capture":
                    {
                        try
                        {
                            RoomUser Roomuser = Session.GetHabbo().GetRoomUser();
                            Team Team = ColourManager.GetTeamByBase(Roomuser);

                            if (Team != null)
                            {
                                if (Team == Session.GetRoleplay().ColourWarTeam)
                                {
                                    Session.SendWhisper("Oye retardado, esta es tu base!");
                                    return true;
                                }

                                if (Team.KnockedOut)
                                {
                                    Session.SendWhisper("Esta base ya ha sido capturada!");
                                    return true;
                                }

                                if (Team.BeingCaptured)
                                {
                                    Session.SendWhisper("Esta base ya est√° siendo capturada!");
                                    return true;
                                }

                                if (Team.KnockedOut)
                                {
                                    Session.SendWhisper("Este equipo ya ha sido eliminado del juego!");
                                    return true;
                                }
                                // start capturing
                                Team.BeingCaptured = true;
                                ColourManager.MessageTeam("[COLOR WARS] Tu base est√° siendo capturada!", Team);
                                Roomuser.ApplyEffect(59);
                                RoleplayManager.Shout(Session, "*Comenz√≥ a capturar la base del equipo " + Team.Colour.ToLower() + " [ColorWars]*");

                                new CaptureTimer(Session, Team);
                            }
                        }
                        catch (Exception ex) { Logging.LogPacketException(":capture", ex.Message); }
                        return true;
                    }
                #endregion

                #endregion

            }

            return false;
        }
        public static Boolean ParseMafiaWars(GameClient Session, string Input)
        {
            Input = Input.Substring(1);
            string[] Params = Input.Split(' ');

            switch (Params[0].ToLower())
            {


                #region Foton Minigame Commands

                #region :forcestart
                case "forcestart":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            Session.SendWhisper("Este comando es solo para staffs!");
                            return true;
                        }

                        Plus.GetGame().MafiaWars.StartGame(true);
                        Session.Shout("*Uso sus poderes divinos para iniciar el juego de Guerra de Pandilla*");

                        return true;
                    }

                #endregion

                #region :wha <msg>

                case "wha":
                case "walert":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return false;
                        }

                        string Notice = MergeParams(Params, 1);

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient mClient in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (mClient == null)
                                    continue;
                                if (mClient.GetHabbo() == null)
                                    continue;
                                if (mClient.GetHabbo().CurrentRoom == null)
                                    continue;
                                if (mClient.GetConnection() == null)
                                    continue;
                                mClient.SendWhisperBubble("[Hotel Alert][" + Session.GetHabbo().UserName + "]: " + Notice, 33);
                            }
                        }

                        return true;
                    }

                #endregion

                #region :ha <msg>
                case "ha":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            return false;
                        }

                        string Notice = MergeParams(Params, 1);
                        ServerMessage HotelAlert = new ServerMessage(LibraryParser.OutgoingRequest("BroadcastNotifMessageComposer"));
                        HotelAlert.AppendString(Notice + "\r\n" + "- " + Session.GetHabbo().UserName);


                        Plus.GetGame().GetClientManager().QueueBroadcaseMessage(HotelAlert);

                        Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty, "HotelAlert", "Hotel alert [" + Notice + "]");
                    }
                    return true;
                #endregion

                #region :sa <msg>
                case "sa":
                case "sm":
                case "staffalert":
                    if (Session.GetHabbo().HasFuse("fuse_events"))
                    {
                        string message = "";
                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Comando inv√°lido digite: :sa <mensaje>");
                            return true;
                        }
                        else
                        {
                            message = "[" + Session.GetHabbo().UserName + "] " + MergeParams(Params, 1);
                        }

                        RoleplayManager.sendStaffAlert(message, false);

                        Plus.GetGame().GetModerationTool().LogStaffEntry(Session.GetHabbo().UserName, string.Empty, "StaffAlert", "Staff alert [" + message + "]");
                    }
                    return true;
                #endregion

                #region :pull x
                case "pull":
                    {

                        if (!Session.GetHabbo().HasFuse("fuse_vip"))
                        {
                            Session.SendWhisper("No eres miembros VIP!");
                            return true;
                        }

                        Room room = Session.GetHabbo().CurrentRoom;
                        if (room == null)
                        {
                            return true;
                        }


                        RoomUser roomuser = room.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);
                        if (roomuser == null)
                        {
                            return true;
                        }
                        if (Params.Length == 1)
                        {
                            SendChatMessage(Session, "No se encontro el usuario!");
                            return true;
                        }

                        GameClient Target = Plus.GetGame().GetClientManager().GetClientByUserName(Params[1]);
                        if (Target == null)
                            return true;

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("pull_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("pull_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["pull_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["pull_cooldown"] + "/5]");
                            return true;
                        }


                        if (Target.GetHabbo().Id == Session.GetHabbo().Id)
                        {
                            SendChatMessage(Session, "No te puedes atraer a ti mismo!");
                            return true;
                        }
                        RoomUser TargetUser = room.GetRoomUserManager().GetRoomUserByHabbo(Target.GetHabbo().Id);
                        if (TargetUser == null)
                            return true;


                        if (TargetUser.TeleportEnabled)
                            return true;

                        Session.GetRoleplay().MultiCoolDown["pull_cooldown"] = 5;
                        Session.GetRoleplay().CheckingMultiCooldown = true;

                        if (!((Math.Abs((int)(roomuser.X - TargetUser.X)) >= 3) || (Math.Abs((int)(roomuser.Y - TargetUser.Y)) >= 3)))
                        {
                            Session.Shout("*Atrajo a " + Params[1] + " [-5E]*");
                            Session.GetRoleplay().Energy -= 5;
                            if (roomuser.RotBody % 2 != 0)
                                roomuser.RotBody--;

                            if (roomuser.RotBody == 0)
                                TargetUser.MoveTo(roomuser.X, roomuser.Y - 1);
                            else if (roomuser.RotBody == 2)
                                TargetUser.MoveTo(roomuser.X + 1, roomuser.Y);
                            else if (roomuser.RotBody == 4)
                                TargetUser.MoveTo(roomuser.X, roomuser.Y + 1);
                            else if (roomuser.RotBody == 6)
                                TargetUser.MoveTo(roomuser.X - 1, roomuser.Y);

                        }
                        else
                        {
                            SendChatMessage(Session, "Esta muy lejos!");
                            return true;
                        }

                        break;
                    }

                #endregion

                #region :push x
                case "push":
                    {
                        Room TargetRoom;
                        RoomUser TargetRoomUser;
                        RoomUser TargetRoomUser1;
                        TargetRoom = Plus.GetGame().GetRoomManager().GetRoom(Session.GetHabbo().CurrentRoomId);

                        if (TargetRoom == null)
                        {
                            return true;
                        }

                        if (Params.Length == 1)
                        {
                            SendChatMessage(Session, "Comando inv√°lido digite: :push <usuario>");
                            return true;
                        }

                        TargetRoomUser = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Convert.ToString(Params[1]));

                        if (TargetRoomUser == null)
                        {
                            SendChatMessage(Session, "El usuario no fue encontrado!");
                            return true;
                        }

                        if (TargetRoomUser.GetUserName() == Session.GetHabbo().UserName)
                        {
                            SendChatMessage(Session, "No puedes empujarte a ti mismo!");
                            return true;
                        }

                        if (!Session.GetRoleplay().MultiCoolDown.ContainsKey("push_cooldown"))
                        {
                            Session.GetRoleplay().MultiCoolDown.Add("push_cooldown", 0);
                        }
                        if (Session.GetRoleplay().MultiCoolDown["push_cooldown"] > 0)
                        {
                            Session.SendWhisper("Relajate! [" + Session.GetRoleplay().MultiCoolDown["push_cooldown"] + "/3]");
                            return true;
                        }

                        TargetRoomUser1 = TargetRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().Id);

                        if (TargetRoomUser1 == null || TargetRoomUser.TeleportEnabled)
                        {
                            return true;
                        }

                        Session.GetRoleplay().MultiCoolDown["push_cooldown"] = 3;
                        Session.GetRoleplay().CheckingMultiCooldown = true;
                        //if ((TargetRoomUser.X == TargetRoomUser1.X - 1) || (TargetRoomUser.X == TargetRoomUser1.X + 1) || (TargetRoomUser.Y == TargetRoomUser1.Y - 1) || (TargetRoomUser.Y == TargetRoomUser1.Y + 1))
                        if (!((Math.Abs((int)(TargetRoomUser.X - TargetRoomUser1.X)) >= 2) || (Math.Abs((int)(TargetRoomUser.Y - TargetRoomUser1.Y)) >= 2)))
                        {
                            if (TargetRoomUser1.RotBody == 4)
                            { TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 1); }

                            if (TargetRoomUser1.RotBody == 0)
                            { TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 1); }

                            if (TargetRoomUser1.RotBody == 6)
                            { TargetRoomUser.MoveTo(TargetRoomUser.X - 1, TargetRoomUser.Y); }

                            if (TargetRoomUser1.RotBody == 2)
                            { TargetRoomUser.MoveTo(TargetRoomUser.X + 1, TargetRoomUser.Y); }

                            if (TargetRoomUser1.RotBody == 3)
                            {
                                TargetRoomUser.MoveTo(TargetRoomUser.X + 1, TargetRoomUser.Y);
                                TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 1);
                            }

                            if (TargetRoomUser1.RotBody == 1)
                            {
                                TargetRoomUser.MoveTo(TargetRoomUser.X + 1, TargetRoomUser.Y);
                                TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 1);
                            }

                            if (TargetRoomUser1.RotBody == 7)
                            {
                                TargetRoomUser.MoveTo(TargetRoomUser.X - 1, TargetRoomUser.Y);
                                TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y - 1);
                            }

                            if (TargetRoomUser1.RotBody == 5)
                            {
                                TargetRoomUser.MoveTo(TargetRoomUser.X - 1, TargetRoomUser.Y);
                                TargetRoomUser.MoveTo(TargetRoomUser.X, TargetRoomUser.Y + 1);
                            }

                            TargetRoomUser.UpdateNeeded = true;
                            TargetRoomUser1.UpdateNeeded = true;
                            TargetRoomUser1.SetRot(Rotation.Calculate(TargetRoomUser1.X, TargetRoomUser1.Y, TargetRoomUser.GoalX, TargetRoomUser.GoalY));
                            Session.Shout("*Emujo a " + TargetRoomUser.GetClient().GetHabbo().UserName + " [-5 Energia]*");
                            Session.GetRoleplay().Energy -= 5;
                        }
                        else
                        {
                            SendChatMessage(Session, Params[1] + " debes estar m√°s cerca.");
                        }

                        return true;
                    }
                #endregion

                #region :setprize
                case "setprize":
                    {
                        if (!Session.GetHabbo().HasFuse("fuse_events"))
                        {
                            return true;
                        }
                        if (Session.GetHabbo().HasFuse("fuse_builder") && !Session.GetHabbo().HasFuse("fuse_manager"))
                        {
                            Session.SendWhisper("Este comando es solo para STAFFS!");
                            return true;
                        }

                        Plus.GetGame().MafiaWars.Prize = Convert.ToInt32(Params[1]);
                        RoleplayManager.Shout(Session, "El premio de Guerra de Pandillas es de " + Plus.GetGame().MafiaWars.Prize + " billetes!", 33);
                        return true;
                    }
                #endregion

                #region :hit x
                case "golpear":
                    {
                        #region Punching
                        #region Generate Instances / Sessions

                        bool bypass = false;
                        GameClient TargetSession = null;
                        if (Session.GetRoleplay().LastHit != null)
                        {
                            TargetSession = Session.GetRoleplay().LastHit;
                        }

                        if (!bypass)
                        {
                            if (!RoleplayManager.ParamsMet(Params, 1))
                            {
                                Session.SendWhisper("Comando inv√°lido digite: :hit <usuario>");
                                return true;
                            }

                            string Target = Convert.ToString(Params[1]);
                            RoomUser T = null;

                            foreach (RoomUser User in Session.GetHabbo().CurrentRoom.GetRoomUserManager().UserList.Values)
                            {
                                if (User.IsBot && User.BotData.Name.ToLower() == Target.ToLower())
                                    T = User;
                            }

                            if (T != null)
                            {
                                HabboHotel.Roleplay.Combat.HandCombat.ExecuteAttackBot(Session, T, T.PetData, T.BotData);
                                return true;
                            }

                            TargetSession = RoleplayManager.GenerateSession(Target);

                            if (TargetSession == null || TargetSession.GetHabbo().CurrentRoomId != Session.GetHabbo().CurrentRoomId)
                            {
                                Session.SendWhisper("El usuario no se encuentra en esta sala.");
                                return true;
                            }

                            if (TargetSession.GetRoleplay().StaffDuty == true && !RoleplayManager.BypassRights(Session))
                            {
                                Session.SendWhisper("No puedes golpear a un Staff!");
                                return true;
                            }
                            else
                            {
                                Session.GetRoleplay().LastHit = TargetSession;
                                Session.GetRoleplay().ActionLast = "hit";
                            }
                        }
                        #endregion

                        #region Execute
                        HabboHotel.Roleplay.Combat.HandCombat.ExecuteAttack(Session, TargetSession);
                        #endregion
                        #endregion
                        return true;
                    }
                #endregion

                #region :leavegame
                case "salirjuego":
                    {
                        Plus.GetGame().MafiaWars.RemoveUserFromGame(Session, Session.GetRoleplay().TeamString, true);
                        return true;
                    }
                #endregion

                #endregion

            }

            return false;
        }
        public static Boolean Parse2(GameClient Session, string Input)
        {
            if (!Input.StartsWith("#"))
            {
                return false;
            }

            Input = Input.Substring(1);
            string[] Params = Input.Split(' ');

            #region Commands
            switch (Params[0].ToLower())
            {
                #region #aceptar
                case "aceptar":
                    {

                        if (Session.GetRoleplay().OfferData.Count <= 0 && !Session.GetRoleplay().WeaponOffered && !Session.GetRoleplay().marryReq)
                        {
                            Session.SendWhisper("No tienes ofertas actualmente!");
                            return true;
                        }

                        #region Offer Pet
                        if (Session.GetRoleplay().OfferData.ContainsKey("pet"))
                        {
                            int Price = Session.GetRoleplay().OfferData["pet"].OfferPrice;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para comprar esta mascota!");
                                Session.GetRoleplay().OfferData.Remove("pet");
                                return true;
                            }

                            string[] PetData = Session.GetRoleplay().OfferData["pet"].Offering.Split(':');
                            string PetName = PetData[0];
                            string PetType = PetData[1];

                            if (!RoleplayManager.CreateQuickPet(Session, PetType, PetName))
                            {
                                Session.SendWhisper("Sucedio algo y la oferta se cancelo, lo sentimos!");
                                Session.GetRoleplay().OfferData.Remove("pet");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Compro una mascota con el nombre '" + PetName.ToLower() + "' [$-" + Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);

                            return true;
                        }
                        #endregion

                        #region Offer Drink
                        if (Session.GetRoleplay().OfferData.ContainsKey("drink"))
                        {
                            int Price = Session.GetRoleplay().OfferData["drink"].OfferPrice;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar esta oferta!");
                                Session.GetRoleplay().OfferData.Remove("drink");
                                return true;
                            }

                            Food Drink =
                                Substances.GetDrinkById(Convert.ToUInt32(
                                RoleplayManager.GetDrinkFromOffer(Session.GetRoleplay().OfferData["drink"].Offering)));

                            RoleplayManager.Shout(Session, "*Aceptaste la oferta y compraste " + Drink.DisplayName + " por $" + Price + " [+" + Drink.Energy + " Energia][-$" + Drink.Item_Price + "]*");
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Drink.Energy;

                            switch (Drink.UniqueName.ToLower())
                            {
                                case "wine":
                                    #region Wine
                                    ProcessDrunk DrunkUser = new ProcessDrunk(Session);
                                    #endregion
                                    break;

                                default:

                                    break;
                            }

                            Session.GetHabbo().GetRoomUser().CarryItem(19);
                            Session.GetRoleplay().OfferData.Remove("bbj");


                            return true;
                        }
                        #endregion

                        #region Offer Vida
                        if (Session.GetRoleplay().OfferData.ContainsKey("pildora"))
                        {
                            int Price = Session.GetRoleplay().OfferData["pildora"].OfferPrice;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar esta oferta!");
                                Session.GetRoleplay().OfferData.Remove("pildora");
                                return true;
                            }
                            if (Session.GetRoleplay().CurHealth >= 500)
                            {
                                Session.SendWhisper("No puedes comprar m√°s vida! Haz llegado al l√≠mite.");
                                Session.GetRoleplay().OfferData.Remove("pildora");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Aceptaste la oferta y compraste Pildora de Vida por $" + Price + " [+" + Substances.SubstanceData["vida_item_farmacia"].Health + " Vida][-$" + Substances.SubstanceData["vida_item_farmacia"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().CurHealth += Substances.SubstanceData["vida_item_farmacia"].Health;
                            Session.GetHabbo().GetRoomUser().CarryItem(31);
                            Session.GetRoleplay().OfferData.Remove("pildora");
                        

                            return true;
                        }
                        #endregion

                        #region Offer Energy
                        if (Session.GetRoleplay().OfferData.ContainsKey("pastilla"))
                        {
                            int Price = Session.GetRoleplay().OfferData["pastilla"].OfferPrice;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar esta oferta!");
                                Session.GetRoleplay().OfferData.Remove("pastilla");
                                return true;
                            }                      

                            RoleplayManager.Shout(Session, "*Aceptaste la oferta y compraste Pastilla de Energ√≠a por $" + Price + " [+" + Substances.SubstanceData["energia_item_farmacia"].Energy + " Energ√≠a][-$" + Substances.SubstanceData["vida_item_farmacia"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["energia_item_farmacia"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(45);
                            Session.GetRoleplay().OfferData.Remove("pastilla");


                            return true;
                        }
                        #endregion

                        #region Offer BBJ
                        if (Session.GetRoleplay().OfferData.ContainsKey("bbj"))
                        {
                            int Price = Session.GetRoleplay().OfferData["bbj"].OfferPrice;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar esta oferta!");
                                Session.GetRoleplay().OfferData.Remove("bbj");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Aceptaste la oferta y compraste Bubble Juice Cola por $" + Price + " [+" + Substances.SubstanceData["md_limukaappi"].Energy + " Energia][-$" + Substances.SubstanceData["md_limukaappi"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["md_limukaappi"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(19);
                            Session.GetRoleplay().OfferData.Remove("bbj");


                            return true;
                        }
                        #endregion

                        #region Ofrecer Cafe
                        if (Session.GetRoleplay().OfferData.ContainsKey("cafe"))
                        {
                            int Price = Session.GetRoleplay().OfferData["cafe"].OfferPrice;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar esta oferta!");
                                Session.GetRoleplay().OfferData.Remove("cafe");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Aceptaste la oferta y compraste un Caf√© Negro por $" + Price + " [+" + Substances.SubstanceData["ads_mall_coffeem"].Energy + " Energia][-$" + Substances.SubstanceData["ads_mall_coffeem"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["ads_mall_coffeem"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(41);
                            Session.GetRoleplay().OfferData.Remove("cafe");


                            return true;
                        }
                        #endregion

                        #region Ofrecer Cafe Expres
                        if (Session.GetRoleplay().OfferData.ContainsKey("express"))
                        {
                            int Price = Session.GetRoleplay().OfferData["express"].OfferPrice;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar esta oferta!");
                                Session.GetRoleplay().OfferData.Remove("express");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Aceptaste la oferta y compraste un Caf√© Express por $" + Price + " [+" + Substances.SubstanceData["hc2_coffee"].Energy + " Energia][-$" + Substances.SubstanceData["hc2_coffee"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["hc2_coffee"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(13);
                            Session.GetRoleplay().OfferData.Remove("express");


                            return true;
                        }
                        #endregion

                        #region Ofrecer Cerveza
                        if (Session.GetRoleplay().OfferData.ContainsKey("cerveza"))
                        {
                            int Price = Session.GetRoleplay().OfferData["cerveza"].OfferPrice;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar esta oferta!");
                                Session.GetRoleplay().OfferData.Remove("cerveza");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Aceptaste la oferta y compraste una Cerveza por $" + Price + " [+" + Substances.SubstanceData["xmas12_barrel"].Energy + " Energia][-$" + Substances.SubstanceData["xmas12_barrel"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["xmas12_barrel"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(73);
                            Session.GetRoleplay().OfferData.Remove("cerveza");


                            return true;
                        }
                        #endregion

                        #region Ofrecer Helado de Vainilla
                        if (Session.GetRoleplay().OfferData.ContainsKey("hvainilla"))
                        {
                            int Price = Session.GetRoleplay().OfferData["hvainilla"].OfferPrice;
                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar la oferta!");
                                Session.GetRoleplay().OfferData.Remove("hvainilla");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Acepto la oferta y compro un Helado de Vainilla por $" + Price + " [+" + Substances.SubstanceData["rare_icecream*10"].Energy + " Energia][-$" + Substances.SubstanceData["rare_icecream*10"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["rare_icecream*10"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(4);
                            Session.GetRoleplay().OfferData.Remove("hvainilla");
                            return true;
                        }
                        #endregion

                        #region Ofrecer Helado de Fresa
                        if (Session.GetRoleplay().OfferData.ContainsKey("hfresa"))
                        {
                            int Price = Session.GetRoleplay().OfferData["hfresa"].OfferPrice;
                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar la oferta!");
                                Session.GetRoleplay().OfferData.Remove("hfresa");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Acepto la oferta y compro un Helado de Fresa por $" + Price + " [+" + Substances.SubstanceData["rare_icecream*0"].Energy + " Energia][-$" + Substances.SubstanceData["rare_icecream*0"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["rare_icecream*0"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(75);
                            Session.GetRoleplay().OfferData.Remove("hfresa");
                            return true;
                        }
                        #endregion
                        
                        #region Ofrecer Helado de Chocolate
                        if (Session.GetRoleplay().OfferData.ContainsKey("hchocolate"))
                        {
                            int Price = Session.GetRoleplay().OfferData["hchocolate"].OfferPrice;
                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar la oferta!");
                                Session.GetRoleplay().OfferData.Remove("hchocolate");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Acepto la oferta y compro un Helado de Chocolate por $" + Price + " [+" + Substances.SubstanceData["rare_icecream*7"].Energy + " Energia][-$" + Substances.SubstanceData["rare_icecream*7"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["rare_icecream*7"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(77);
                            Session.GetRoleplay().OfferData.Remove("hchocolate");
                            return true;
                        }
                        #endregion

                        #region Ofrecer Helado de Limon
                        if (Session.GetRoleplay().OfferData.ContainsKey("hlimon"))
                        {
                            int Price = Session.GetRoleplay().OfferData["hlimon"].OfferPrice;
                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar la oferta!");
                                Session.GetRoleplay().OfferData.Remove("hlimon");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Acepto la oferta y compro un Helado de Limon por $" + Price + " [+" + Substances.SubstanceData["rare_icecream_campaign"].Energy + " Energia][-$" + Substances.SubstanceData["rare_icecream_campaign"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["rare_icecream_campaign"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(76);
                            Session.GetRoleplay().OfferData.Remove("hlimon");
                            return true;
                        }
                        #endregion

                        #region Ofrecer Helado Especial
                        if (Session.GetRoleplay().OfferData.ContainsKey("hespecial"))
                        {
                            int Price = Session.GetRoleplay().OfferData["hespecial"].OfferPrice;
                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar la oferta!");
                                Session.GetRoleplay().OfferData.Remove("hespecial");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Acepto la oferta y compro un Helado Especial por $" + Price + " [+" + Substances.SubstanceData["calippo"].Energy + " Energia][-$" + Substances.SubstanceData["calippo"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["calippo"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(26);
                            Session.GetRoleplay().OfferData.Remove("hespecial");
                            return true;
                        }
                        #endregion

                        #region Ofrecer Palomitas
                        if (Session.GetRoleplay().OfferData.ContainsKey("palomitas"))
                        {
                            int Price = Session.GetRoleplay().OfferData["palomitas"].OfferPrice;
                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar la oferta!");
                                Session.GetRoleplay().OfferData.Remove("palomitas");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Acepto la oferta y compro un Helado Especial por $" + Price + " [+" + Substances.SubstanceData["cine_popcorn"].Energy + " Energia][-$" + Substances.SubstanceData["cine_popcorn"].Item_Price + "]*", 6);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().Energy += Substances.SubstanceData["cine_popcorn"].Energy;
                            Session.GetHabbo().GetRoomUser().CarryItem(26);
                            Session.GetRoleplay().OfferData.Remove("palomitas");
                            return true;
                        }
                        #endregion

                        #region Offer Phone
                        if (Session.GetRoleplay().OfferData.ContainsKey("phone"))
                        {
                            int Price = Session.GetRoleplay().OfferData["phone"].OfferPrice;
                            GameClient Offerer = Session.GetRoleplay().OfferData["phone"].OfferUser;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar la oferta!");
                                Session.GetRoleplay().OfferData.Remove("phone");
                                return true;
                            }

                            if (Offerer == null && !Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("PHONE"))
                            {
                                Session.SendWhisper("Esta persona esta desconectada por lo que la oferta se cancelo!");
                                Session.GetRoleplay().OfferData.Remove("phone");
                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Aceptaste la oferta y compraste un iPhone 7 por $" + Price + " [-$" + Price + "]*");
                            Session.GetRoleplay().Phone = 1;
                            Session.GetRoleplay().SaveQuickStat("phone", "" + 1);
                            RoleplayManager.GiveMoney(Session, -Price);
                            Session.GetRoleplay().OfferData.Remove("phone");
                            return true;
                        }
                        #endregion

                        #region Marriage Request
                        if (Session.GetRoleplay().marryReq && Session.GetRoleplay().marryReqer != 0)
                        {

                            GameClient TargetSession = null;
                            TargetSession = RoleplayManager.GenerateSession(Session.GetRoleplay().marryReqer);

                            RoleplayManager.Shout(Session, "*Si, si, si! Te amo bebe!*", 17);

                            Session.GetRoleplay().Married_To = Convert.ToInt32(Session.GetRoleplay().marryReqer);
                            Session.GetRoleplay().SaveQuickStat("married_to", "" + Session.GetRoleplay().Married_To);

                            TargetSession.GetRoleplay().Married_To = Convert.ToInt32(Session.GetHabbo().Id);
                            TargetSession.GetRoleplay().SaveQuickStat("married_to", "" + TargetSession.GetRoleplay().Married_To);

                            Session.GetRoleplay().marryReq = false;
                            Session.GetRoleplay().marryReqer = 0;

                            TargetSession.GetRoleplay().marryReq = false;
                            TargetSession.GetRoleplay().marryReqer = 0;

                            return true;
                        }
                        #endregion

                        #region Offer Weed
                        if (Session.GetRoleplay().OfferData.ContainsKey("weed"))
                        {
                            int Price = Session.GetRoleplay().OfferData["weed"].OfferPrice;
                            GameClient Offerer = Session.GetRoleplay().OfferData["weed"].OfferUser;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar esta oferta!");
                                Session.GetRoleplay().OfferData.Remove("weed");
                                return true;
                            }

                            if (Offerer == null)
                            {
                                Session.SendWhisper("La persona esta desconectada, no se pudo hacer la oferta!");
                                Session.GetRoleplay().OfferData.Remove("weed");

                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Aceptaste la oferta y compraste " + Session.GetRoleplay().OfferData["weed"].OfferAmount + "g de marihuana por $" + Price + " [-$" + Price + "]*", 6);
                            Session.GetRoleplay().SaveQuickStat("weed", "" + (Session.GetRoleplay().Weed + 5));
                            Session.GetRoleplay().Weed += 5;
                            RoleplayManager.GiveMoney(Session, -Price);
                            RoleplayManager.GiveMoney(Offerer, Price);
                            if (Offerer != null)
                            {
                                Offerer.SendWhisper(Session.GetHabbo().UserName + " acepto la oferta, acabas de recibir $" + Price);
                                Offerer.GetRoleplay().SaveQuickStat("weed", "" + (Offerer.GetRoleplay().Weed - 5));
                                Offerer.GetRoleplay().Weed -= 5;
                            }
                            Session.GetRoleplay().OfferData.Remove("weed");


                            return true;
                        }
                        #endregion

                        #region Oferta Masturbaci√≥n
                        if (Session.GetRoleplay().OfferData.ContainsKey("masturbacion"))
                        {
                            int Price = Session.GetRoleplay().OfferData["masturbacion"].OfferPrice;
                            GameClient Offerer = Session.GetRoleplay().OfferData["masturbacion"].OfferUser;

                            if (Session.GetHabbo().Credits < 1000)
                            {
                                Session.SendWhisper("No tienes $1000 para aceptar esta oferta!");
                                Session.GetRoleplay().OfferData.Remove("masturbacion");
                                return true;
                            }

                            if (Offerer == null)
                            {
                                Session.SendWhisper("La persona esta desconectada, no se pudo hacer la oferta!");
                                Session.GetRoleplay().OfferData.Remove("masturbacion");

                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Aceptaste la masturbaci√≥n de una puta por $1000 [-$1000]*", 6);
                            RoleplayManager.GiveMoney(Session, -1000);
                            RoleplayManager.GiveMoney(Offerer, 1000);
                            if (Offerer != null)
                            {
                                Offerer.SendWhisper(Session.GetHabbo().UserName + " acepto la oferta, acabas de recibir $1000");
                            }
                            Session.GetRoleplay().OfferData.Remove("masturbacion");


                            return true;
                        }
                        #endregion

                        #region Offer Carrots
                        if (Session.GetRoleplay().OfferData.ContainsKey("carrots"))
                        {
                            int Price = Session.GetRoleplay().OfferData["carrots"].OfferPrice;
                            GameClient Offerer = Session.GetRoleplay().OfferData["carrots"].OfferUser;

                            if (Session.GetHabbo().Credits < Price)
                            {
                                Session.SendWhisper("No tienes $" + Price + " para aceptar la oferta!");
                                Session.GetRoleplay().OfferData.Remove("carrots");
                                return true;
                            }

                            if (Offerer == null)
                            {
                                Session.SendWhisper("La persona esta desconectada, no se pudo hacer la oferta!");
                                Session.GetRoleplay().OfferData.Remove("carrots");

                                return true;
                            }

                            RoleplayManager.Shout(Session, "*Aceptaste y compraste " + Session.GetRoleplay().OfferData["carrots"].OfferAmount + "g de cocaina por $" + Price + " [-$" + Price + "]*", 6);
                            Session.GetRoleplay().SaveQuickStat("carrots", "" + (Session.GetRoleplay().Carrots + 3));
                            Session.GetRoleplay().Carrots += 3;
                            RoleplayManager.GiveMoney(Session, -Price);
                            RoleplayManager.GiveMoney(Offerer, Price);
                            if (Offerer != null)
                            {
                                Offerer.SendWhisper(Session.GetHabbo().UserName + " acepto la oferta, acabas de recibir $" + Price);
                                Offerer.GetRoleplay().SaveQuickStat("carrots", "" + (Offerer.GetRoleplay().Carrots - 3));
                                Offerer.GetRoleplay().Carrots -= 3;
                            }
                            Session.GetRoleplay().OfferData.Remove("carrots");


                            return true;
                        }
                        #endregion

                        #region Offer Weapon
                        if (WeaponManager.isWeapon(Session.GetRoleplay().WeaponOfferedSell.ToLower()))
                        {
                            if (Session.GetRoleplay().OfferData.ContainsKey(Session.GetRoleplay().WeaponOfferedSell.ToLower()))
                            {
                                string wep_name = Session.GetRoleplay().WeaponOfferedSell.ToLower();
                                int Price = WeaponManager.WeaponsData[Session.GetRoleplay().WeaponOfferedSell.ToLower()].Price;
                                GameClient Offerer = Session.GetRoleplay().OfferData[wep_name].OfferUser;

                                if (Session.GetHabbo().Credits < Price)
                                {
                                    Session.SendWhisper("No tienes $" + Price + " para aceptar esta oferta!");
                                    Session.GetRoleplay().OfferData.Remove(wep_name);
                                    return true;
                                }


                                if (Offerer == null && !Session.GetHabbo().CurrentRoom.RoomData.Description.Contains("AMMUNATION"))
                                {
                                    Session.SendWhisper("La persona que te hizo esta oferta esta desconectada, la oferta se cancelo!");
                                    Session.GetRoleplay().OfferData.Remove(wep_name);
                                    return true;
                                }

                                RoleplayManager.GiveMoney(Session, -Price);
                                RoleplayManager.Shout(Session, "*Aceptaste y compraste una " + Session.GetRoleplay().OfferData[wep_name].OfferAmount + " " + wep_name + " por $" + Price + " [-$" + Price + "]*", 6);
                                Session.GetRoleplay().addWeapon(wep_name);
                                if (Offerer != null)
                                {
                                    RoleplayManager.GiveMoney(Offerer, +100);
                                    Offerer.SendWhisper(Session.GetHabbo().UserName + " aceptola oferta. Haz recibido $" + 100 + " de comision por tu venta!");
                                }
                                RoleplayManager.sendStaffAlert(Session.GetHabbo().UserName + " acaba de comprar " + Session.GetRoleplay().OfferData[wep_name].OfferAmount + " " + wep_name + " por $" + Price, true);
                                Session.GetRoleplay().OfferData.Remove(wep_name);
                            }

                            return true;
                        }
                        #endregion

                    }
                    break;
                #endregion

                #region #decline
                case "rechazar":
                    {
                        if (Session.GetRoleplay().OfferData.Count <= 0 && !Session.GetRoleplay().marryReq)
                        {
                            Session.SendWhisper("Actualmente no hay ofertas!");
                            return true;
                        }

                        Session.GetRoleplay().WeaponOffered = false;

                        Session.GetRoleplay().marryReq = false;
                        Session.GetRoleplay().marryReqer = 0;

                        Session.GetRoleplay().OfferData.Clear();

                        RoleplayManager.Shout(Session, "*Rechazo todas las ofertas*", 7);

                        return true;
                    }
                #endregion
            }
            #endregion

            return false;
        }
        public static Boolean MiniGameCmds(GameClient Session, string Input)
        {
            if (!Input.StartsWith("#"))
            {
                return false;
            }

            Input = Input.Substring(1);
            string[] Params = Input.Split(' ');

            switch (Params[0].ToLower())
            {
                #region :craft <item>
                case "craft":
                    {

                        #region Params / Vars

                        string Item = "";

                        if (!RoleplayManager.ParamsMet(Params, 1))
                        {
                            Session.SendWhisper("Incorrect command syntax: :craft <item>");
                            return true;
                        }
                        else
                        {
                            Item = Convert.ToString(Params[1]);
                        }

                        #endregion

                        #region Conditions

                        #endregion

                        #region Execute

                        #endregion

                        return true;
                    }
                #endregion
                #region :dropmine
                case "dropmine":
                    {

                        #region Conditions
                        RoomUser User = Session.GetHabbo().GetRoomUser();
                        if (!Session.GetRoleplay().HungerGames)
                        {
                            Session.SendWhisper("You are not in Hunger Games!");
                            return true;
                        }
                        if (!Session.GetRoleplay().HungerGames_Inventory.ContainsKey("landmine"))
                        {
                            Session.SendWhisper("You do not have a landmine!");
                            return true;
                        }
                        if (Session.GetRoleplay().HungerGames_Inventory["landmine"] <= 0)
                        {
                            Session.SendWhisper("You do not have anymore landmines left!");
                            return true;
                        }
                        #endregion


                        #region Execute

                        Session.GetHabbo().CurrentRoom.GetGameMap().Model.SqState[User.X][User.Y] = SquareState.HungerGames_LandMine;
                        Session.Shout("*Drops a landmine*");
                        Session.GetRoleplay().HungerGames_Inventory["landmine"] -= 1;
                        #endregion

                        return true;
                    }
                #endregion
                #region :giveweapon <user> <weapon>
                case "giveweapon":
                    {


                        #region Vars / Params
                        string Username = "";
                        string Weapon = "";
                        #endregion

                        #region Conditions
                        if (RoleplayManager.ParamsMet(Params, 2))
                        {
                            Username = Convert.ToString(Params[1]);
                            Weapon = Convert.ToString(Params[2]);
                        }
                        else
                        {
                            Session.SendWhisper("Parametros incorrectos");
                            return true;
                        }

                        #endregion

                        #region Execute
                        GameClient Targ = RoleplayManager.GenerateSession(Username);
                        if (Targ == null)
                            return true;

                        Targ.GetRoleplay().HungerGames_Inventory.Add(Weapon.ToLower(), 30);
                        Session.SendWhisper("Entregaste a " + Targ.GetHabbo().UserName + " un " + Weapon.ToLower());
                        Targ.SendWhisper("Recibiste un " + Weapon.ToLower() + " de " + Session.GetHabbo().UserName);
                        #endregion

                        return true;
                    }
                #endregion
                #region :forcestop
                case "forcestop":
                    {

                        lock (Plus.GetGame().GetClientManager().Clients.Values)
                        {
                            foreach (GameClient mClient in Plus.GetGame().GetClientManager().Clients.Values)
                            {
                                if (mClient == null)
                                    continue;
                                if (mClient.GetHabbo() == null)
                                    continue;
                                if (mClient.GetHabbo().CurrentRoom == null)
                                    continue;
                                if (mClient.GetRoleplay() == null)
                                    continue;

                                if (!mClient.GetRoleplay().InMiniGame)
                                    continue;

                                mClient.GetRoleplay().InMiniGame = false;
                                mClient.GetRoleplay().HungerGames = false;
                                mClient.GetRoleplay().HungerGames_Cash = 0;
                                mClient.GetRoleplay().HungerGames_Dead = false;
                                mClient.GetRoleplay().HungerGames_Inventory.Clear();
                                mClient.GetRoleplay().HungerGames_Item_Wielding = "";
                                mClient.GetRoleplay().HungerGames_Pts = 0;
                                mClient.GetHabbo().GetRoomUser().ApplyEffect(0);
                            }
                        }
                        Session.SendWhisper("Listo!");


                        return true;
                    }
                #endregion

            }

            return false;
        }
        public static string MergeParams(string[] Params, int Start)
        {
            StringBuilder MergedParams = new StringBuilder();

            for (int i = 0; i < Params.Length; i++)
            {
                if (i < Start)
                {
                    continue;
                }

                if (i > Start)
                {
                    MergedParams.Append(" ");
                }

                MergedParams.Append(Params[i]);
            }

            return MergedParams.ToString();
        }

        public static void SendChatMessage(GameClient Session, string Message)
        {
            RoomUser User = Session.GetHabbo().CurrentRoom.GetRoomUserManager().GetRoomUserByHabbo(Session.GetHabbo().UserName);
            Session.SendWhisper(Message);
        }
        #endregion

    }
}
